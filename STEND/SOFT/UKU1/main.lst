L 1 "main.c"
N//Базовая ветка
N//#define SC16IS740_UART
N
N
N// Определение входов от реле по входам АЦП
N// REL2.3 означает третье реле(счет слева направо) во втором канале(счет от себя)
N// REL1.1	adc_buff_[0];
N// REL1.2	adc_buff_[7];
N// REL1.3	adc_buff_[8];
N// REL2.1	adc_buff_[1];
N// REL2.2	adc_buff_[4];
N// REL2.3	adc_buff_[3];
N// REL3.1	adc_buff_[2];
N// REL3.2	adc_buff_[6];
N// REL3.2	adc_buff_[5];
N
N
N#include "lcd_AGM1232_uku207_3.h"
L 1 "lcd_AGM1232_uku207_3.h" 1
N#ifndef _LCD_AGM1232_UKU203_H_
N
N#define _LCD_AGM1232_UKU203_H_
N
N
N#define A0	18
N#define E1	19
N#define E2	20
N#define RW     21
N
N#define D0     22
N#define D1     D0+1
N#define D2     D1+1
N#define D3     D2+1
N#define D4     D3+1
N#define D5     D4+1
N#define D6     D5+1
N#define D7     D6+1
N
N#define RES	30
N
N
N#define _RESET_				226
N#define _DISPLAY_ON_             	175
N#define _DISPLAY_OFF_            	174
N#define _SET_PAGE_               	184
N#define _SET_COLUMN_             	0
N#define _SET_RAW_             	0xc0
N#define _SET_DISPLAY_START_LINE_ 	192
N#define Max_Col		60
N#define Max_page 		3   
N
N
Nvoid lcd1_chk(void);
Nvoid lcd1_wr(char in);
Nvoid lcd2_chk(void);
Nvoid lcd2_wr(char in);
Nchar data1_wr(char in);
Nvoid data2_wr(char in);
Nvoid lcd_set_page(char in);
Nvoid lcd_set_col(char in);
Nvoid lcd_set_raw(char in);
Nvoid lcd_init(void);
Nvoid status(void);
Nvoid delay(void);
Nvoid ltstrobe(char in);
Nvoid lcd_init_(void);
Nvoid lcd_clear(void);
Nvoid lcd_on(void);
Nvoid lcd_off(void);
Nvoid lcd_out(char* adr);
N
N#endif
L 19 "main.c" 2
N#include "rtl.h"
L 1 "C:\Keil\ARM\RV31\INC\rtl.h" 1
N/*----------------------------------------------------------------------------
N *      RL-ARM - A P I 
N *----------------------------------------------------------------------------
N *      Name:    RTL.H 
N *      Purpose: Application Programming Interface. 
N *      Rev.:    V4.13
N *----------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2010 KEIL - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N#ifndef __RTL_H__
N#define __RTL_H__
N
N/* RL-ARM version number. */
N#define __RL_ARM_VER    413
N 
N#define __task          __declspec(noreturn)
N
N#ifndef NULL
N #ifdef __cplusplus              // EC++
S  #define NULL          0
N #else
N  #define NULL          ((void *) 0)
N #endif
N#endif
N
N#ifndef EOF
N #define EOF            -1
N#endif
N
N#ifndef __size_t
N #define __size_t       1
N typedef unsigned int   size_t;
N#endif
N
Ntypedef signed char     S8;
Ntypedef unsigned char   U8;
Ntypedef short           S16;
Ntypedef unsigned short  U16;
Ntypedef int             S32;
Ntypedef unsigned int    U32;
Ntypedef long long       S64;
Ntypedef unsigned long long U64;
Ntypedef unsigned char   BIT;
Ntypedef unsigned int    BOOL;
N
N#ifndef __TRUE
N #define __TRUE         1
N#endif
N#ifndef __FALSE
N #define __FALSE        0
N#endif
N
N#ifdef __BIG_ENDIAN
S #define U32_LE(v) (__rev(v))
S #define U16_LE(v) (__rev(v) >> 16) 
S #define U32_BE(v)       (v)
S #define U16_BE(v)       (v)
N#else
N #define U32_BE(v) (__rev(v))
N #define U16_BE(v) (__rev(v) >> 16) 
N #define U32_LE(v)       (v)
N #define U16_LE(v)       (v)
N#endif
N
N/*----------------------------------------------------------------------------
N *                             RTX Kernel API
N *---------------------------------------------------------------------------*/
N
N#ifdef __cplusplus               // EC++
Sextern "C"  {
N#endif
N
N/* Definition of Semaphore type */
Ntypedef U32 OS_SEM[2];
N
N/* Definition of Mailbox type */
N#define os_mbx_declare(name,cnt)    U32 name [4 + cnt]
Ntypedef U32 OS_MBX[];
N
N/* Definition of Mutex type */
Ntypedef U32 OS_MUT[3];
N
N/* Task Identification number. */
Ntypedef U32 OS_TID;
N
N/* Function return of system calls returning an object identification */
Ntypedef void *OS_ID;
N
N/* Function return of system calls indicating an event or completion state */
Ntypedef U32 OS_RESULT;
N
N/* Return codes */
N#define OS_R_TMO        0x01
N#define OS_R_EVT        0x02
N#define OS_R_SEM        0x03
N#define OS_R_MBX        0x04
N#define OS_R_MUT        0x05
N
N#define OS_R_OK         0x00
N#define OS_R_NOK        0xff
N
N#define OS_TCB_SIZE     48
N#define OS_TMR_SIZE     8
N
N/* Error Codes */
N#define OS_ERR_STK_OVF  1
N#define OS_ERR_FIFO_OVF 2
N#define OS_ERR_MBX_OVF  3
N
N#if !(defined(__TARGET_ARCH_6S_M) || defined(__TARGET_ARCH_7_M) || defined(__TARGET_ARCH_7E_M))
X#if !(0L || 1L || 0L)
S
S/*----------------------------------------------------------------------------
S *      Functions ARM
S *---------------------------------------------------------------------------*/
S
S/* Task Management */
S#define os_sys_init(tsk)              os_sys_init0(tsk,0,NULL)
S#define os_sys_init_prio(tsk,prio)    os_sys_init0(tsk,prio,NULL)
S#define os_sys_init_user(tsk,prio,stk,size)                                   \
S                                      os_sys_init0(tsk,prio|(size<<8),stk)
X#define os_sys_init_user(tsk,prio,stk,size)                                                                         os_sys_init0(tsk,prio|(size<<8),stk)
S#define os_tsk_create(tsk,prio)       os_tsk_create0(tsk,prio,NULL,NULL)
S#define os_tsk_create_user(tsk,prio,stk,size)                                 \
S                                      os_tsk_create0(tsk,prio|(size<<8),stk,NULL)
X#define os_tsk_create_user(tsk,prio,stk,size)                                                                       os_tsk_create0(tsk,prio|(size<<8),stk,NULL)
S#define os_tsk_create_ex(tsk,prio,argv) os_tsk_create_ex0(tsk,prio,NULL,argv)
S#define os_tsk_create_user_ex(tsk,prio,stk,size,argv)                         \
S                                      os_tsk_create_ex0(tsk,prio|(size<<8),stk,argv)
X#define os_tsk_create_user_ex(tsk,prio,stk,size,argv)                                                               os_tsk_create_ex0(tsk,prio|(size<<8),stk,argv)
S#define os_tsk_delete_self()          os_tsk_delete(0)
S#define os_tsk_prio_self(prio)        os_tsk_prio(0,prio)
S#define isr_tsk_get()                 os_tsk_self()
S
Sextern void      os_sys_init0 (void (*task)(void), U32 prio_stksz, void *stk);
Sextern OS_TID    os_tsk_create0 (void (*task)(void), U32 prio_stksz, 
S                                 void *stk, void *argv);
Sextern OS_TID    os_tsk_create_ex0 (void (*task)(void *), U32 prio_stksz, 
S                                    void *stk, void *argv);
Sextern OS_TID    os_tsk_self (void);
Sextern void      os_tsk_pass (void);
Sextern OS_RESULT os_tsk_prio (OS_TID task_id, U8 new_prio);
Sextern OS_RESULT os_tsk_delete (OS_TID task_id);
S
S/* Event flag Management */
S#define os_evt_wait_or(wflags,tmo)      os_evt_wait(wflags,tmo,__FALSE)
S#define os_evt_wait_and(wflags,tmo)     os_evt_wait(wflags,tmo,__TRUE)
S
Sextern OS_RESULT os_evt_wait (U16 wait_flags, U16 timeout, BOOL and_wait);
Sextern void      os_evt_set (U16 event_flags, OS_TID task_id);
Sextern void      os_evt_clr (U16 clear_flags, OS_TID task_id);
Sextern void      isr_evt_set (U16 event_flags, OS_TID task_id);
Sextern U16       os_evt_get (void);
S
S/* Semaphore Management */
Sextern void      os_sem_init (OS_ID semaphore, U16 token_count);
Sextern OS_RESULT os_sem_send (OS_ID semaphore);
Sextern OS_RESULT os_sem_wait (OS_ID semaphore, U16 timeout);
Sextern void      isr_sem_send (OS_ID semaphore);
S
S/* Mailbox Management */
S#define isr_mbx_check(mbx)              os_mbx_check(mbx)
S
Sextern void      os_mbx_init (OS_ID mailbox, U16 mbx_size);
Sextern OS_RESULT os_mbx_send (OS_ID mailbox, void *message_ptr, U16 timeout);
Sextern OS_RESULT os_mbx_wait (OS_ID mailbox, void  **message, U16 timeout);
Sextern OS_RESULT os_mbx_check (OS_ID mailbox);
Sextern void      isr_mbx_send (OS_ID mailbox, void *message_ptr);
Sextern OS_RESULT isr_mbx_receive (OS_ID mailbox, void **message);
S
S/* Mutex Management */
Sextern void      os_mut_init (OS_ID mutex);
Sextern OS_RESULT os_mut_release (OS_ID mutex);
Sextern OS_RESULT os_mut_wait (OS_ID mutex, U16 timeout);
S
S/* Time Management */
Sextern void      os_dly_wait (U16 delay_time);
Sextern void      os_itv_set (U16 interval_time);
Sextern void      os_itv_wait (void);
S
S/* User Timer Management */
Sextern OS_ID     os_tmr_create (U16 tcnt, U16 info);
Sextern OS_ID     os_tmr_kill (OS_ID timer);
S
S/* System Functions */
Sextern void      tsk_lock (void) __swi (5);
Sextern void      tsk_unlock (void);
S
S/* Fixed Memory Block Management Functions */
Sextern int       _init_box (void *box_mem, U32 box_size, U32 blk_size);
Sextern void     *_alloc_box (void *box_mem) __swi (1);
Sextern void     *_calloc_box (void *box_mem);
Sextern int       _free_box (void *box_mem, void *box) __swi (2);
S
N#else
N
N/*----------------------------------------------------------------------------
N *      Functions Cortex-M
N *---------------------------------------------------------------------------*/
N
N#define __SVC_0         __svc_indirect(0)
N
N/* Task Management */
Nextern void      os_set_env    (void);
Nextern void      rt_sys_init   (void (*task)(void), U8 priority, void *stk);
Nextern void      rt_tsk_pass   (void);
Nextern OS_TID    rt_tsk_self   (void);
Nextern OS_RESULT rt_tsk_prio   (OS_TID task_id, U8 new_prio);
Nextern OS_TID    rt_tsk_create (void (*task)(void), U8 priority, void *stk, void *argv);
Nextern OS_RESULT rt_tsk_delete (OS_TID task_id);
N
N#define os_sys_init(tsk)              os_set_env();                           \
N                                      _os_sys_init((U32)rt_sys_init,tsk,0,NULL)
X#define os_sys_init(tsk)              os_set_env();                                                                 _os_sys_init((U32)rt_sys_init,tsk,0,NULL)
N#define os_sys_init_user(tsk,prio,stk,size)                                   \
N                                      os_set_env();                           \
N                                      _os_sys_init((U32)rt_sys_init,tsk,prio|(size<<8),stk)
X#define os_sys_init_user(tsk,prio,stk,size)                                                                         os_set_env();                                                                 _os_sys_init((U32)rt_sys_init,tsk,prio|(size<<8),stk)
N#define os_sys_init_prio(tsk,prio)    os_set_env();                           \
N                                      _os_sys_init((U32)rt_sys_init,tsk,prio,NULL)
X#define os_sys_init_prio(tsk,prio)    os_set_env();                                                                 _os_sys_init((U32)rt_sys_init,tsk,prio,NULL)
N#define os_tsk_create(tsk,prio)       _os_tsk_create((U32)rt_tsk_create,tsk,prio,NULL,NULL)
N#define os_tsk_create_user(tsk,prio,stk,size)                                 \
N                                      _os_tsk_create((U32)rt_tsk_create,tsk,prio|(size<<8),stk,NULL)
X#define os_tsk_create_user(tsk,prio,stk,size)                                                                       _os_tsk_create((U32)rt_tsk_create,tsk,prio|(size<<8),stk,NULL)
N#define os_tsk_create_ex(tsk,prio,argv) _os_tsk_create_ex((U32)rt_tsk_create,tsk,prio,NULL,argv)
N#define os_tsk_create_user_ex(tsk,prio,stk,size,argv)                         \
N                                      _os_tsk_create_ex((U32)rt_tsk_create,tsk,prio|(size<<8),stk,argv)
X#define os_tsk_create_user_ex(tsk,prio,stk,size,argv)                                                               _os_tsk_create_ex((U32)rt_tsk_create,tsk,prio|(size<<8),stk,argv)
N#define os_tsk_self()                 _os_tsk_self((U32)rt_tsk_self)
N#define os_tsk_pass()                 _os_tsk_pass((U32)rt_tsk_pass)
N#define os_tsk_prio(task_id,new_prio) _os_tsk_prio((U32)rt_tsk_prio,task_id,new_prio)
N#define os_tsk_prio_self(prio)        _os_tsk_prio((U32)rt_tsk_prio,0,prio)
N#define os_tsk_delete(task_id)        _os_tsk_delete((U32)rt_tsk_delete,task_id)
N#define os_tsk_delete_self()          _os_tsk_delete((U32)rt_tsk_delete, 0)
N#define isr_tsk_get()                 rt_tsk_self()
N
Nextern void      _os_sys_init(U32 p, void (*task)(void), U32 prio_stksz,
N                                     void *stk)                        __SVC_0;
X                                     void *stk)                        __svc_indirect(0);
Nextern OS_TID    _os_tsk_create (U32 p, void (*task)(void), U32 prio_stksz,
N                                        void *stk, void *argv)         __SVC_0;
X                                        void *stk, void *argv)         __svc_indirect(0);
Nextern OS_TID    _os_tsk_create_ex (U32 p, void (*task)(void *), U32 prio_stksz,
N                                           void *stk, void *argv)      __SVC_0;
X                                           void *stk, void *argv)      __svc_indirect(0);
Nextern OS_TID    _os_tsk_self (U32 p)                                  __SVC_0;
Xextern OS_TID    _os_tsk_self (U32 p)                                  __svc_indirect(0);
Nextern void      _os_tsk_pass (U32 p)                                  __SVC_0;
Xextern void      _os_tsk_pass (U32 p)                                  __svc_indirect(0);
Nextern OS_RESULT _os_tsk_prio (U32 p, OS_TID task_id, U8 new_prio)     __SVC_0;
Xextern OS_RESULT _os_tsk_prio (U32 p, OS_TID task_id, U8 new_prio)     __svc_indirect(0);
Nextern OS_RESULT _os_tsk_delete (U32 p, OS_TID task_id)                __SVC_0;
Xextern OS_RESULT _os_tsk_delete (U32 p, OS_TID task_id)                __svc_indirect(0);
N
N/* Event flag Management */
Nextern OS_RESULT rt_evt_wait (U16 wait_flags,  U16 timeout, BOOL and_wait);
Nextern void      rt_evt_set  (U16 event_flags, OS_TID task_id);
Nextern void      rt_evt_clr  (U16 clear_flags, OS_TID task_id);
Nextern U16       rt_evt_get  (void);
N
N#define os_evt_wait_or(wflags,tmo)    _os_evt_wait((U32)rt_evt_wait,wflags,tmo,__FALSE)
N#define os_evt_wait_and(wflags,tmo)   _os_evt_wait((U32)rt_evt_wait,wflags,tmo,__TRUE)
N#define os_evt_set(evt_flags,task_id) _os_evt_set((U32)rt_evt_set,evt_flags,task_id)
N#define os_evt_clr(clr_flags,task_id) _os_evt_clr((U32)rt_evt_clr,clr_flags,task_id)
N#define os_evt_get()                  _os_evt_get((U32)rt_evt_get)
N
Nextern OS_RESULT _os_evt_wait(U32 p, U16 wait_flags, U16 timeout,
N                                     BOOL and_wait)                    __SVC_0;
X                                     BOOL and_wait)                    __svc_indirect(0);
Nextern void      _os_evt_set (U32 p, U16 event_flags, OS_TID task_id)  __SVC_0;
Xextern void      _os_evt_set (U32 p, U16 event_flags, OS_TID task_id)  __svc_indirect(0);
Nextern void      _os_evt_clr (U32 p, U16 clear_flags, OS_TID task_id)  __SVC_0;
Xextern void      _os_evt_clr (U32 p, U16 clear_flags, OS_TID task_id)  __svc_indirect(0);
Nextern U16       _os_evt_get (U32 p)                                   __SVC_0;
Xextern U16       _os_evt_get (U32 p)                                   __svc_indirect(0);
Nextern void      isr_evt_set (U16 event_flags, OS_TID task_id);
N
N/* Semaphore Management */
Nextern void      rt_sem_init (OS_ID semaphore, U16 token_count);
Nextern OS_RESULT rt_sem_send (OS_ID semaphore);
Nextern OS_RESULT rt_sem_wait (OS_ID semaphore, U16 timeout);
N
N#define os_sem_init(sem,t_count)     _os_sem_init((U32)rt_sem_init,sem,t_count)
N#define os_sem_send(sem)             _os_sem_send((U32)rt_sem_send,sem)
N#define os_sem_wait(sem,tmo)         _os_sem_wait((U32)rt_sem_wait,sem,tmo)
N
Nextern void      _os_sem_init (U32 p, OS_ID semaphore, 
N                                      U16 token_count)                 __SVC_0;
X                                      U16 token_count)                 __svc_indirect(0);
Nextern OS_RESULT _os_sem_send (U32 p, OS_ID semaphore)                 __SVC_0;
Xextern OS_RESULT _os_sem_send (U32 p, OS_ID semaphore)                 __svc_indirect(0);
Nextern OS_RESULT _os_sem_wait (U32 p, OS_ID semaphore, U16 timeout)    __SVC_0;
Xextern OS_RESULT _os_sem_wait (U32 p, OS_ID semaphore, U16 timeout)    __svc_indirect(0);
Nextern void      isr_sem_send (OS_ID semaphore);
N
N/* Mailbox Management */
Nextern void      rt_mbx_init  (OS_ID mailbox, U16 mbx_size);
Nextern OS_RESULT rt_mbx_send  (OS_ID mailbox, void *p_msg,    U16 timeout);
Nextern OS_RESULT rt_mbx_wait  (OS_ID mailbox, void **message, U16 timeout);
Nextern OS_RESULT rt_mbx_check (OS_ID mailbox);
N
N#define os_mbx_init(mbx,mbx_size)     _os_mbx_init((U32)rt_mbx_init,mbx,mbx_size)
N#define os_mbx_send(mbx,p_msg,tmo)    _os_mbx_send((U32)rt_mbx_send,mbx,p_msg,tmo)
N#define os_mbx_wait(mbx,message,tmo)  _os_mbx_wait((U32)rt_mbx_wait,mbx,message,tmo)
N#define os_mbx_check(mbx)             _os_mbx_check((U32)rt_mbx_check,mbx)
N#define isr_mbx_check(mbx)            rt_mbx_check(mbx)
N
Nextern void      _os_mbx_init (U32 p, OS_ID mailbox, U16 mbx_size)     __SVC_0;
Xextern void      _os_mbx_init (U32 p, OS_ID mailbox, U16 mbx_size)     __svc_indirect(0);
Nextern OS_RESULT _os_mbx_send (U32 p, OS_ID mailbox, void *message_ptr,
N                                      U16 timeout)                     __SVC_0;
X                                      U16 timeout)                     __svc_indirect(0);
Nextern OS_RESULT _os_mbx_wait (U32 p, OS_ID mailbox, void  **message,
N                                      U16 timeout)                     __SVC_0;
X                                      U16 timeout)                     __svc_indirect(0);
Nextern OS_RESULT _os_mbx_check (U32 p, OS_ID mailbox)                  __SVC_0;
Xextern OS_RESULT _os_mbx_check (U32 p, OS_ID mailbox)                  __svc_indirect(0);
Nextern void      isr_mbx_send (OS_ID mailbox, void *message_ptr);
Nextern OS_RESULT isr_mbx_receive (OS_ID mailbox, void **message);
N
N/* Mutex Management */
Nextern void      rt_mut_init    (OS_ID mutex);
Nextern OS_RESULT rt_mut_release (OS_ID mutex);
Nextern OS_RESULT rt_mut_wait    (OS_ID mutex, U16 timeout);
N
N#define os_mut_init(mutex)         _os_mut_init((U32)rt_mut_init,mutex)
N#define os_mut_release(mutex)      _os_mut_release((U32)rt_mut_release,mutex)
N#define os_mut_wait(mutex,timeout) _os_mut_wait((U32)rt_mut_wait,mutex,timeout)
N
Nextern void      _os_mut_init (U32 p, OS_ID mutex)                     __SVC_0;
Xextern void      _os_mut_init (U32 p, OS_ID mutex)                     __svc_indirect(0);
Nextern OS_RESULT _os_mut_release (U32 p, OS_ID mutex)                  __SVC_0;
Xextern OS_RESULT _os_mut_release (U32 p, OS_ID mutex)                  __svc_indirect(0);
Nextern OS_RESULT _os_mut_wait (U32 p, OS_ID mutex, U16 timeout)        __SVC_0;
Xextern OS_RESULT _os_mut_wait (U32 p, OS_ID mutex, U16 timeout)        __svc_indirect(0);
N
N/* Time Management */
Nextern void      rt_dly_wait (U16 delay_time);
Nextern void      rt_itv_set  (U16 interval_time);
Nextern void      rt_itv_wait (void);
N
N#define os_dly_wait(delay_time)    _os_dly_wait((U32)rt_dly_wait,delay_time)
N#define os_itv_set(interval_time)  _os_itv_set((U32)rt_itv_set,interval_time)
N#define os_itv_wait()              _os_itv_wait((U32)rt_itv_wait)
N
Nextern void      _os_dly_wait (U32 p, U16 delay_time)                  __SVC_0;
Xextern void      _os_dly_wait (U32 p, U16 delay_time)                  __svc_indirect(0);
Nextern void      _os_itv_set (U32 p, U16 interval_time)                __SVC_0;
Xextern void      _os_itv_set (U32 p, U16 interval_time)                __svc_indirect(0);
Nextern void      _os_itv_wait (U32 p)                                  __SVC_0;
Xextern void      _os_itv_wait (U32 p)                                  __svc_indirect(0);
N
N/* User Timer Management */
Nextern OS_ID     rt_tmr_create (U16 tcnt, U16 info);
Nextern OS_ID     rt_tmr_kill   (OS_ID timer);
N
N#define os_tmr_create(tcnt,info)   _os_tmr_create((U32)rt_tmr_create,tcnt,info)
N#define os_tmr_kill(timer)         _os_tmr_kill((U32)rt_tmr_kill,timer)
N
Nextern OS_ID     _os_tmr_create (U32 p, U16 tcnt, U16 info)            __SVC_0;
Xextern OS_ID     _os_tmr_create (U32 p, U16 tcnt, U16 info)            __svc_indirect(0);
Nextern OS_ID     _os_tmr_kill (U32 p, OS_ID timer)                     __SVC_0;
Xextern OS_ID     _os_tmr_kill (U32 p, OS_ID timer)                     __svc_indirect(0);
N
N/* System Functions */
Nextern void      rt_tsk_lock   (void);
Nextern void      rt_tsk_unlock (void);
N
N#define tsk_lock()                 _os_tsk_lock((U32)rt_tsk_lock)
N#define tsk_unlock()               _os_tsk_unlock((U32)rt_tsk_unlock)
N
Nextern void      _os_tsk_lock (U32 p)                                  __SVC_0;
Xextern void      _os_tsk_lock (U32 p)                                  __svc_indirect(0);
Nextern void      _os_tsk_unlock (U32 p)                                __SVC_0;
Xextern void      _os_tsk_unlock (U32 p)                                __svc_indirect(0);
N
N/* Fixed Memory Block Management Functions */
Nextern int       _init_box (void *box_mem, U32 box_size, U32 blk_size);
Nextern void     *_alloc_box (void *box_mem);
Nextern void     *_calloc_box (void *box_mem);
Nextern int       _free_box (void *box_mem, void *box);
N
N#endif
N
N#define BOX_ALIGN_8     0x80000000
N#define _declare_box(pool,size,cnt)   U32 pool[(((size)+3)/4)*(cnt) + 3]
N#define _declare_box8(pool,size,cnt)  U64 pool[(((size)+7)/8)*(cnt) + 2]
N#define _init_box8(pool,size,bsize)   _init_box (pool,size,bsize | BOX_ALIGN_8)
N
N/* For compatibility with older configurations.*/
N#define os_stk_overflow         os_error
N
N/*----------------------------------------------------------------------------
N *                        Flash File System API
N *---------------------------------------------------------------------------*/
N
Ntypedef struct {                        /* RL Time format (FFS, TCPnet)      */
N  U8  hr;                               /* Hours    [0..23]                  */
N  U8  min;                              /* Minutes  [0..59]                  */
N  U8  sec;                              /* Seconds  [0..59]                  */
N  U8  day;                              /* Day      [1..31]                  */
N  U8  mon;                              /* Month    [1..12]                  */
N  U16 year;                             /* Year     [1980..2107]             */
N} RL_TIME;
N
Ntypedef struct {                        /* Search info record                */
N  S8  name[256];                        /* Name                              */
N  U32 size;                             /* File size in bytes                */
N  U16 fileID;                           /* System Identification             */
N  U8  attrib;                           /* Attributes                        */
N  RL_TIME time;                         /* Create/Modify Time                */
N} FINFO;
N
Nextern int finit (void);
Nextern int fdelete (const char *filename);
Nextern int frename (const char *oldname, const char *newname);
Nextern int ffind (const char *pattern, FINFO *info);
Nextern U64 ffree (const char *drive);
Nextern int fformat (const char *drive);
Nextern int fanalyse (const char *drive);
Nextern int fcheck (const char *drive);
Nextern int fdefrag (const char *drive);
N
N/* The following macros provide for common functions */
N#define unlink(fn)      fdelete(fn);
N
N/*----------------------------------------------------------------------------
N *                             TCPnet API
N *---------------------------------------------------------------------------*/
N
N/* UDP Options */
N#define UDP_OPT_SEND_CS    0x01   /* Calculate Checksum for UDP send frames  */
N#define UDP_OPT_CHK_CS     0x02   /* Verify Checksum for received UDP frames */
N
N/* TCP Socket Types */
N#define TCP_TYPE_SERVER    0x01   /* Socket Type Server (open for listening) */
N#define TCP_TYPE_CLIENT    0x02   /* Socket Type Client (initiate connect)   */
N#define TCP_TYPE_DELAY_ACK 0x04   /* Socket Type Delayed Acknowledge         */
N#define TCP_TYPE_FLOW_CTRL 0x08   /* Socket Type Flow Control                */
N#define TCP_TYPE_CLIENT_SERVER (TCP_TYPE_SERVER | TCP_TYPE_CLIENT)
N
N/* TCP Callback Events */
N#define TCP_EVT_CONREQ     0      /* Connect request received event          */
N#define TCP_EVT_CONNECT    1      /* Connection established event            */
N#define TCP_EVT_CLOSE      2      /* Connection was properly closed          */
N#define TCP_EVT_ABORT      3      /* Connection is for some reason aborted   */
N#define TCP_EVT_ACK        4      /* Previously send data acknowledged       */
N#define TCP_EVT_DATA       5      /* Data received event                     */
N
N/* TCP States */
N#define TCP_STATE_FREE     0      /* Entry is free and unused                */
N#define TCP_STATE_CLOSED   1      /* Entry allocated, socket still closed    */
N#define TCP_STATE_LISTEN   2      /* Socket waiting for incoming connection  */
N#define TCP_STATE_SYN_REC  3      /* SYN frame received                      */
N#define TCP_STATE_SYN_SENT 4      /* SYN packet sent to establish a connect. */
N#define TCP_STATE_FINW1    5      /* Tcp_close started FIN packet was sent   */
N#define TCP_STATE_FINW2    6      /* Our FIN ack-ed, waiting for remote FIN  */
N#define TCP_STATE_CLOSING  7      /* Received FIN independently of our FIN   */
N#define TCP_STATE_LAST_ACK 8      /* Waiting for last ACK for our FIN        */
N#define TCP_STATE_TWAIT    9      /* Timed waiting for 2MSL                  */
N#define TCP_STATE_CONNECT  10     /* TCP Connection established              */
N
N/* DNS Callback Events */
N#define DNS_EVT_SUCCESS    0      /* Host name successfully resolved         */
N#define DNS_EVT_NONAME     1      /* DNS Error, no such name                 */
N#define DNS_EVT_TIMEOUT    2      /* Timeout resolving host                  */
N#define DNS_EVT_ERROR      3      /* Erroneous response packet               */
N
N/* DNS 'get_host_by_name()' result codes */
N#define DNS_RES_OK         0      /* Function finished OK                    */
N#define DNS_ERROR_BUSY     1      /* DNS Client busy, can't process request  */
N#define DNS_ERROR_LABEL    2      /* Host name Label too long                */
N#define DNS_ERROR_NAME     3      /* Host name loo long                      */
N#define DNS_ERROR_NOSRV    4      /* Prim. DNS server not specified (0.0.0.0)*/
N#define DNS_ERROR_UDPSEND  5      /* UDP Send frame error                    */
N
N/* SMTP Callback Events */
N#define SMTP_EVT_SUCCESS   0      /* Email successfully sent                 */
N#define SMTP_EVT_TIMEOUT   1      /* Timeout sending email                   */
N#define SMTP_EVT_ERROR     2      /* Error when sending email                */
N
N/* ARP Cache Entry types */
N#define ARP_FIXED_IP       0      /* Fixed IP adrs is refreshed after tout   */
N#define ARP_TEMP_IP        1      /* Temp adrs is removed after timeout      */
N
Nextern void init_TcpNet (void);
Nextern void main_TcpNet (void);
Nextern void timer_tick (void);
Nextern U8   udp_get_socket (U8 tos, U8 opt, 
N                            U16 (*listener)(U8 socket, U8 *remip, U16 port, U8 *buf, U16 len));
Nextern BOOL udp_release_socket (U8 socket);
Nextern BOOL udp_open (U8 socket, U16 locport);
Nextern BOOL udp_close (U8 socket);
Nextern BOOL udp_mcast_ttl (U8 socket, U8 ttl);
Nextern U8  *udp_get_buf (U16 size);
Nextern BOOL udp_send (U8 socket, U8 *remip, U16 remport, U8 *buf, U16 dlen);
Nextern U8   tcp_get_socket (U8 type, U8 tos, U16 tout,
N                            U16 (*listener)(U8 socket, U8 event, U8 *buf, U16 len));
Nextern BOOL tcp_release_socket (U8 socket);
Nextern BOOL tcp_listen (U8 socket, U16 locport);
Nextern BOOL tcp_connect (U8 socket, U8 *remip, U16 remport, U16 locport);
Nextern U8  *tcp_get_buf (U16 size);
Nextern U16  tcp_max_dsize (U8 socket);
Nextern BOOL tcp_check_send (U8 socket);
Nextern U8   tcp_get_state (U8 socket);
Nextern BOOL tcp_send (U8 socket, U8 *buf, U16 dlen);
Nextern BOOL tcp_close (U8 socket);
Nextern BOOL tcp_abort (U8 socket);
Nextern void tcp_reset_window (U8 socket);
Nextern BOOL arp_cache_ip (U8 *ipadr, U8 type);
Nextern void ppp_listen (char const *user, char const *passw);
Nextern void ppp_connect (char const *dialnum, char const *user, char const *passw);
Nextern void ppp_close (void);
Nextern BOOL ppp_is_up (void);
Nextern void slip_listen (void);
Nextern void slip_connect (char const *dialnum);
Nextern void slip_close (void);
Nextern BOOL slip_is_up (void);
Nextern U8   get_host_by_name (U8 *hostn, void (*cbfunc)(U8 event, U8 *host_ip));
Nextern BOOL smtp_connect (U8 *ipadr, U16 port, void (*cbfunc)(U8 event));
Nextern void dhcp_disable (void);
Nextern BOOL igmp_join (U8 *group_ip);
Nextern BOOL igmp_leave (U8 *group_ip);
Nextern BOOL snmp_trap (U8 *manager_ip, U8 gen_trap, U8 spec_trap, U16 *obj_list);
Nextern BOOL snmp_set_community (const char *community);
N#ifdef __cplusplus               // EC++
S}
N#endif
N
N/*----------------------------------------------------------------------------
N * end of file
N *---------------------------------------------------------------------------*/
N  
N#endif
N 
L 20 "main.c" 2
N#include "type.h"
L 1 "type.h" 1
N/*****************************************************************************
N *   type.h:  Type definition Header file for NXP LPC17xx Family 
N *   Microprocessors
N *
N *   Copyright(C) 2009, NXP Semiconductor
N *   All rights reserved.
N *
N *   History
N *   2009.05.25  ver 1.00    Prelimnary version, first Release
N *
N******************************************************************************/
N#include <stdint.h>
L 1 "C:\Keil\ARM\RV31\INC\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 137748 $
N * Checkin $Date: 2008-09-11 17:34:24 +0100 (Thu, 11 Sep 2008) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N * '__int64' is used instead of 'long long' so that this header
N * can be used in --strict mode.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed       __int64 intmax_t;
Ntypedef unsigned       __int64 uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __ESCAPE__(~0x7fffffffffffffffll) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#define INTPTR_MIN (~0x7fffffff)
N
N    /* maximum value of pointer-holding signed integer type */
N#define INTPTR_MAX   2147483647
N
N    /* maximum value of pointer-holding unsigned integer type */
N#define UINTPTR_MAX  4294967295u
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#define PTRDIFF_MIN (~0x7fffffff)
N#define PTRDIFF_MAX   2147483647
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#define SIZE_MAX 4294967295u
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32)
X#if 0L
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __ESCAPE__(x ## ll)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __ESCAPE__(x ## ull)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif 
N  #endif /* __cplusplus */
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
N
N
L 13 "type.h" 2
N
N#ifndef __TYPE_H__
N#define __TYPE_H__
N
N#ifndef NULL
S#define NULL    ((void *)0)
N#endif
N
N#ifndef FALSE
N#define FALSE   (0)
N#endif
N
N#ifndef TRUE
N#define TRUE    (1)
N#endif
N
N
Ntypedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus;
Ntypedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;
N
N#endif  /* __TYPE_H__ */
L 21 "main.c" 2
N#include "main.h"
L 1 "main.h" 1
N#include <rtl.h>
N
N#ifdef UKU_TELECORE2016
S#define UKU_TELECORE2015
S#define UKU2071x
N#endif
N
N#ifdef UKU2071x
N#define MCP2515_CAN
N#define SC16IS740_UART
N//#define can1_out mcp2515_transmit
N#endif
N
N#define SOFT_NUM	1051
N#define SOFT_DATE	21112UL
N
N#define _ACDC_
N
N//#define _IPS_	100
N
N#define NUM_OF_SET_TABL	2
N#define DEEP_OF_SET_TABL 19
N
N#define CONTROL_BYTE_FOR_XPORT 0
N
N#define MINIM_INV_ADRESS	20
N//-минималный адрес инвертора в кановской сети, не может быть меньше 16
N#define MAX_NET_ADRESS		31
N//-максимальный адрес устройства в кановской сети ИБЭПа
N
N#define BIN__N(x) (x) | x>>3 | x>>6 | x>>9
N#define BIN__B(x) (x) & 0xf | (x)>>12 & 0xf0
N#define BIN8(v) (BIN__B(BIN__N(0x##v)))
N
N#ifndef UKU_KONTUR
N#define OID_ENTERPRISE 	OID0(1,3), 6, 1, 4, 1, 130, 131, 31
N#endif
N#ifdef UKU_KONTUR
S#define OID_ENTERPRISE 	OID0(1,3), 6, 1, 4, 1, 130, 167, 60
N#endif
N
N#ifndef UKU_KONTUR
N
N#define OID_DEVICE 		14
N
N#define DISPLAY_DEVICE_INFO			1
N#define DISPLAY_DEVICE_INFO_CODE			1
N#define DISPLAY_DEVICE_INFO_SERIAL			2
N#define DISPLAY_DEVICE_INFO_LOCATION 		3
N#define DISPLAY_DEVICE_INFO_NUMOFBAT 		4
N#define DISPLAY_DEVICE_INFO_NUMOFBPS 		5
N#define DISPLAY_DEVICE_INFO_NUMOFINV 		6
N#define DISPLAY_DEVICE_INFO_NUMOFAVT 		7
N#define DISPLAY_DEVICE_INFO_NUMOFDT 		8
N#define DISPLAY_DEVICE_INFO_NUMOFSK 		9
N#define DISPLAY_DEVICE_INFO_NUMOFEVENTS		10
N#define DISPLAY_DEVICE_INFO_MODEL_NAME		11
N
N#define DISPLAY_MAINS_POWER			2
N#define DISPLAY_MAINS_POWER_VOLTAGE		1
N#define DISPLAY_MAINS_POWER_FREQUENCY		2
N#define DISPLAY_MAINS_POWER_STATUS			3
N#define DISPLAY_MAINS_POWER_ALARM			4
N#define DISPLAY_MAINS_POWER_VOLTAGE_PHASEA	5
N#define DISPLAY_MAINS_POWER_VOLTAGE_PHASEB	6
N#define DISPLAY_MAINS_POWER_VOLTAGE_PHASEC	7
N
N
N#define DISPLAY_LOAD				3
N#define DISPLAY_LOAD_VOLTAGE				1
N#define DISPLAY_LOAD_CURRENT				2
N
N#define DISPLAY_PSU					4
N#define DISPLAY_PSU_ENTRY_NUMBER			1,1
N#define DISPLAY_PSU_ENTRY_VOLTAGE 			1,2
N#define DISPLAY_PSU_ENTRY_CURRENT			1,3
N#define DISPLAY_PSU_ENTRY_TEMPERATURE		1,4
N#define DISPLAY_PSU_ENTRY_STATUS			1,5
N#define DISPLAY_PSU_ENTRY_VENTRESURS		1,6
N
N#define DISPLAY_BAT					5
N#define DISPLAY_BAT_NUMBER				1,1
N#define DISPLAY_BAT_VOLTAGE				1,2
N#define DISPLAY_BAT_CURRENT				1,3
N#define DISPLAY_BAT_TEMPERATURE			1,4
N#define DISPLAY_BAT_CAPACITY				1,5
N#define DISPLAY_BAT_CHARGE				1,6
N#define DISPLAY_BAT_STATUS				1,7
N
N#define DISPLAY_SPEC				6
N#define DISPLAY_SPEC_STAT				1
N#define DISPLAY_SPEC_COMMAND				2
N
N#define DISPLAY_SPEC_TRAP_MESSAGE			5
N#define DISPLAY_SPEC_TRAP_VALUE_0			6
N#define DISPLAY_SPEC_TRAP_VALUE_1			7
N#define DISPLAY_SPEC_TRAP_VALUE_2			8
N
N
N#define DISPLAY_INV					14
N#define DISPLAY_INV_ENTRY_NUMBER			1,1
N#define DISPLAY_INV_ENTRY_VOLTAGE 			1,2
N#define DISPLAY_INV_ENTRY_CURRENT			1,3
N#define DISPLAY_INV_ENTRY_TEMPERATURE		1,4
N#define DISPLAY_INV_ENTRY_STATUS			1,5
N
N#define LCD_SIZE 200
N
N#define SNMP_COMMAND				8
N#define COMMAND_ANSWER					1
N#define COMMAND_PARAMETR					2
N
N#define SYSPARAMS					10
N#define SYSPARAMSSOUNDALARMEN				1
N#define SYSPARAMSALARMAUTODISABLE			2
N#define SYSPARAMS_BAT_TEST_TIME			3
N#define SYSPARAMS_U_MAX					4
N#define SYSPARAMS_U_MIN					5
N#define SYSPARAMS_U_0_GRAD				6
N#define SYSPARAMS_U_20_GRAD				7 
N#define SYSPARAMS_U_SIGN					8
N#define SYSPARAMS_U_MIN_POWER				9
N#define SYSPARAMS_U_WITHOUT_BAT			10
N#define SYSPARAMS_IBK					11
N#define SYSPARAMS_IZMAX					12
N#define SYSPARAMS_IMAX					13
N#define SYSPARAMS_IMIN					14
N#define SYSPARAMS_UVZ					15
N#define SYSPARAMS_TZAS					16
N#define SYSPARAMS_TSIGN_BAT				17
N#define SYSPARAMS_TMAX_BAT				18
N#define SYSPARAMS_TSIGN_BPS				19
N#define SYSPARAMS_TMAX_BPS				20	
N#define SYSPARAMS_BAT_PART_ALARM			21
N#define SYSPARAMS_POWER_CNT_ADRESS			22	
N
N#define DISPLAY_AVT					11
N#define DISPLAY_AVT_ENTRY_NUMBER			1,1
N#define DISPLAY_AVT_ENTRY_STAT 			1,2
N
N#define DISPLAY_ENERGY				12
N#define DISPLAY_ENERGY_VVOD_PHASE_A		1
N#define DISPLAY_ENERGY_VVOD_PHASE_B		2
N#define DISPLAY_ENERGY_VVOD_PHASE_C		3
N#define DISPLAY_ENERGY_PES_PHASE_A			4
N#define DISPLAY_ENERGY_PES_PHASE_B			5
N#define DISPLAY_ENERGY_PES_PHASE_C			6
N#define DISPLAY_ENERGY_TOTAL_ENERGY			7
N#define DISPLAY_ENERGY_CURRENT_ENERGY		8
N#define DISPLAY_ENERGY_INPUT_VOLTAGE		9
N
N
N#define DISPLAY_SK					15
N#define DISPLAY_SK_ENTRY_NUMBER			1,1
N#define DISPLAY_SK_AKTIVITY	 			1,2
N#define DISPLAY_SK_ALARM_AKTIVITY 			1,3
N#define DISPLAY_SK_ALARM 	 			1,4
N
N#define DISPLAY_DT					17
N#define DISPLAY_DT_ENTRY_NUMBER			1,1
N#define DISPLAY_DT_TEMPER	 			1,2
N#define DISPLAY_DT_ERROR 				1,3
N
N#define DISPLAY_MAKB				16
N#define DISPLAY_MAKB_ENTRY_NUMBER			1,1
N#define DISPLAY_MAKB_CONNECT_STATUS		1,2
N#define DISPLAY_MAKB_VOLTAGE0				1,3
N#define DISPLAY_MAKB_VOLTAGE1				1,4
N#define DISPLAY_MAKB_VOLTAGE2				1,5
N#define DISPLAY_MAKB_VOLTAGE3				1,6
N#define DISPLAY_MAKB_VOLTAGE4				1,7
N#define DISPLAY_MAKB_TEMPER0				1,8
N#define DISPLAY_MAKB_TEMPER1				1,9
N#define DISPLAY_MAKB_TEMPER2				1,10
N#define DISPLAY_MAKB_TEMPER3				1,11
N#define DISPLAY_MAKB_TEMPER4				1,12
N#define DISPLAY_MAKB_TEMPER0_STAT			1,13
N#define DISPLAY_MAKB_TEMPER1_STAT			1,14
N#define DISPLAY_MAKB_TEMPER2_STAT			1,15
N#define DISPLAY_MAKB_TEMPER3_STAT			1,16
N#define DISPLAY_MAKB_TEMPER4_STAT			1,17
N
N#define DISPLAY_LAKB				18
N#define DISPLAY_LAKB_ENTRY_NUMBER			1,1
N#define DISPLAY_LAKB_MAX_CELL_VOLTAGE		1,2
N#define DISPLAY_LAKB_MIN_CELL_VOLTAGE		1,3
N#define DISPLAY_LAKB_MAX_CELL_TEMPERATURE	1,4
N#define DISPLAY_LAKB_MIN_CELL_TEMPERATURE	1,5
N#define DISPLAY_LAKB_VOLTAGE				1,6
N#define DISPLAY_LAKB_CH_CURR				1,7
N#define DISPLAY_LAKB_DSCH_CURR				1,8
N#define DISPLAY_LAKB_RAT_CAP				1,9
N#define DISPLAY_LAKB_SOH					1,10
N#define DISPLAY_LAKB_SOC					1,11	
N#define DISPLAY_LAKB_CCLV					1,12
N#define DISPLAY_LAKB_RBT					1,13
N#define DISPLAY_LAKB_FLAGS1					1,14
N#define DISPLAY_LAKB_FLAGS2					1,15
N#define DISPLAY_LAKB_CELL_TEMPERATURE_1		1,16
N#define DISPLAY_LAKB_CELL_TEMPERATURE_2		1,17
N#define DISPLAY_LAKB_CELL_TEMPERATURE_3		1,18
N#define DISPLAY_LAKB_CELL_TEMPERATURE_4		1,19
N#define DISPLAY_LAKB_CELL_TEMPERATURE_AMBIENT	1,20
N#define DISPLAY_LAKB_CELL_TEMPERATURE_POWER		1,21
N#define DISPLAY_LAKB_CHARGE_AND_DISCHARGE_CURRENT_ALARM_STATUS		1,22
N#define DISPLAY_LAKB_BATTERY_TOTAL_VOLTAGE_ALARM_STATUS				1,23
N#define DISPLAY_LAKB_CUSTOM_ALARM_QUANTITY							1,24
N#define DISPLAY_LAKB_BALANCED_EVENT_CODE							1,25
N#define DISPLAY_LAKB_VOLTAGE_EVENT_CODE								1,26
N#define DISPLAY_LAKB_TEMPERATURE_EVENT_CODE							1,27
N#define DISPLAY_LAKB_CURRENT_EVENT_CODE								1,28
N#define DISPLAY_LAKB_FET_STATUS_CODE								1,29
N#define DISPLAY_LAKB_BALANCED_STATUS_CODE							1,30
N#define DISPLAY_LAKB_SYSTEM_STATUS_CODE								1,31
N#define DISPLAY_LAKB_DAMP1				1,32
N#define DISPLAY_LAKB_DAMP2				1,33
N#define DISPLAY_LAKB_DAMP3				1,34
N#define DISPLAY_LAKB_DAMP4				1,35
N#define DISPLAY_LAKB_DAMP5				1,36
N
N#define DISPLAY_KLIMAT				20
N#define DISPLAY_KLIMAT_WARM_SIGNAL		1
N#define DISPLAY_KLIMAT_COOL_SIGNAL		2
N#define DISPLAY_KLIMAT_WARM_ON_TEMPER	3
N#define DISPLAY_KLIMAT_WARM_OFF_TEMPER	4
N#define DISPLAY_KLIMAT_WARM_Q			5
N#define DISPLAY_KLIMAT_COOL_100_TEMPER	6
N#define DISPLAY_KLIMAT_COOL_80_TEMPER	7
N#define DISPLAY_KLIMAT_COOL_60_TEMPER	8
N#define DISPLAY_KLIMAT_COOL_40_TEMPER	9
N#define DISPLAY_KLIMAT_COOL_20_TEMPER	10
N#define DISPLAY_KLIMAT_COOL_100_DTEMPER	11
N#define DISPLAY_KLIMAT_COOL_80_DTEMPER	12
N#define DISPLAY_KLIMAT_COOL_60_DTEMPER	13
N#define DISPLAY_KLIMAT_COOL_40_DTEMPER	14
N#define DISPLAY_KLIMAT_COOL_20_DTEMPER	15
N#define DISPLAY_KLIMAT_WARM_STAT		16
N#define DISPLAY_KLIMAT_INT_VENT_PWM_STAT	17
N#define DISPLAY_KLIMAT_EXT_VENT_PWM_STAT	18	
N
N
N#define COMMAND_OK		0x5555
N#define COMAND_FAIL		0xaaaa
N#define COMMAND_INVALID	0xeeee
N#define WRONG_PARAMETER	0xeeef
N
N#define SNMP_BPS_DISABLE		5
N#define SNMP_BPS_UNDISABLE	8
N#define SNMP_SPEC_VZ		3
N#define SNMP_SPEC_KE		4
N#define SNMP_SPEC_DISABLE	7
N
N
N#define DISPLAY_LOG					9
N#define DISPLAY_LOG_ENTRY_EVENTS 			1,1
N//#define DISPLAY_LOG_ENTRY_EVENTS 			1,1
N
N#endif
N
N
N
N
N#ifdef UKU_KONTUR
S
S#define OID_DEVICE 		1,2
S
S#define DISPLAY_DEVICE_INFO			1
S#define DISPLAY_DEVICE_INFO_CODE			1
S#define DISPLAY_DEVICE_INFO_SERIAL			2
S#define DISPLAY_DEVICE_INFO_LOCATION 		3
S#define DISPLAY_DEVICE_INFO_NUMOFBAT 		4
S#define DISPLAY_DEVICE_INFO_NUMOFBPS 		5
S#define DISPLAY_DEVICE_INFO_NUMOFINV 		6
S#define DISPLAY_DEVICE_INFO_NUMOFAVT 		7
S#define DISPLAY_DEVICE_INFO_NUMOFDT 		8
S#define DISPLAY_DEVICE_INFO_NUMOFSK 		9
S#define DISPLAY_DEVICE_INFO_NUMOFEVENTS		10
S
S#define DISPLAY_MAINS_POWER			1
S#define DISPLAY_MAINS_POWER_VOLTAGE		1
S#define DISPLAY_MAINS_POWER_FREQUENCY		2
S#define DISPLAY_MAINS_POWER_STATUS			3
S#define DISPLAY_MAINS_POWER_ALARM			4
S#define DISPLAY_MAINS_POWER_VOLTAGE_PHASEA	5
S#define DISPLAY_MAINS_POWER_VOLTAGE_PHASEB	6
S#define DISPLAY_MAINS_POWER_VOLTAGE_PHASEC	7
S
S
S#define DISPLAY_LOAD				3
S#define DISPLAY_LOAD_VOLTAGE				1
S#define DISPLAY_LOAD_CURRENT				2
S
S#define DISPLAY_PSU					4
S#define DISPLAY_PSU_ENTRY_NUMBER			1,1
S#define DISPLAY_PSU_ENTRY_VOLTAGE 			1,2
S#define DISPLAY_PSU_ENTRY_CURRENT			1,3
S#define DISPLAY_PSU_ENTRY_TEMPERATURE		1,4
S#define DISPLAY_PSU_ENTRY_STATUS			1,5
S
S#define DISPLAY_BAT					5
S#define DISPLAY_BAT_NUMBER				1,1
S#define DISPLAY_BAT_VOLTAGE				1,2
S#define DISPLAY_BAT_PART_VOLTAGE			1,3
S#define DISPLAY_BAT_CURRENT				1,4
S#define DISPLAY_BAT_TEMPERATURE			1,5
S#define DISPLAY_BAT_CAPACITY				1,6
S#define DISPLAY_BAT_CHARGE				1,7
S#define DISPLAY_BAT_STATUS				1,8
S
S#define DISPLAY_SPEC				6
S#define DISPLAY_SPEC_STAT				1
S#define DISPLAY_SPEC_COMMAND				2
S
S#define DISPLAY_SPEC_TRAP_MESSAGE			5
S#define DISPLAY_SPEC_TRAP_VALUE_0			6
S#define DISPLAY_SPEC_TRAP_VALUE_1			7
S#define DISPLAY_SPEC_TRAP_VALUE_2			8
S
S
S
S
S#define LCD_SIZE 200
S
S#define SNMP_COMMAND				8
S#define COMMAND_ANSWER					1
S#define COMMAND_PARAMETR					2
S
S#define SYSPARAMS					10
S#define SYSPARAMSSOUNDALARMEN				1
S#define SYSPARAMSALARMAUTODISABLE			2
S#define SYSPARAMS_BAT_TEST_TIME			3
S#define SYSPARAMS_U_MAX					4
S#define SYSPARAMS_U_MIN					5
S#define SYSPARAMS_U_0_GRAD				6
S#define SYSPARAMS_U_20_GRAD				7 
S#define SYSPARAMS_U_SIGN					8
S#define SYSPARAMS_U_MIN_POWER				9
S#define SYSPARAMS_U_WITHOUT_BAT			10
S#define SYSPARAMS_IBK					11
S#define SYSPARAMS_IZMAX					12
S#define SYSPARAMS_IMAX					13
S#define SYSPARAMS_IMIN					14
S#define SYSPARAMS_UVZ					15
S#define SYSPARAMS_TZAS					16
S#define SYSPARAMS_TSIGN_BAT				17
S#define SYSPARAMS_TMAX_BAT				18
S#define SYSPARAMS_TSIGN_BPS				19
S#define SYSPARAMS_TMAX_BPS				20	
S#define SYSPARAMS_BAT_PART_ALARM			21
S#define SYSPARAMS_POWER_CNT_ADRESS			22
S
S
S#define DISPLAY_AVT					11
S#define DISPLAY_AVT_ENTRY_NUMBER			1,1
S#define DISPLAY_AVT_ENTRY_STAT 			1,2
S
S#define DISPLAY_ENERGY				12
S#define DISPLAY_ENERGY_VVOD_PHASE_A		1
S#define DISPLAY_ENERGY_VVOD_PHASE_B		2
S#define DISPLAY_ENERGY_VVOD_PHASE_C		3
S#define DISPLAY_ENERGY_PES_PHASE_A			4
S#define DISPLAY_ENERGY_PES_PHASE_B			5
S#define DISPLAY_ENERGY_PES_PHASE_C			6
S#define DISPLAY_ENERGY_TOTAL_ENERGY		7
S#define DISPLAY_ENERGY_CURRENT_ENERGY		8
S
S
S#define DISPLAY_SK					14
S#define DISPLAY_SK_ENTRY_NUMBER			1,1
S#define DISPLAY_SK_NAME					1,2
S#define DISPLAY_SK_AKTIVITY	 			1,3
S#define DISPLAY_SK_ALARM_AKTIVITY 			1,4
S#define DISPLAY_SK_ALARM 	 			1,5
S
S#define DISPLAY_DT					15
S#define DISPLAY_DT_EXT					1
S#define DISPLAY_DT_MSAN	 				2
S#define DISPLAY_DT_EPU 					3
S
S#define DISPLAY_KLIMAT				16
S#define DISPLAY_KLIMAT_BOX_TEMPER				1
S#define DISPLAY_KLIMAT_SETTINGS_BOX_ALARM_TEMPER	2
S#define DISPLAY_KLIMAT_SETTINGS_VENT_ON			3
S#define DISPLAY_KLIMAT_SETTINGS_VENT_OFF		4
S#define DISPLAY_KLIMAT_SETTINGS_WARM_ON			5
S#define DISPLAY_KLIMAT_SETTINGS_WARM_OFF		6
S#define DISPLAY_KLIMAT_SETTINGS_LOAD_ON			7
S#define DISPLAY_KLIMAT_SETTINGS_LOAD_OFF		8
S#define DISPLAY_KLIMAT_SETTINGS_BATT_ON			9
S#define DISPLAY_KLIMAT_SETTINGS_BATT_OFF		10
S
S
S
S#define COMMAND_OK		0x5555
S#define COMAND_FAIL		0xaaaa
S#define COMMAND_INVALID	0xeeee
S#define WRONG_PARAMETER	0xeeef
S
S#define SNMP_BPS_DISABLE		5
S#define SNMP_BPS_UNDISABLE	8
S#define SNMP_SPEC_VZ		3
S#define SNMP_SPEC_KE		4
S#define SNMP_SPEC_DISABLE	7
S
S
S#define DISPLAY_LOG					9
S#define DISPLAY_LOG_ENTRY_EVENTS 			1,1
S//#define DISPLAY_LOG_ENTRY_EVENTS 			1,1
N#endif
N
N//#define SEC_IN_HOUR	36000L
N
N#define LCD_SIZE 200
N
N
N#define MAX_NUM_OF_BAT	2
N#define MAX_NUM_OF_BPS	12
N//#define PAROL_ALL_ZERO
N
N#define AH_CONSTANT		36000L
N
N//***********************************************
N//Состояние источников
N
N
N
N
N#define MASK(lengt) 		(0xffffffff>>(32-lengt))
N#define MASK_OFFSET(shift,lengt)	(MASK(lengt)<<shift)
N
N#define GET_REG( reg, shift, lengt) 		( (reg & MASK_OFFSET(shift,lengt)) >> shift)
N#define SET_REG( reg, val, shift, lengt)  	reg = ( (reg & ~MASK_OFFSET(shift,lengt)) | (val << shift) )
N//#define CHK_REG( reg, mask ) ( (reg) & (mask) == (mask) )
N
N
N
N#define delay_ms(x) {long xx; xx=(unsigned long)x * 12000UL; while(xx)xx--;}
N#define delay_us(x) {long xx; xx=(unsigned long)x * 12UL; while(xx)xx--;}
N
N//*************************************************
N//сообщения
N#define MESS_DEEP	10
N
N#define 	MESS_ZERO 		0
N#define 	MESS_BAT1_OFF 		1
N#define 	MESS_BAT2_OFF		2
N#define 	MESS_ALL_SRC_OFF	3
N#define 	MESS_ALL_SRC_ON	4
N//#define 	MESS_RELSAM_ON		5
N#define 	MESS_SRC1_OFF		6
N#define 	MESS_SRC2_OFF		7
N#define 	MESS_SRC3_OFF		8
N#define 	MESS_SRC4_OFF		9
N#define 	MESS_SRC5_OFF		10
N#define 	MESS_SRC6_OFF		11
N#define 	MESS_SRC7_OFF		12
N#define 	MESS_SRC8_OFF		13
N#define 	MESS_SRC9_OFF		14
N#define 	MESS_SRC10_OFF		15
N#define 	MESS_SRC11_OFF		16
N#define 	MESS_SRC12_OFF		17
N#define 	MESS_BAT_CONTROL	18
N#define 	MESS_SRC_CONTROL	19
N#define 	MESS_LOAD2_WAIT	9 
N#define 	MESS_PONG			100
N#define	MESS_SPA_UART_PONG	101 
N#define	MESS_SPA_BLOK_BPS1	102
N#define	MESS_SPA_BLOK_BPS2	103
N#define	MESS_SPA_LEAVE_BPS1	104
N#define	MESS_SPA_LEAVE_BPS2	105
N#define 	MESS_SRC_ON_OFF	150
N#define   _MESS_SRC_MASK_BLOK_2SEC		151
N#define   _MESS_SRC_MASK_UNBLOK		152
N#define 	_MESS_SRC_MASK_ON			153
N#define	_MESS_SRC_PWM				154
N#define	_MESS_U_NECC				155
N#define   _MESS_FAST_REG				156
N//#define   _MESS_U_AVT_GOOD			157
N
N#define 	MESS_BAT_ON_OFF	160
N#define   _MESS_BAT_MASK_BLOK_AFTER_2SEC		161
N#define	_MESS_BAT_MASK_ON					162
N#define	_MESS_BAT_MASK_OFF					163
N
N		
N//#define	MESS_SPA_UART_SRAM	200 
N//#define	MESS_SPA_UART_CMND	201 
N
N#define	MESS2UNECC_HNDL   					190
N#define  		PARAM_UNECC_SET				 	191
N#define	MESS2BAT_HNDL   					200
N//#define	MESS2BAT_HNDL1   					201
N#define		PARAM_BAT_ALL_OFF_AFTER_2SEC			201
N#define		PARAM_BAT_MASK_OFF_AFTER_2SEC			202
N//#define		PARAM_BAT_ON						202
N#define	MESS2BPS_HNDL   					205
N#define		PARAM_BPS_ALL_OFF_AFTER_2SEC			206
N#define		PARAM_BPS_MASK_OFF_AFTER_2SEC			207
N#define		PARAM_BPS_MASK_ON_OFF_AFTER_2SEC		208
N#define		PARAM_BPS_MASK_ON					209
N#define		PARAM_BPS_ALL_ON					210
N#define 	MESS2RELE_HNDL						210
N#define 	MESS2KLIMAT_CNTRL					211
N#define		PARAM_RELE_SAMOKALIBR				100
N#define		PARAM_RELE_AV_1						101
N#define		PARAM_RELE_AV_2						102
N#define		PARAM_RELE_AV_3						103
N#define		PARAM_RELE_LOAD_OFF					103
N#define		PARAM_RELE_AV_4						104
N//#define		PARAM_RELE_WARM					104
N#define		PARAM_RELE_AV_COMM					105
N#define		PARAM_RELE_AV_BPS					106
N#define		PARAM_RELE_VENT						107
N#define		PARAM_RELE_VENT_WARM				107
N#define		PARAM_RELE_AV_BAT1					108
N#define		PARAM_RELE_AV_BAT2					109
N#define		PARAM_RELE_NPN						110
N#define		PARAM_RELE_WARM				     	111
N#define 		PARAM_RELE_VVENT				112
N#define 		PARAM_RELE_EXT					113
N#define 		PARAM_RELE_BAT_IS_DISCHARGED	114
N#define		PARAM_KLIMAT_CNTRL_VENT_INT			115
N#define		PARAM_KLIMAT_CNTRL_VENT_EXT			116
N
N#define	MESS2IND_HNDL						215
N#define		PARAM_SAMOKALIBR					216
N#define 		PARAM_U_AVT_GOOD					217
N#define	MESS2MATEMAT						220
N#define		PARAM_SAMOKALIBR					216
N#define	MESS2CNTRL_HNDL   					225
N#define		PARAM_CNTRL_STAT_PLUS				100
N#define		PARAM_CNTRL_STAT_MINUS				105
N#define		PARAM_CNTRL_STAT_STEP_DOWN			110
N#define 		PARAM_CNTRL_STAT_SET		    		229
N#define 		PARAM_CNTRL_STAT_FAST_REG		    	230	
N#define	MESS2KB_HNDL   					230
N#define		PARAM_CNTRL_IS_DOWN					231
N#define	MESS2VENT_HNDL   					240
N#define		PARAM_VENT_CB					241
N
N#define MESS2NET_DRV							33
N#define	PARAM_BPS_NET_OFF						34
N
N#define LCD_SIZE 200
N
N
N
N#define BIN__N(x) (x) | x>>3 | x>>6 | x>>9
N#define BIN__B(x) (x) & 0xf | (x)>>12 & 0xf0
N#define BIN8(v) (BIN__B(BIN__N(0x##v)))
N
N
N
N#define BAUD_RATE0 9600UL
N#define BAUD_RATE1 9600UL
N
N
N
N
N
N#ifndef PAROL_ALL_ZERO
N#define PAROL_KALIBR 873
N#define PAROL_SET 184
N#define PAROL_MODE 0 
N#define PAROL_ALLER 815 
N#define PAROL_BAT_IN 722 
N#define PAROL_BAT_OUT 722
N#define PAROL_KE 125
N#define PAROL_VZ 126
N#define PAROL_TST 999 
N#define PAROL_DEFAULT 295
N#define PAROL_AUSW 949
N#endif                
N
N#ifdef PAROL_ALL_ZERO
S#define PAROL_KALIBR 0
S#define PAROL_SET 0
S#define PAROL_MODE 0 
S#define PAROL_ALLER 0 
S#define PAROL_BAT_IN 0 
S#define PAROL_BAT_OUT 0
S#define PAROL_KE 0
S#define PAROL_VZ 0
S#define PAROL_TST 0
S#define PAROL_DEFAULT 0
S#define PAROL_AUSW 0
N#endif
N
N
N#define CNT_SRC_MAX	60
N
N
N
N//
N
N//#define SHIFT_REL_AV_BPS	     4
N 
N
N
N#ifdef UKU_MGTS
S#define SHIFT_REL_AV_NET		25
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
S#define SHIFT_REL_AV_COMM	9
S#define SHIFT_REL_LOAD_OFF	5
S#define SHIFT_REL_VENT	     7
S#define SHIFT_REL_LIGHT 	     4
N#endif
N
N#ifdef UKU_RSTKM
S#define SHIFT_REL_AV_NET		25
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
S#define SHIFT_REL_AV_COMM	9
S#define SHIFT_REL_LOAD_OFF	5
S#define SHIFT_REL_VENT	     7
S#define SHIFT_REL_LIGHT 	     4
N#endif
N
N#ifdef UKU_3U
S#define SHIFT_REL_AV_NET		25
S#define SHIFT_REL_AV_BAT1	4
S#define SHIFT_REL_AV_BAT2	9
S#define SHIFT_REL_AV_BPS	     7
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
N#endif
N
N#ifdef UKU_GLONASS
S#define SHIFT_REL_AV_NET		25
S#define SHIFT_REL_AV_BAT1	4
S#define SHIFT_REL_AV_BAT2	9
S#define SHIFT_REL_AV_BPS	     7
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
N#endif
N
N#ifdef UKU_KONTUR
S#define SHIFT_REL_AV_NET		25
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
S#define SHIFT_REL_AV_COMM	9
S#define SHIFT_REL_LOAD_OFF	5
S#define SHIFT_REL_VENT	     7
S#define SHIFT_REL_VENT_WARM   7
S#define SHIFT_REL_WARM 	     4
S#define SHIFT_REL_LIGHT 	     4
N#endif
N
N#ifdef UKU_6U
S#define SHIFT_REL_AV_NET		25
S#define SHIFT_REL_AV_BAT1	4
S#define SHIFT_REL_AV_BAT2	9
S#define SHIFT_REL_AV_BPS	     7
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
S#define SHIFT_REL_VENT		5
N#endif
N
N#ifdef UKU_220
S#define SHIFT_REL_AV_NET		25
S#define SHIFT_REL_AV_BAT	4
S#define SHIFT_REL_AV_BPS	     7
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
S#define SHIFT_REL_VENT		9
N#endif
N
N#ifdef UKU_220_IPS_TERMOKOMPENSAT
N#define SHIFT_REL_BAT1	     8
N#define SHIFT_REL_BAT2	     6
N#define SHIFT_REL_AV_NET		25
N#define SHIFT_REL_AV_BPS	     5
N#define SHIFT_REL_AV_BAT	     4
N#endif
N
N#ifdef UKU_220_V2
S#define SHIFT_REL_AV_NET		25
S#define SHIFT_REL_AV_BAT	4
S#define SHIFT_REL_AV_BPS	     7
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
S#define SHIFT_REL_VENT		9
N#endif
N
N#ifdef UKU_TELECORE2015
S#define SHIFT_REL_AV_NET		5
S#define SHIFT_REL_AV_BAT	4
S#define SHIFT_REL_AV_BPS	     7
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
S#define SHIFT_REL_LIGHT		9
S#define SHIFT_REL_WARM		4
S#define SHIFT_REL_VENT	     7
S#define SHIFT_REL_VVENT	     6
N#endif
N
N#ifdef UKU_TELECORE2017
S#define SHIFT_REL_AV_NET		5
S#define SHIFT_REL_AV_BAT	4
S#define SHIFT_REL_AV_BPS	     7
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
S#define SHIFT_REL_LIGHT		9
S#define SHIFT_REL_WARM		4
S#define SHIFT_REL_VENT	     7
S#define SHIFT_REL_VVENT	     6
N#endif
N
N//***********************************************
N//Таймер
Nextern char b1000Hz,b100Hz,b50Hz,b10Hz,b5Hz,b2Hz,b1Hz;
Nextern short t0cnt,t0cnt0,t0cnt1,t0cnt2,t0cnt3,t0cnt4,t0cnt5,t0cnt6,t0_cnt7;
Nextern char bFL5,bFL2,bFL,bFL_;
Nextern signed short main_10Hz_cnt;
Nextern signed short main_1Hz_cnt;
N
N//***********************************************
N//Структура ИБЭПа
Nextern char cnt_of_slave;
N//char cnt_of_wrks;   //колличество работающих источников , для индикации
N
N
N
N
N//***********************************************
N//Индикация
Ntypedef enum {
N	iMn,iWater_sensor_kontr,iWater_sensor_kontr_ret,iSet_T,iSet_T_ret,
N	iAir_sensor_kontr,iAir_sensor_kontr_ret,
N	iInterf_kontr,iInterf_kontr_ret,
N	iOptr_kontr, iProbesms, iDefset,iPowerdown,iPowerdown_ret,
N	iS2,iSet_prl,iK_prl,iDnd,
N	iK, iK_220_IPS_TERMOKOMPENSAT,iK_220_IPS_TERMOKOMPENSAT_IB,iK_TELECORE,iK_VD,
N	iSpcprl,iSpc,k,Crash_0,Crash_1,iKednd,iAKE,iSpc_termocompensat,
N	iLoad,iAVAR,
N	iVrs,iPrltst,iApv,
N	iK_bps,iK_bps_sel,iK_bat_ips_termokompensat_ib,iK_bat_TELECORE,iK_bat_sel,iK_bat_sel_TELECORE,iK_load,iK_net,iK_net3,
N	iSet_st_prl,iK_pdp,
N	iDeb,
N	iPrl_bat_in_out,iPrl_bat_in_sel,iPdp1,iJAv_sel,iJAv_net_sel,iJAv_net,iJAv_src1,
N	iTst_bps,/*iJAv_bat,iJAv_bat_sel,*/iAusw,iAusw_prl,iAusw_set,
N	iK_t_ext,iK_t_3U,iK_t_ext_6U,
N	iAv_view,
N	iBatLogKe,iJ_bat_ke,iBatLogVz,iJ_bat_vz,iBatLogWrk,
N	iExt_ddv,iExt_ddi,iExt_dud,iSM,iKlimat,iKlimat_kontur,iKlimat_TELECORE,
N	iEnerg3,iEnerg,
N	iVent,
N	iK_power_net3,
N	iAvt,iLan_set,
N	iNpn_set,
N	iBps_list,
N	iRele_set,iRele_set_,
N	iAvt_set_sel,iAvt_set,iSet_li_bat,
N	iOut_volt_contr,iDop_rele_set,iBlok_ips_set,iIps_Curr_Avg_Set}i_enum;
N
Ntypedef struct  
N{
N
Ni_enum i;
Nsigned char s_i;
Nsigned char s_i1;
Nsigned char s_i2;
Nsigned char i_s;
N} stuct_ind;
N
N#define ind     a_ind.i
N#define sub_ind     a_ind.s_i
N#define sub_ind1     a_ind.s_i1
N#define sub_ind2     a_ind.s_i2
N#define index_set     a_ind.i_s
N
Nextern stuct_ind a_ind,b_ind[10],c_ind;
Nextern signed short ptr_ind;
Nextern char lcd_buffer[LCD_SIZE+100];
Xextern char lcd_buffer[200+100];
Nextern signed char parol[3];
Nextern char phase;
Nextern char lcd_bitmap[1024];
Nextern char dig[5];
Nextern signed short ind_pointer;
Nextern char zero_on;
Nextern char mnemo_cnt;
Nextern char simax;
Nextern short av_j_si_max;
Nextern const char ABCDEF[];
Nextern const char sm_mont[13][4]; 
N
N
N//**********************************************
N//Коэффициенты, отображаемые из EEPROM
Nextern signed short Ktsrc[2];
Nextern signed short Kusrc[2];
Nextern signed short Kisrc[2];
Nextern signed short Ki0src[2];
Nextern signed short Kubat[2];
Nextern signed short Kubatm[2];
Nextern unsigned short Kibat0[2];
Nextern signed short Kibat1[2];
Nextern signed short Ktbat[2];
Nextern signed short Kunet;
Nextern signed short Ktext[3];
Nextern signed short Kuload;
Nextern signed short Kunet_ext[3];
Nextern signed short KunetA;
Nextern signed short KunetB;
Nextern signed short KunetC;
Nextern signed short Kubps;
Nextern signed short Kuout;
Nextern signed short Kuvd;
N
Nextern signed short MAIN_IST;
Nextern signed short UMAX;
Nextern signed short UOUT;
Nextern signed short UOUT_;
Nextern signed short UAVT;
Nextern signed short TMAX;
Nextern signed short TSIGN;
Nextern signed short TSYSMAX;
Nextern signed short AV_OFF_AVT;
Nextern signed short USIGN;
Nextern signed short UMN;
Nextern signed short ZV_ON;
Nextern signed short UINMAX;
Nextern signed short UINMIN;
Nextern signed short UOUTMAX;
Nextern signed short UOUTMIN;
Nextern signed short IKB;
N
Nextern signed short IMAX;
Nextern signed short IMIN;
Nextern signed short APV_ON;
Nextern signed short IZMAX;
Nextern signed short U0B;
Nextern signed short TZAS;
Nextern signed short VZ_HR;
Nextern signed short TBAT;
Nextern signed short U_AVT;
Nextern signed short DU;
N
Nextern signed short RELE_SET_MASK[4];
N
Nextern signed short TBATMAX;
Nextern signed short TBATSIGN;
Nextern signed short UBM_AV;
Nextern signed short RELE_LOG;
Nextern signed short TBOXMAX;
Nextern signed short TBOXREG;
Nextern signed short TBOXVENTMAX;
Nextern signed short TLOADDISABLE;
Nextern signed short TLOADENABLE;
Nextern signed short TBATDISABLE;
Nextern signed short TBATENABLE;
Nextern signed short TBOXMAX;
Nextern signed short TBOXREG;
Nextern signed short TBOXVENTMAX;
Nextern signed short TLOADDISABLE;
Nextern signed short TLOADENABLE;
Nextern signed short TBATDISABLE;
Nextern signed short TBATENABLE;
Nextern signed short TVENTON;
Nextern signed short TVENTOFF;
Nextern signed short TWARMON;
Nextern signed short TWARMOFF;
Ntypedef enum {rvsAKB=0,rvsEXT,rvsBPS} enum_releventsign;
Nextern enum_releventsign RELEVENTSIGN;
Nextern signed short TZNPN;
Nextern signed short UONPN;
Nextern signed short UVNPN;
Ntypedef enum {npnoOFF=0,npnoRELEVENT,npnoRELEAVBAT2} enum_npn_out;
Nextern enum_npn_out NPN_OUT;
Ntypedef enum {npnsULOAD=0,npnsAVNET} enum_npn_sign;
Nextern enum_npn_sign NPN_SIGN;
Nextern signed short TERMOKOMPENS;
Nextern signed short TBOXVENTON; 
Nextern signed short TBOXVENTOFF;
Nextern signed short TBOXWARMON; 
Nextern signed short TBOXWARMOFF;
Nextern signed short BAT_TYPE;	//Тип батареи. 0 - обычная свинцовая, 1-литиевая COSLIGHT, 2-литиевая SACRED SUN , 3-литиевая ZTT
Nextern signed short DU_LI_BAT;	//Параметр, определяющий напряжение содержания литиевой батареи
Nextern signed short FORVARDBPSCHHOUR;	//Периодичностьсмены ведущего источника в часах. Если 0 - функция выключена и ведущий первый источник
Nextern signed short NUMBAT;
Nextern signed short NUMBAT_TELECORE;
Nextern signed short NUMIST;
Nextern signed short NUMINV;
Nextern signed short NUMDT;
Nextern signed short NUMSK;
Nextern signed short NUMEXT;
Nextern signed short NUMAVT;
Nextern signed short NUMMAKB;
Nextern signed short NUMBYPASS;
Nextern signed short U_OUT_KONTR_MAX;
Nextern signed short U_OUT_KONTR_MIN;
Nextern signed short U_OUT_KONTR_DELAY;
Nextern signed short DOP_RELE_FUNC;
Nextern signed short CNTRL_HNDL_TIME;	//Постоянная времени регулирования источников для Телекора
Nextern signed short USODERG_LI_BAT;		//Напряжение содержания литиевой батареи
Nextern signed short QSODERG_LI_BAT;		//Заряд при котором начинает действовать напряжение содержания литиевой батареи
Nextern signed short TVENTMAX;			//Максимальный ресурс вентилятора
Nextern signed short ICA_EN;				//Включенность режима выравнивания токов ИПС
Nextern signed short ICA_CH;				//Канал связи для выравнивания токов, 0 - MODBUS, 1 - MODBUS-TCP
Nextern signed short ICA_MODBUS_ADDRESS;//Адрес ведомого для выравнивания токов по шине MODBUS-RTU
Nextern signed short ICA_MODBUS_TCP_IP1,ICA_MODBUS_TCP_IP2,ICA_MODBUS_TCP_IP3,ICA_MODBUS_TCP_IP4;	//IP ведомого для выравнивания токов по шине MODBUS-TCP
Nextern signed short ICA_MODBUS_TCP_UNIT_ID;	//UNIT ID ведомого для выравнивания токов по шине MODBUS-TCP
Nextern signed short PWM_START;			//Начальный шим для ЭЛТЕХа
Nextern signed short KB_ALGORITM;		//2-х или 3-х ступеннчатый алгоритм проверки цепи батареи
Nextern signed short REG_SPEED;			//скорость регулирования, 1- стандартная, 2,3,4,5- замедленная в 2,3,4,5 раз
N
Ntypedef enum {apvON=0x01,apvOFF=0x00}enum_apv_on;
Nextern enum_apv_on APV_ON1,APV_ON2;
N
Nextern signed short APV_ON2_TIME;
N
Ntypedef enum {bisON=0x0055,bisOFF=0x00aa}enum_bat_is_on;
Nextern enum_bat_is_on BAT_IS_ON[2];
N
Nextern signed short BAT_DAY_OF_ON[2];
Nextern signed short BAT_MONTH_OF_ON[2];
Nextern signed short BAT_YEAR_OF_ON[2];
Nextern signed short BAT_C_NOM[2];
Nextern signed short BAT_RESURS[2];
Nextern signed short BAT_C_REAL[2];
N//extern signed short BAT_TYPE[2];
N
Nextern unsigned short AUSW_MAIN;
Nextern unsigned long 	AUSW_MAIN_NUMBER;
Nextern unsigned short AUSW_DAY;
Nextern unsigned short AUSW_MONTH;
Nextern unsigned short AUSW_YEAR;
Nextern unsigned short AUSW_UKU;
Nextern unsigned short AUSW_UKU_SUB;
Nextern unsigned long AUSW_UKU_NUMBER;
Nextern unsigned long	AUSW_BPS1_NUMBER;
Nextern unsigned long  AUSW_BPS2_NUMBER;
Nextern unsigned short AUSW_RS232;
Nextern unsigned short AUSW_PDH;
Nextern unsigned short AUSW_SDH;
Nextern unsigned short AUSW_ETH;
N
Nextern signed short TMAX_EXT_EN[3];
Nextern signed short TMAX_EXT[3];
Nextern signed short TMIN_EXT_EN[3];
Nextern signed short TMIN_EXT[3];
Nextern signed short T_EXT_REL_EN[3];
Nextern signed short T_EXT_ZVUK_EN[3];
Nextern signed short T_EXT_LCD_EN[3];
Nextern signed short T_EXT_RS_EN[3];
N
Nextern signed short SK_SIGN[4];
Nextern signed short SK_REL_EN[4];
Nextern signed short SK_ZVUK_EN[4];
Nextern signed short SK_LCD_EN[4];
Nextern signed short SK_RS_EN[4];
N
Ntypedef enum {AVZ_1=1,AVZ_2=2,AVZ_3=3,AVZ_6=6,AVZ_12=12,AVZ_OFF=0}enum_avz;
Nextern enum_avz AVZ;
N
Nextern unsigned short HOUR_AVZ;
Nextern unsigned short MIN_AVZ;
Nextern unsigned short SEC_AVZ;
Nextern unsigned short DATE_AVZ;
Nextern unsigned short MONTH_AVZ;
Nextern unsigned short YEAR_AVZ;
Nextern unsigned short AVZ_TIME;
Ntypedef enum {mnON=0x55,mnOFF=0xAA}enum_mnemo_on;
Nextern enum_mnemo_on MNEMO_ON;
Nextern unsigned short MNEMO_TIME;
Nextern signed short POWER_CNT_ADRESS;
N
Nextern signed short ETH_IS_ON;
Nextern signed short ETH_DHCP_ON;
Nextern signed short ETH_IP_1;
Nextern signed short ETH_IP_2;
Nextern signed short ETH_IP_3;
Nextern signed short ETH_IP_4;
Nextern signed short ETH_MASK_1;
Nextern signed short ETH_MASK_2;
Nextern signed short ETH_MASK_3;
Nextern signed short ETH_MASK_4;
Nextern signed short ETH_TRAP1_IP_1;
Nextern signed short ETH_TRAP1_IP_2;
Nextern signed short ETH_TRAP1_IP_3;
Nextern signed short ETH_TRAP1_IP_4;
Nextern signed short ETH_TRAP2_IP_1;
Nextern signed short ETH_TRAP2_IP_2;
Nextern signed short ETH_TRAP2_IP_3;
Nextern signed short ETH_TRAP2_IP_4;
Nextern signed short ETH_TRAP3_IP_1;
Nextern signed short ETH_TRAP3_IP_2;
Nextern signed short ETH_TRAP3_IP_3;
Nextern signed short ETH_TRAP3_IP_4;
Nextern signed short ETH_TRAP4_IP_1;
Nextern signed short ETH_TRAP4_IP_2;
Nextern signed short ETH_TRAP4_IP_3;
Nextern signed short ETH_TRAP4_IP_4;
Nextern signed short ETH_TRAP5_IP_1;
Nextern signed short ETH_TRAP5_IP_2;
Nextern signed short ETH_TRAP5_IP_3;
Nextern signed short ETH_TRAP5_IP_4;
Nextern signed short ETH_SNMP_PORT_READ;
Nextern signed short ETH_SNMP_PORT_WRITE;
Nextern signed short ETH_GW_1;
Nextern signed short ETH_GW_2;
Nextern signed short ETH_GW_3;
Nextern signed short ETH_GW_4;
N
Nextern signed short RELE_VENT_LOGIC;
N
Nextern signed short MODBUS_ADRESS;
Nextern signed short MODBUS_BAUDRATE;
Nextern signed short BAT_LINK;
Nextern signed short I_LOAD_MODE;		//способ измерения выходного тока - по шунту или как сумму токов источников
N
N
N
N//#ifdef UKU_TELECORE2015
Ntypedef enum {bsOFF=0,bsCOMM_ON,bsOK} enum_batStat;
N//***********************************************
N//Состояние литиевой батареи
Ntypedef struct
N     {
N	//char 		_cnt_to_block;
N	signed short	_Ub;
N     //signed short	_Ubm;
N     //signed short	_dUbm;
N	signed short	_Ib;
N	signed short	_Tb;
N	char 		_nd;
N	char   		_soh;
N	char 		_soc;
N	signed short   _ratCap;
N	char 		_comErrStat;	//Состояние связи с батареей: 1-ошибка, 0-связь в норме
N	enum_batStat	_batStat;
N	signed short 	_cclv;
N	char 		_rbt;
N	short 		_canErrorCnt;
N	char			_canError;
N	char 		_485Error;
N	short 		_485ErrorCnt;
N	//char 		_full_ver;
N	//signed long 	_zar_cnt;
N	//signed long 	_zar_cnt_ke;
N	//unsigned short _Iintegr,_Iintegr_; 
N	//signed short 	_u_old[8];
N	//signed short	_u_old_cnt;
N	//unsigned long 	_wrk_date[2];
N	//char 		_rel_stat;
N	//char			_av;
N	//char			_time_cnt;
N	//char 		_temper_stat;
N	//0бит - подогрев
N	//1бит - перегрев
N	//signed short 	_sign_temper_cnt;
N	//signed short 	_max_temper_cnt;
N	//signed long 	_resurs_cnt;
N	//signed short 	_cnt_as; 	//счетчик несимметрии, считает до 5 минут при выполнении условий несимметрии, когда досчитывает - пишет в журнал
N     //signed short   _max_cell_volt;
N	//signed short   _min_cell_volt;
N	} LI_BAT_STAT; 
Nextern LI_BAT_STAT li_bat;
N//#endif
N//***********************************************
N//Состояние байпаса
Ntypedef struct
N     {
N	signed short 	_Iout;
N	signed short 	_Uout;
N	signed short 	_Pout;
N	signed short 	_Unet; 	
N	signed short 	_Uin;
N	char			_T;
N	char 		_flags;
N	char			_cnt;
N	char 		_adress;
N	} BYPS_STAT; 
Nextern BYPS_STAT byps;
N
N
N
N
N
N
N//***********************************************
N//Телеметрия по внутренней шине
Nextern char can_slot[12][16];
Nextern char plazma_can_inv[3];
N
N
N//***********************************************
N//Состояние инверторов
Ntypedef struct
N     {
N	char _av;
N	//0бит - авария по перегреву
N	//1бит - авария по завышенному Uвых
N	//2бит - авария по заниженному Uвых
N	//3бит - авария по обрыву связи	    
N     enum {isAPV,isWRK,isRDY,isBL,isAV,isOFF_AV_NET}_state;
N     char _cnt;
N     char _cnt_old;
N     char _cnt_more2;
N     char _buff[16]; 
N     signed _Uio; 
N     signed _Ii;
N     signed _Ti; 
N	signed _Uil;
N	signed _Uin;
N	signed _Pio;
N     char _flags_tu;
N     signed _vol_u;
N     signed _vol_i;
N     char _is_on_cnt;
N     //int _ist_blok_host_cnt_; //блокирование источников извне(CAN или RS), если не 0 то источник заблокирован.
N     int _ist_blok_host_cnt;
N     short _blok_cnt; //блокирование источников 
N     char _flags_tm;
N	char _flags_tm_old;
N	signed short _overload_av_cnt;     
N     signed short _temp_av_cnt;
N     signed short _umax_av_cnt;
N     signed short _umin_av_cnt;
N     signed _rotor;
N     signed  short _x_; 
N     char _adr_ee;
N	char _last_avar;
N	char _Pnom;
N	char _Uoutmin;
N	char _Uoutmax;
N	char _net_contr_en;
N	char _pwm_en;
N	char _phase_mode;
N
N     } INV_STAT; 
N#ifdef UKU_220_V2
Sextern INV_STAT inv[3];
N#endif
N#ifndef UKU_220_V2
Nextern INV_STAT inv[20];
N#endif
Nextern char first_inv_slot;
N
N//***********************************************
N//Состояние нагрузки
Nextern signed short load_U;
Nextern signed short load_I;
N
N//***********************************************
N//Состояние выхода
Nextern signed short bps_U;
Nextern signed short out_U;
Nextern signed short in_U;
Nextern signed short out_I;
Nextern signed short vd_U;
Nextern signed short bps_I;
Nextern signed short sys_T;
N
N//***********************************************
N//Состояние первичной сети
Nextern signed short net_U,net_Ustore,net_Ua,net_Ub,net_Uc;
Nextern char bFF,bFF_;
Nextern signed short net_F,hz_out,hz_out_cnt,net_F3;
Nextern signed char unet_drv_cnt;
Nextern char net_av;
N
N
Nextern char plazma_plazma_plazma;
N
Nvoid bitmap_hndl(void);
Nvoid ind_hndl(void);
N__irq void timer1_interrupt(void);
N__irq void timer0_interrupt(void); 
N
N
N//***********************************************
N//Состояние внешних датчиков
N//signed short tout[4];
Nextern char tout_max_cnt[4],tout_min_cnt[4];
Ntypedef enum {tNORM,tMAX,tMIN}enum_tout_stat;
Nextern enum_tout_stat tout_stat[4];
Nextern signed short t_ext[3];
Nextern char ND_EXT[3];
Nextern signed char sk_cnt[4],sk_av_cnt[4];
Ntypedef enum  {ssOFF,ssON} enum_sk_stat;
Nextern enum_sk_stat sk_stat[4];
Ntypedef enum  {sasOFF,sasON} enum_sk_av_stat;
Nextern enum_sk_av_stat sk_av_stat[4],sk_av_stat_old[4];
Nextern signed short t_box,t_box_warm,t_box_vent;
Nextern char TELECORE2017_EXT_VENT_PWM,TELECORE2017_INT_VENT_PWM;
N
N//***********************************************
N//Звуки
Nextern BOOL bSILENT;
N
N//***********************************************
N//Тест
Ntypedef enum {tstOFF,tst1,tst2} enum_tst_state;
Nextern enum_tst_state tst_state[15];
N
N//-----------------------------------------------
N//Контроль заряда
Nextern char sign_U[2],sign_I[2];
Nextern char superviser_cnt;
N
N//-----------------------------------------------
N//Плата расширения
Nextern unsigned short adc_buff_ext_[3];
Nextern unsigned short Uvv[3];
Nextern unsigned short Uvv0;
Nextern short pos_vent;
Nextern short t_ext_can;
Nextern char t_ext_can_nd;
N
N//-----------------------------------------------
N//Плата расширения 2
Nextern char eb2_data[30];
Nextern short eb2_data_short[10];
Nextern short Uvv_eb2[3],Upes_eb2[3];
Nextern short Kvv_eb2[3],Kpes_eb2[3];
N
N//-----------------------------------------------
N//Состояние вводов
Nextern signed short vvod_pos;
N
N//-----------------------------------------------
N//Работа со щетчиком
Nextern signed long power_summary;
Nextern signed short power_current;
Nextern signed long power_summary_tempo,power_summary_tempo_old;
Nextern signed short power_current_tempo,power_current_tempo_old;
Nextern char powerSummaryCnt;
Nextern char powerCurrentCnt;
N
N
Nextern char bRESET;
Nextern char bRESET_EXT;
Nextern char bRESET_INT_WDT;
Nextern char bRESET_EXT_WDT;
N
N//-----------------------------------------------
N//Климатконтроль и вентиляторы
Nextern signed short main_vent_pos;
Nextern signed char t_box_cnt;
Ntypedef enum  {mvsOFF,mvsON} enum_mixer_vent_stat;
Nextern enum_mixer_vent_stat mixer_vent_stat;
Ntypedef struct
N     {
N	signed short _T[4];
N	char _nd[4];
N	signed short _T_dispers[4];
N	char _max_dispers_num;
N	signed short _max_dispers;
N    	signed short _avg1;
N	signed short _avg2;
N	char _avg_cnt;
N     } INT_BOX_TEMPER;
Nextern INT_BOX_TEMPER ibt;
Ntypedef enum {tbdsON,tbdsOFF,tbdsMNL} enum_tbatdisable_stat;
Nextern enum_tbatdisable_stat tbatdisable_stat;
Ntypedef enum {tldsON,tldsOFF,tldsMNL} enum_tloaddisable_stat;
Nextern enum_tloaddisable_stat tloaddisable_stat;
Ntypedef enum {atsOFF,atsON} enum_av_tbox_stat;
Nextern enum_av_tbox_stat av_tbox_stat;
Nextern signed short av_tbox_cnt;
Nextern char tbatdisable_cmnd,tloaddisable_cmnd;
Nextern short tbatdisable_cnt,tloaddisable_cnt;
N#ifdef UKU_KONTUR
Sextern short t_box_vent_on_cnt;
Sextern short t_box_warm_on_cnt;
Stypedef enum {vsOFF,vsON} enum_vent_stat;
Sextern enum_vent_stat vent_stat_k;
Stypedef enum {wsOFF,wsON} enum_warm_stat;
Sextern enum_warm_stat warm_stat_k;
N#endif
N
N#ifdef UKU_TELECORE2015
Sextern short t_box_vent_on_cnt;
Sextern short t_box_warm_on_cnt;
Sextern short t_box_vvent_on_cnt;
Stypedef enum {vsOFF,vsON} enum_vent_stat;
Sextern enum_vent_stat vent_stat_k,vvent_stat_k;
Stypedef enum {wsOFF,wsON} enum_warm_stat;
Sextern enum_warm_stat warm_stat_k;
Sextern signed short TELECORE2015_KLIMAT_WARM_ON_temp;
N#endif
N
N#ifdef UKU_TELECORE2017
Sextern short t_box_vent_on_cnt;
Sextern short t_box_warm_on_cnt;
Sextern short t_box_vvent_on_cnt;
Stypedef enum {vsOFF,vsON} enum_vent_stat;
Sextern enum_vent_stat vent_stat_k,vvent_stat_k;
Stypedef enum {wsOFF,wsON} enum_warm_stat;
Sextern enum_warm_stat warm_stat_k;
Sextern signed short TELECORE2017_KLIMAT_WARM_ON_temp;
Sextern signed char t_box_warm_minus20_cnt;
Sextern signed char t_box_warm_plus65_cnt;
Sextern signed char t_box_cool_plus70_cnt;
S#define ULAUNCH UB0
S#define ULINECC UB20
N#endif
N
Nextern char ext_can_cnt;
N
N
Nsigned short abs_pal(signed short in);
Nvoid ADC_IRQHandler(void);
N
N//-----------------------------------------------
N//Состояние оптронов передаваемое испытуемой плате
Ntypedef enum  {osOFF,osON} enum_optr_stat;
Nextern enum_optr_stat optr_stat[3]; 
N
N//-----------------------------------------------
N//Показания АЦП на плате измерения тока батареи
Nextern signed long ibat_metr_buff_[2];
Nextern short bIBAT_SMKLBR;
Nextern char ibat_metr_cnt;
N
N
N
Nextern char snmp_plazma;
N
N
Nextern char ips_bat_av_vzvod;
Nextern char ips_bat_av_stat;
N
Nextern char rel_warm_plazma;
Nextern char can_byps_plazma0,can_byps_plazma1;
N
Nextern short plazma_bat_drv0,plazma_bat_drv1,bat_drv_cnt_cnt;
Nextern unsigned short bat_drv_rx_cnt;
Nextern char bat_drv_rx_buff[512];
Nextern char bat_drv_rx_in;
N
Nextern short can_plazma;
N
N//-----------------------------------------------
N//Климатконтроль TELECORE2015	
N#ifdef UKU_TELECORE2015
Sextern signed short TELECORE2015_KLIMAT_WARM_SIGNAL;
Sextern signed short TELECORE2015_KLIMAT_VENT_SIGNAL;
Sextern signed short TELECORE2015_KLIMAT_WARM_ON;
Sextern signed short TELECORE2015_KLIMAT_WARM_OFF;
Sextern signed short TELECORE2015_KLIMAT_CAP;
Sextern signed short TELECORE2015_KLIMAT_VENT_ON;
Sextern signed short TELECORE2015_KLIMAT_VENT_OFF;
Sextern signed short TELECORE2015_KLIMAT_VVENT_ON;
Sextern signed short TELECORE2015_KLIMAT_VVENT_OFF;
N#endif
N
N
N#ifndef FALSE
S#define FALSE   (0)
N#endif
N
N#ifndef TRUE
S#define TRUE    (1)
N#endif
N
N//-----------------------------------------------
N//Ускоренный заряд
Nextern signed short speedChrgCurr;			//максимальный ток ускоренного заряда, отображение из ЕЕПРОМ
Nextern signed short speedChrgVolt;			//максимальное напряжение ускоренного заряда, отображение из ЕЕПРОМ
Nextern signed short speedChrgTimeInHour; 	//максимальное время ускоренного заряда в часах, отображение из ЕЕПРОМ
Nextern signed short speedChrgAvtEn;	 		//Автоматическое включение Ускоренного заряда включено/выключено
Nextern signed short speedChrgDU;	    	//Просадка напряжения необходимая для включения ускоренного заряда
Nextern signed short speedChIsOn;			//Текущее состояние ускоренного заряда вкл/выкл
Nextern signed long  speedChTimeCnt;			//Счетчик времени прямой ускоренного заряда
Nextern signed short speedChrgBlckSrc;		//Источник сигнала блокировки, 0-выкл., 1-СК1, 2-СК2
Nextern signed short speedChrgBlckLog;		//Логика сигнала блокировки, 1 - блокировка по замкнутому СК, 0 - по разомкнутому
Nextern signed short speedChrgBlckStat;		//Сигнал блокировки для выравнивающего и ускоренного заряда.
Nextern char  		speedChrgShowCnt;		//Счетчик показа информационного сообщения
N
N//-----------------------------------------------
N//Блокировка ИПС
Nextern signed short ipsBlckSrc;
Nextern signed short ipsBlckLog;
Nextern signed short ipsBlckStat;
N
N//-----------------------------------------------
N//Контроль выходного напряжения
Nextern signed short outVoltContrHndlCnt;		//Счетчик, считает в плюс в случае выполнения условия аварии
Nextern signed short outVoltContrHndlCnt_;		//Счетчик, считает в плюс в случае отсутствия выполнения условия аварии
Nextern char uout_av;
N
N//-----------------------------------------------
N//Контроль работы вольтдобавки
Nextern char bVDISWORK;
Nextern char vd_is_work_cnt;
N
Nextern short plazma_numOfCells;
Nextern short plazma_numOfTemperCells;
Nextern short plazma_numOfPacks;
N
Nextern char plazma_ztt[2];
Nextern char plazma1809;
N
Nextern U8 socket_tcp;
N
N//-----------------------------------------------
N//Выравнивание токов ИПС
Nextern char ica_plazma[10];
Nextern char ica_timer_cnt;
Nextern signed short ica_my_current;
Nextern signed short ica_your_current;
Nextern signed short ica_u_necc;
Nextern U8 tcp_soc_avg;
Nextern U8 tcp_connect_stat;
N
N//-----------------------------------------------
N//Авария по перегрузке
Nextern short overloadHndlCnt;
Nextern char overloadAvar;
N
N//-----------------------------------------------
N//Авария по выходному напряжению
Nextern short uAvarHndlOutUMaxCnt,uAvarHndlOutUMinCnt;
Nextern char uOutAvar;
N
N//-----------------------------------------------
N//Авария по входному напряжению
Nextern short uAvarHndlInUMaxCnt,uAvarHndlInUMinCnt;
Nextern char uInAvar;
N
N//-----------------------------------------------
N//Авария по температуре системы
Nextern short sysTAvarHndlCnt;
Nextern char sysTAvar;
N
N//***********************************************
N//Состояния аварий для реле
Nextern short rele_av_flags;
Nextern short avar_vd_stat;
N
Nextern short pvlk;
N//-----------------------------------------------
N//Ресурс вентиляторов
N//extern char vent_resurs_temp[4];
N
N/*----------------------------------------------------------------------------
N * end of file
N *---------------------------------------------------------------------------*/
L 22 "main.c" 2
N#include "simbol.h"
L 1 "simbol.h" 1
N
Nconst char caracter[1536]={
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,
N0x3E,0x1C,0x08,0x00,0x00,0x08,0x0C,0x0E,
N0x0C,0x08,0x7f,0x49,0x51,0x49,0x45,0x7f,
N0x7f,0x41,0x41,0x41,0x41,0x7f,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x5F,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x14,0x3E,0x14,0x3E,0x14,
N0x00,0x24,0x2A,0x7F,0x2A,0x12,0x00,0x23,
N0x13,0x08,0x64,0x62,0x00,0x36,0x49,0x55,
N0x22,0x50,0x00,0x00,0x00,0x00,0x06,0x00,
N0x00,0x00,0x3E,0x41,0x00,0x00,0x00,0x00,
N0x00,0x41,0x3E,0x00,0x00,0x14,0x08,0x3E,
N0x08,0x14,0x00,0x08,0x08,0x3E,0x08,0x08,
N0x00,0x00,0x50,0x30,0x00,0x00,0x00,0x08,
N0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x60,
N0x60,0x00,0x00,0x40,0x20,0x10,0x08,0x04,
N0x00,0x3E,0x51,0x49,0x45,0x3E,0x00,0x00,
N0x42,0x7F,0x40,0x00,0x00,0x42,0x61,0x51,
N0x49,0x46,0x00,0x21,0x41,0x45,0x4B,0x31,
N0x00,0x18,0x14,0x12,0x7F,0x10,0x00,0x27,
N0x45,0x45,0x45,0x39,0x00,0x3C,0x4A,0x49,
N0x49,0x30,0x00,0x01,0x71,0x09,0x05,0x03,
N0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x06,
N0x49,0x49,0x29,0x1E,0x00,0x00,0x36,0x36,
N0x00,0x00,0x00,0x00,0x56,0x36,0x00,0x00,
N0x00,0x00,0x08,0x14,0x22,0x00,0x00,0x14,
N0x14,0x14,0x14,0x14,0x00,0x00,0x22,0x14,
N0x08,0x00,0x00,0x02,0x01,0x51,0x09,0x06,
N0x00,0x32,0x49,0x79,0x41,0x3E,0x00,0x7E,
N0x11,0x11,0x11,0x7E,0x00,0x7F,0x49,0x49,
N0x49,0x36,0x00,0x3E,0x41,0x41,0x41,0x22,
N0x00,0x7F,0x41,0x41,0x22,0x1C,0x00,0x7F,
N0x49,0x49,0x49,0x41,0x00,0x7F,0x09,0x09,
N0x09,0x01,0x00,0x3E,0x41,0x41,0x51,0x72,
N0x00,0x7F,0x08,0x08,0x08,0x7F,0x00,0x00,
N0x41,0x7F,0x41,0x00,0x00,0x20,0x40,0x41,
N0x3F,0x01,0x00,0x7F,0x08,0x14,0x22,0x41,
N0x00,0x7F,0x40,0x40,0x40,0x40,0x00,0x7F,
N0x02,0x0C,0x02,0x7F,0x00,0x7F,0x04,0x08,
N0x10,0x7F,0x00,0x3E,0x41,0x41,0x41,0x3E,
N0x00,0x7F,0x09,0x09,0x09,0x06,0x00,0x3E,
N0x41,0x51,0x21,0x5E,0x00,0x7F,0x09,0x19,
N0x29,0x46,0x00,0x46,0x49,0x49,0x49,0x31,
N0x00,0x01,0x01,0x7F,0x01,0x01,0x00,0x3F,
N0x40,0x40,0x40,0x3F,0x00,0x1F,0x20,0x40,
N0x20,0x1F,0x00,0x3F,0x40,0x38,0x40,0x3F,
N0x00,0x63,0x14,0x08,0x14,0x63,0x00,0x07,
N0x08,0x70,0x08,0x07,0x00,0x61,0x51,0x49,
N0x45,0x43,0x00,0x00,0x7F,0x41,0x00,0x00,
N0x00,0x04,0x08,0x10,0x20,0x40,0x00,0x00,
N0x00,0x41,0x7F,0x00,0x00,0x04,0x02,0x01,
N0x02,0x04,0x00,0x40,0x40,0x40,0x40,0x40,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,
N0x54,0x54,0x54,0x78,0x00,0x7F,0x48,0x44,
N0x44,0x38,0x00,0x38,0x44,0x44,0x44,0x20,
N0x00,0x30,0x48,0x48,0x50,0x7E,0x00,0x38,
N0x54,0x54,0x54,0x18,0x00,0x08,0x7E,0x09,
N0x01,0x02,0x00,0x08,0x54,0x54,0x54,0x3C,
N0x00,0x7F,0x10,0x08,0x08,0x70,0x00,0x00,
N0x44,0x7D,0x40,0x00,0x00,0x20,0x40,0x44,
N0x3D,0x00,0x00,0x7E,0x10,0x28,0x44,0x00,
N0x00,0x00,0x41,0x7F,0x40,0x00,0x00,0x7C,
N0x04,0x18,0x04,0x78,0x00,0x7C,0x08,0x04,
N0x04,0x78,0x00,0x38,0x44,0x44,0x44,0x38,
N0x00,0x7C,0x14,0x14,0x14,0x08,0x00,0x08,
N0x14,0x14,0x14,0x7C,0x00,0x7C,0x08,0x04,
N0x04,0x08,0x00,0x48,0x54,0x54,0x54,0x20,
N0x00,0x04,0x3F,0x44,0x40,0x20,0x00,0x3C,
N0x40,0x40,0x20,0x7C,0x00,0x1C,0x20,0x40,
N0x20,0x1C,0x00,0x3C,0x40,0x30,0x40,0x3C,
N0x00,0x44,0x28,0x10,0x28,0x44,0x00,0x0C,
N0x50,0x50,0x50,0x3C,0x00,0x44,0x64,0x54,
N0x4C,0x44,0x00,0x00,0x08,0x36,0x41,0x00,
N0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,
N0x41,0x36,0x08,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x04,0x06,0x07,
N0x06,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x08,0x1C,0x3E,
N0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x7F,0x3E,0x1C,0x08,0x00,0x08,0x18,
N0x38,0x18,0x08,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x1C,0x3E,0x3E,0x3E,0x1C,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x7C,0x55,0x54,0x45,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x06,0x09,0x09,0x06,0x00,0x00,
N0x24,0x2E,0x24,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x38,0x55,0x54,0x55,0x18,0x00,0x7C,
N0x10,0x20,0x7B,0x0B,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
N0x00,0x00,0x20,0x30,0x38,0x30,0x20,0x00,
N0x00,0x7E,0x11,0x11,0x11,0x7E,0x00,0x7F,
N0x49,0x49,0x49,0x31,0x00,0x7F,0x49,0x49,
N0x49,0x36,0x00,0x7F,0x01,0x01,0x01,0x03,
N0x00,0x60,0x3E,0x21,0x21,0x7F,0x00,0x7F,
N0x49,0x49,0x49,0x41,0x00,0x77,0x08,0x7F,
N0x08,0x77,0x00,0x41,0x49,0x49,0x49,0x36,
N0x00,0x7F,0x20,0x10,0x08,0x7F,0x00,0x7F,
N0x20,0x11,0x08,0x7F,0x00,0x7F,0x08,0x14,
N0x22,0x41,0x00,0x40,0x7E,0x01,0x01,0x7F,
N0x00,0x7F,0x02,0x0C,0x02,0x7F,0x00,0x7F,
N0x08,0x08,0x08,0x7F,0x00,0x3E,0x41,0x41,
N0x41,0x3E,0x00,0x7F,0x01,0x01,0x01,0x7F,
N0x00,0x7F,0x09,0x09,0x09,0x06,0x00,0x3E,
N0x41,0x41,0x41,0x22,0x00,0x01,0x01,0x7F,
N0x01,0x01,0x00,0x47,0x28,0x10,0x08,0x07,
N0x00,0x1C,0x22,0x7F,0x22,0x1C,0x00,0x63,
N0x14,0x08,0x14,0x63,0x00,0x7F,0x40,0x40,
N0x40,0xFF,0x00,0x07,0x08,0x08,0x08,0x7F,
N0x00,0x7F,0x40,0x7F,0x40,0x7F,0x00,0x7F,
N0x40,0x7F,0x40,0xFF,0x00,0x01,0x7F,0x48,
N0x48,0x70,0x00,0x7F,0x44,0x38,0x00,0x7F,
N0x00,0x7F,0x48,0x48,0x48,0x30,0x00,0x22,
N0x41,0x49,0x49,0x3E,0x00,0x7F,0x08,0x3E,
N0x41,0x3E,0x00,0x46,0x29,0x19,0x09,0x7F,
N0x00,0x20,0x54,0x54,0x54,0x78,0x00,0x3C,
N0x4A,0x4A,0x49,0x31,0x00,0x7C,0x54,0x54,
N0x28,0x00,0x00,0x7C,0x04,0x04,0x04,0x0C,
N0x00,0x60,0x38,0x24,0x24,0x7C,0x00,0x38,
N0x54,0x54,0x54,0x18,0x00,0x6C,0x10,0x7C,
N0x10,0x6C,0x00,0x44,0x44,0x54,0x54,0x28,
N0x00,0x7C,0x20,0x10,0x08,0x7C,0x00,0x7C,
N0x20,0x12,0x08,0x7C,0x00,0x7C,0x10,0x28,
N0x44,0x00,0x00,0x40,0x38,0x04,0x04,0x7C,
N0x00,0x7C,0x08,0x10,0x08,0x7C,0x00,0x7C,
N0x10,0x10,0x10,0x7C,0x00,0x38,0x44,0x44,
N0x44,0x38,0x00,0x7C,0x04,0x04,0x04,0x7C,
N0x00,0x7C,0x14,0x14,0x14,0x08,0x00,0x38,
N0x44,0x44,0x44,0x00,0x00,0x04,0x04,0x7C,
N0x04,0x04,0x00,0x0C,0x50,0x50,0x50,0x3C,
N0x00,0x18,0x24,0x7E,0x24,0x18,0x00,0x44,
N0x28,0x10,0x28,0x44,0x00,0x7C,0x40,0x40,
N0x40,0xFC,0x00,0x00,0x1C,0x10,0x10,0x7C,
N0x00,0x7C,0x40,0x7C,0x40,0x7C,0x00,0x7C,
N0x40,0x7C,0x40,0xFC,0x00,0x04,0x7C,0x50,
N0x50,0x20,0x00,0x7C,0x50,0x20,0x00,0x7C,
N0x00,0x7C,0x50,0x50,0x50,0x20,0x00,0x28,
N0x44,0x54,0x54,0x38,0x00,0x7C,0x10,0x38,
N0x44,0x38,0x00,0x08,0x54,0x34,0x14,0x7C};
L 23 "main.c" 2
N#include "25lc640.h"
L 1 "25lc640.h" 1
N
N#define LC640_CS 20
N#define CS_ON       LPC_GPIO0->FIODIR|=(1UL<<LC640_CS);LPC_GPIO0->FIOCLR|=(1UL<<LC640_CS);
N#define CS_OFF      LPC_GPIO0->FIODIR|=(1UL<<LC640_CS);LPC_GPIO0->FIOSET|=(1UL<<LC640_CS);
N
N
N
N
N
N
N
N
Nchar spi1(char in);
Nvoid spi1_config(void);
Nvoid spi1_config_mcp2515(void);
Nvoid spi1_unconfig(void);
Nvoid lc640_wren(void);
Nchar lc640_rdsr(void);
Nint lc640_read(int ADR);
Nint lc640_read_int(int ADR);
Nlong lc640_read_long(int ADR);
Nvoid lc640_read_long_ptr(int ADR,char* out_ptr);
Nvoid lc640_read_str(int ADR, char* ram_ptr, char num);
Nchar lc640_write(int ADR,char in);
Nchar lc640_write_int(short ADR,short in);
Nchar lc640_write_long(int ADR,long in);
Nchar lc640_write_long_ptr(int ADR,char* in);
L 24 "main.c" 2
N#include "Timer.h"
L 1 "Timer.h" 1
N/*****************************************************************************
N *   timer.h:  Header file for NXP LPC17xx Family Microprocessors
N *
N *   Copyright(C) 2009, NXP Semiconductor
N *   All rights reserved.
N *
N *   History
N *   2009.05.26  ver 1.00    Prelimnary version, first Release
N *
N******************************************************************************/
N#ifndef __TIMER_H 
N#define __TIMER_H
N
N	
N#define TIME_INTERVAL	(9000000/100 - 1)
N
Nextern void delayMs(uint8_t timer_num, uint32_t delayInMs);
Nextern uint32_t init_timer( uint8_t timer_num, uint32_t timerInterval );
Nextern void enable_timer( uint8_t timer_num );
Nextern void disable_timer( uint8_t timer_num );
Nextern void reset_timer( uint8_t timer_num );
Nextern void TIMER0_IRQHandler (void);
Nextern void TIMER1_IRQHandler (void);
N
N#endif /* end __TIMER_H */
N/*****************************************************************************
N**                            End Of File
N******************************************************************************/
L 25 "main.c" 2
N#include "gran.h"
L 1 "gran.h" 1
N
Nvoid gran_ring_char(signed char *adr, signed char min, signed char max) ;
Nvoid gran_char(signed char *adr, signed char min, signed char max);
Nvoid gran(signed short *adr, signed short min, signed short max);
Nvoid gran_ring(signed short *adr, signed short min, signed short max);
Nvoid gran_long(signed long *adr, signed long min, signed long max); 
L 26 "main.c" 2
N//#include "uart0.h"
N//#include "uart1.h"
N//#include "uart2.h"
N#include "cmd.h"
L 1 "cmd.h" 1
N//-----------------------------------------------
N// Символы передач
N#define REGU 0xf5
N#define REGI 0xf6
N#define GetTemp 0xfc
N#define TVOL0 0x75
N#define TVOL1 0x76
N#define TVOL2 0x77
N#define TVOL3 0x78
N#define TVOL4 0x79
N#define TVOL5 0x7A
N#define TVOL6 0x7A
N#define TVOL7 0x7A
N#define TTEMPER	0x7c
N#define CSTART  0x1a
N#define CMND	0x16
N#define Blok_flip	0x57
N#define END 	0x0A
N#define QWEST	0x25
N#define IM	0x52
N#define ADD_KF 0x60
N#define SUB_KF 0x61
N#define Zero_kf0 0x63
N#define Zero_kf2 0x64
N#define MEM_KF 0x62
N#define BLKON 0x80
N#define BLKOFF 0x81
N#define Put_reg 0x90
N#define PUTID 0x91
N#define PUTTM1 0xDA
N#define PUTTM2 0xDB
N#define PUTTM3 0xDC
N#define PUTTM1INV2 0xDD
N#define PUTTM2INV2 0xDE
N#define PUTTM3INV2 0xDf
N#define PUTTM_NET 0xEA
N#define PUTTM_NET1 0xEB
N#define PUTTM_IBATMETER 0xD1
N#define GETTM_IBATMETER 0x1d
N#define PUTTM 0xDE
N#define GETTM 0xED 
N#define GETTM_INV 0xFD 
N#define GET_MAKB 0xE1 
N#define PUTTM_MAKB1		0xE2
N#define PUTTM_MAKB2		0xE3
N#define PUTTM_MAKB3		0xE4
N#define KLBR 0xEE
N#define KLBR_MAKB 0xEF
N#define MEM_KF 0x62 
N#define MEM_KF1 0x26
N#define ALRM_RES 0x63
N#define VENT_RES 0x64
N#define PUTTM1BYPS 0xD8
N#define PUTTM2BYPS 0xD9
N#define PUT_LB_TM1 	0x18
N#define PUT_LB_TM2 	0x78
N#define PUT_LB_TM3 	0x38
N#define PUT_LB_TM4 	0x48
N#define PUT_LB_TM5 	0x58
N#define PUT_LB_TM6 	0x68
N#define PUT_ZTT_TM1 	0xC1
N#define PUT_ZTT_TM2 	0xC2
N#define PUT_ZTT_TM3 	0xC3
N#define PUT_ZTT_TM4 	0xC4
N#define PUT_ZTT_TM5 	0xC5
N#define PUT_ZTT_TM6 	0xC6
N#define PUT_ZTT_TM7 	0xC7
N#define PUT_ZTT_TM8 	0xC8
L 30 "main.c" 2
N#include "ret.h"
L 1 "ret.h" 1
N#ifndef _RET_H_
N
N#define _RET_H_
N
Nextern char retind,retsub,retindsec;
Nextern int retcnt,retcntsec;
Nextern unsigned char f0,fc0,f1,fc1;
Nextern short ret_duty;
N
Nvoid ret_ind(char r_i,char r_s);
Nvoid ret_ind_hndl(void);
Nvoid ret_ind_sec(char r_i,int r_c);
Nvoid ret_ind_sec_hndl(void);
Nvoid ret(short duty);
Nvoid ret_hndl(void);
N
N#endif
N
N
N//
N
N
N
N 
N
N     
L 31 "main.c" 2
N#include "eeprom_map.h"
L 1 "eeprom_map.h" 1
N
N#define EE_CAN_RESET_CNT	0x06
N#define RESET_CNT	0x08
N
N#define SECTOR_KOEF 0x10
N
N#define EE_KUBAT1		SECTOR_KOEF
N#define EE_KUBAT2		SECTOR_KOEF+2
N#define EE_KI0BAT1		SECTOR_KOEF+4
N#define EE_KI0BAT2		SECTOR_KOEF+6
N#define EE_KI1BAT1		SECTOR_KOEF+8
N#define EE_KI1BAT2		SECTOR_KOEF+10
N#define EE_KTBAT1		SECTOR_KOEF+12
N#define EE_KTBAT2		SECTOR_KOEF+14
N#define EE_KUNET       	SECTOR_KOEF+16
N#define EE_KFNET       	SECTOR_KOEF+18
N#define EE_KULOAD       	SECTOR_KOEF+20
N#define  EE_KUNET_EXT0   SECTOR_KOEF+22
N#define  EE_KUNET_EXT1   SECTOR_KOEF+24
N#define  EE_KUNET_EXT2   SECTOR_KOEF+26
N#define EE_KUBATM1		SECTOR_KOEF+28
N#define EE_KUBATM2		SECTOR_KOEF+30
N#define EE_KVV0_EB2		SECTOR_KOEF+32
N#define EE_KVV1_EB2		SECTOR_KOEF+34
N#define EE_KVV2_EB2		SECTOR_KOEF+36
N#define EE_KPES0_EB2	SECTOR_KOEF+38
N#define EE_KPES1_EB2	SECTOR_KOEF+40
N#define EE_KPES2_EB2	SECTOR_KOEF+42
N#define EE_KUNETA      	SECTOR_KOEF+44
N#define EE_KUNETB      	SECTOR_KOEF+46
N#define EE_KUNETC      	SECTOR_KOEF+48
N#define EE_KUBPS      	SECTOR_KOEF+50
N#define EE_KUOUT      	SECTOR_KOEF+52
N#define EE_KUVD      	SECTOR_KOEF+54
N
N#define SECTOR_SETS 	SECTOR_KOEF+100
N
N#define EE_MAIN_IST 	SECTOR_SETS+2
N#define EE_UMAX    		SECTOR_SETS+4
N#define EE_UOUT    		SECTOR_SETS+6
N#define EE_UAVT    		SECTOR_SETS+8
N#define EE_TMAX			SECTOR_SETS+10
N#define EE_AV_OFF_AVT   SECTOR_SETS+12
N#define EE_USIGN		SECTOR_SETS+14
N#define EE_UMN			SECTOR_SETS+16
N#define EE_ZV_ON		SECTOR_SETS+18
N#define EE_IKB			SECTOR_SETS+20
N#define EE_KVZ			SECTOR_SETS+22
N#define EE_IMAX		SECTOR_SETS+24
N#define EE_IMIN		SECTOR_SETS+26
N#define EE_APV_ON		SECTOR_SETS+28
N#define EE_IZMAX		SECTOR_SETS+30
N#define EE_U0B			SECTOR_SETS+32
N#define EE_TZAS		SECTOR_SETS+34
N#define EE_NUMIST  		SECTOR_SETS+36
N#define EE_NUMINV  		SECTOR_SETS+38
N#define KI0SRC1     	SECTOR_SETS+40
N#define KI0SRC2     	SECTOR_SETS+42
N#define EE_APV_ON1  	SECTOR_SETS+44
N#define EE_APV_ON2  	SECTOR_SETS+46
N#define EE_APV_ON2_TIME  SECTOR_SETS+48
N#define KT_EXT0		SECTOR_SETS+50
N#define KT_EXT1		SECTOR_SETS+52
N#define KT_EXT2		SECTOR_SETS+54
N#define EE_AVZ_TIME		SECTOR_SETS+56
N#define EE_HOUR_AVZ		SECTOR_SETS+58	
N#define EE_MIN_AVZ  	SECTOR_SETS+60
N#define EE_SEC_AVZ  	SECTOR_SETS+62
N#define EE_DATE_AVZ 	SECTOR_SETS+64
N#define EE_MONTH_AVZ	SECTOR_SETS+66
N#define EE_YEAR_AVZ 	SECTOR_SETS+68
N#define EE_AVZ			SECTOR_SETS+70
N#define EE_MNEMO_ON 	SECTOR_SETS+72
N#define EE_MNEMO_TIME 	SECTOR_SETS+74
N#define EE_VZ_HR		SECTOR_SETS+76
N#define EE_TBAT          SECTOR_SETS+78
N#define EE_U_AVT         SECTOR_SETS+80
N#define EE_TSIGN		SECTOR_SETS+82
N#define EE_DU			SECTOR_SETS+84
N#define EE_PAR			SECTOR_SETS+86
N#define EE_TBATMAX		SECTOR_SETS+88
N#define EE_TBATSIGN		SECTOR_SETS+90
N#define EE_TBOXMAX		SECTOR_SETS+92
N#define EE_TBOXREG		SECTOR_SETS+94
N#define EE_TBOXVENTMAX	SECTOR_SETS+96
N#define EE_TLOADDISABLE	SECTOR_SETS+98
N#define EE_TLOADENABLE	SECTOR_SETS+100
N#define EE_TBATDISABLE	SECTOR_SETS+102
N#define EE_TBATENABLE	SECTOR_SETS+104
N#define EE_TSYSMAX		SECTOR_SETS+106
N#define EE_RELE_VENT_LOGIC	SECTOR_SETS+108
N#define EE_TVENTON		SECTOR_SETS+110
N#define EE_TVENTOFF	SECTOR_SETS+112	
N#define EE_RELEVENTSIGN	 SECTOR_SETS+114
N#define EE_NPN_OUT	 SECTOR_SETS+116
N#define EE_NPN_SIGN	 SECTOR_SETS+118
N#define EE_UONPN	 SECTOR_SETS+120
N#define EE_UVNPN	 SECTOR_SETS+122
N#define EE_TZNPN	 SECTOR_SETS+124
N#define EE_TERMOKOMP	 	SECTOR_SETS+126
N#define EE_TBOXVENTON	 	SECTOR_SETS+128
N#define EE_TBOXVENTOFF	 	SECTOR_SETS+130
N#define EE_TBOXWARMON	 	SECTOR_SETS+132 
N#define EE_TBOXWARMOFF	 	SECTOR_SETS+134
N#define EE_NUMBYPASS	 	SECTOR_SETS+136
N#define EE_TWARMON			SECTOR_SETS+138
N#define EE_TWARMOFF			SECTOR_SETS+140
N#define EE_BAT_TYPE			SECTOR_SETS+142
N#define EE_UINMAX			SECTOR_SETS+144
N#define EE_UINMIN			SECTOR_SETS+146
N#define EE_UOUTMAX			SECTOR_SETS+148
N#define EE_UOUTMIN			SECTOR_SETS+150
N#define EE_TELECORE2015_KLIMAT_WARM_SIGNAL	SECTOR_SETS+144
N#define EE_TELECORE2015_KLIMAT_WARM_ON		SECTOR_SETS+146
N#define EE_TELECORE2015_KLIMAT_WARM_OFF		SECTOR_SETS+148
N#define EE_TELECORE2015_KLIMAT_CAP			SECTOR_SETS+150
N#define EE_TELECORE2015_KLIMAT_VENT_ON		SECTOR_SETS+152
N#define EE_TELECORE2015_KLIMAT_VENT_OFF		SECTOR_SETS+154
N#define EE_TELECORE2015_KLIMAT_VVENT_ON		SECTOR_SETS+156
N#define EE_TELECORE2015_KLIMAT_VVENT_OFF	SECTOR_SETS+158
N#define EE_TELECORE2015_KLIMAT_VENT_SIGNAL	SECTOR_SETS+160
N#define EE_SPEED_CHRG_CURR		 			SECTOR_SETS+162
N#define EE_SPEED_CHRG_VOLT		 			SECTOR_SETS+164
N#define EE_SPEED_CHRG_TIME					SECTOR_SETS+166
N#define EE_SPEED_CHRG_AVT_EN				SECTOR_SETS+168	
N#define EE_SPEED_CHRG_D_U					SECTOR_SETS+170
N#define EE_SPEED_CHRG_BLOCK_SRC				SECTOR_SETS+172
N#define EE_SPEED_CHRG_BLOCK_LOG				SECTOR_SETS+174
N#define EE_DU_LI_BAT						SECTOR_SETS+176
N#define EE_FORVARDBPSCHHOUR					SECTOR_SETS+178
N#define EE_FORVBPSHOURCNT					SECTOR_SETS+180
N#define EE_U_OUT_KONTR_MAX					SECTOR_SETS+182
N#define EE_U_OUT_KONTR_MIN					SECTOR_SETS+184
N#define EE_U_OUT_KONTR_DELAY				SECTOR_SETS+186
N#define EE_DOP_RELE_FUNC					SECTOR_SETS+188
N#define EE_IPS_BLOCK_SRC			   		SECTOR_SETS+190
N#define EE_IPS_BLOCK_LOG					SECTOR_SETS+192
N#define EE_NUMBAT_TELECORE					SECTOR_SETS+194
N#define EE_CNTRL_HNDL_TIME					SECTOR_SETS+196
N#define EE_USODERG_LI_BAT					SECTOR_SETS+198
N#define EE_TELECORE2017_KLIMAT_WARM_SIGNAL	EE_TELECORE2015_KLIMAT_WARM_SIGNAL
N#define EE_TELECORE2017_KLIMAT_VENT_SIGNAL	EE_TELECORE2015_KLIMAT_VENT_SIGNAL
N#define EE_TELECORE2017_KLIMAT_WARM_ON		EE_TELECORE2015_KLIMAT_WARM_ON
N#define EE_TELECORE2017_KLIMAT_WARM_OFF		EE_TELECORE2015_KLIMAT_WARM_OFF
N#define EE_TELECORE2017_KLIMAT_CAP			EE_TELECORE2015_KLIMAT_CAP
N#define EE_TELECORE2017_KLIMAT_VENT_ON0		SECTOR_SETS+200
N#define EE_TELECORE2017_KLIMAT_VENT_ON20	SECTOR_SETS+202
N#define EE_TELECORE2017_KLIMAT_VENT_ON40	SECTOR_SETS+204
N#define EE_TELECORE2017_KLIMAT_VENT_ON60	SECTOR_SETS+206
N#define EE_TELECORE2017_KLIMAT_VENT_ON80	SECTOR_SETS+208
N#define EE_TELECORE2017_KLIMAT_VENT_ON100	SECTOR_SETS+210
N#define EE_TELECORE2017_KLIMAT_DVENT_ON0	SECTOR_SETS+212
N#define EE_TELECORE2017_KLIMAT_DVENT_ON20	SECTOR_SETS+214
N#define EE_RELE_SET_MASK0					SECTOR_SETS+216
N#define EE_RELE_SET_MASK1					SECTOR_SETS+218
N#define EE_RELE_SET_MASK2					SECTOR_SETS+220
N#define EE_RELE_SET_MASK3					SECTOR_SETS+222
N#define EE_AUSW_MAIN 						SECTOR_SETS+224
N#define EE_AUSW_MAIN_NUMBER 				SECTOR_SETS+226 
N#define EE_AUSW_UKU_NUMBER					SECTOR_SETS+228
N
N#ifdef UKU_TELECORE2017
S#define EE_TELECORE2017_ULINECC			EE_UB0
S#define EE_TELECORE2017_Q				EE_MAIN_IST	
S#define EE_TELECORE2017_IZMAX1			EE_DU_LI_BAT
S#define EE_TELECORE2017_IZMAX2			EE_MNEMO_ON
S#define EE_TELECORE2017_K1				EE_UB20
S#define EE_TELECORE2017_K2				EE_KVZ	
S#define EE_TELECORE2017_K3				EE_IZMAX
S#define EE_TELECORE2017_T4				EE_NUMINV
N#endif
N
N#define SECTOR_AUSW  		SECTOR_KOEF+300
N
N
N
N/*#define EE_AUSW_UKU 		SECTOR_AUSW+4 
N#define EE_AUSW_UKU_SUB 		SECTOR_AUSW+6*/
N
N/*#define EE_AUSW_DAY			SECTOR_AUSW+10
N#define EE_AUSW_MONTH		SECTOR_AUSW+12
N#define EE_AUSW_YEAR		SECTOR_AUSW+14
N#define EE_AUSW_BPS1_NUMBER	SECTOR_AUSW+16		
N#define EE_AUSW_BPS2_NUMBER	SECTOR_AUSW+18
N#define EE_AUSW_RS232		SECTOR_AUSW+20
N#define EE_AUSW_PDH			SECTOR_AUSW+22
N#define EE_AUSW_SDH			SECTOR_AUSW+24
N#define EE_AUSW_ETH			SECTOR_AUSW+26 */
N
N#define SECTOR_SETS2  					SECTOR_KOEF+350
N#define EE_QSODERG_LI_BAT				SECTOR_SETS2
N#define EE_TVENTMAX						SECTOR_SETS2+2
N#define EE_ICA_CH 						SECTOR_SETS2+4
N#define EE_ICA_EN						SECTOR_SETS2+6
N#define EE_ICA_MODBUS_ADDRESS			SECTOR_SETS2+8
N#define EE_ICA_MODBUS_TCP_IP1			SECTOR_SETS2+10
N#define EE_ICA_MODBUS_TCP_IP2			SECTOR_SETS2+12
N#define EE_ICA_MODBUS_TCP_IP3			SECTOR_SETS2+14
N#define EE_ICA_MODBUS_TCP_IP4			SECTOR_SETS2+16
N#define EE_ICA_MODBUS_TCP_UNIT_ID		SECTOR_SETS2+18
N#define EE_PWM_START					SECTOR_SETS2+20
N#define EE_KB_ALGORITM					SECTOR_SETS2+22
N#define EE_REG_SPEED					SECTOR_SETS2+24
N
N#define SECTOR_BAT  		SECTOR_KOEF+400
N
N#define EE_BAT1_IS_ON         SECTOR_BAT
N#define EE_BAT1_DAY_OF_ON     SECTOR_BAT+2
N#define EE_BAT1_MONTH_OF_ON   SECTOR_BAT+4
N#define EE_BAT1_YEAR_OF_ON    SECTOR_BAT+6
N#define EE_BAT1_C_REAL        SECTOR_BAT+8
N#define EE_BAT1_RESURS        SECTOR_BAT+10
N#define EE_BAT1_ZAR_CNT      	SECTOR_BAT+12
N#define EE_BAT1_ZAR_CNT_KE   	SECTOR_BAT+14
N#define EE_BAT1_C_NOM         SECTOR_BAT+16
N
N
N#define EE_BAT2_IS_ON         SECTOR_BAT+30
N#define EE_BAT2_DAY_OF_ON     SECTOR_BAT+32
N#define EE_BAT2_MONTH_OF_ON   SECTOR_BAT+34
N#define EE_BAT2_YEAR_OF_ON    SECTOR_BAT+36
N#define EE_BAT2_C_REAL        SECTOR_BAT+38
N#define EE_BAT2_RESURS        SECTOR_BAT+40
N#define EE_BAT2_ZAR_CNT       SECTOR_BAT+42
N#define EE_BAT2_ZAR_CNT_KE    SECTOR_BAT+44
N#define EE_BAT2_C_NOM         SECTOR_BAT+48
N
N
N
N#define SECTOR_SPC	  		SECTOR_KOEF+480
N#define EE_SPC_STAT			SECTOR_SPC
N#define EE_VZ_CNT			SECTOR_SPC+2
N#define EE_SPC_BAT			SECTOR_SPC+4
N#define EE_SPC_PHASE		SECTOR_SPC+6
N#define EE_SPC_KE_DATE0		SECTOR_SPC+8
N#define EE_SPC_KE_DATE1		SECTOR_SPC+12
N#define EE_SPC_VZ_LENGT		SECTOR_SPC+14
N
N//#define KOEF_LONG	30
N
N#define SECTOR_EXT  		SECTOR_KOEF+500
N#define EE_TMAX_EXT_EN0		SECTOR_EXT
N#define EE_TMAX_EXT0		SECTOR_EXT+2
N#define EE_TMIN_EXT_EN0		SECTOR_EXT+4
N#define EE_TMIN_EXT0		SECTOR_EXT+6
N#define EE_T_EXT_REL_EN0		SECTOR_EXT+8
N#define EE_T_EXT_ZVUK_EN0	SECTOR_EXT+10
N#define EE_T_EXT_LCD_EN0		SECTOR_EXT+12
N#define EE_T_EXT_RS_EN0		SECTOR_EXT+14
N#define EE_TMAX_EXT_EN1		SECTOR_EXT+16
N#define EE_TMAX_EXT1		SECTOR_EXT+18
N#define EE_TMIN_EXT_EN1		SECTOR_EXT+20
N#define EE_TMIN_EXT1		SECTOR_EXT+22
N#define EE_T_EXT_REL_EN1		SECTOR_EXT+24
N#define EE_T_EXT_ZVUK_EN1	SECTOR_EXT+26
N#define EE_T_EXT_LCD_EN1		SECTOR_EXT+28
N#define EE_T_EXT_RS_EN1		SECTOR_EXT+30
N#define EE_TMAX_EXT_EN2		SECTOR_EXT+32
N#define EE_TMAX_EXT2		SECTOR_EXT+34
N#define EE_TMIN_EXT_EN2		SECTOR_EXT+36
N#define EE_TMIN_EXT2		SECTOR_EXT+38
N#define EE_T_EXT_REL_EN2		SECTOR_EXT+40
N#define EE_T_EXT_ZVUK_EN2	SECTOR_EXT+42
N#define EE_T_EXT_LCD_EN2		SECTOR_EXT+44
N#define EE_T_EXT_RS_EN2		SECTOR_EXT+46
N#define EE_SK_SIGN0			SECTOR_EXT+48
N#define EE_SK_REL_EN0		SECTOR_EXT+50
N#define EE_SK_ZVUK_EN0		SECTOR_EXT+52
N#define EE_SK_LCD_EN0		SECTOR_EXT+54
N#define EE_SK_RS_EN0		SECTOR_EXT+56
N#define EE_SK_SIGN1			SECTOR_EXT+58
N#define EE_SK_REL_EN1		SECTOR_EXT+60
N#define EE_SK_ZVUK_EN1		SECTOR_EXT+62
N#define EE_SK_LCD_EN1		SECTOR_EXT+64
N#define EE_SK_RS_EN1		SECTOR_EXT+66
N#define EE_SK_SIGN2			SECTOR_EXT+68
N#define EE_SK_REL_EN2		SECTOR_EXT+70
N#define EE_SK_ZVUK_EN2		SECTOR_EXT+72
N#define EE_SK_LCD_EN2		SECTOR_EXT+74
N#define EE_SK_RS_EN2		SECTOR_EXT+76
N#define EE_SK_SIGN3			SECTOR_EXT+78
N#define EE_SK_REL_EN3		SECTOR_EXT+80
N#define EE_SK_ZVUK_EN3		SECTOR_EXT+82
N#define EE_SK_LCD_EN3		SECTOR_EXT+84
N#define EE_SK_RS_EN3		SECTOR_EXT+86
N#define EE_NUMSK			SECTOR_EXT+88
N#define EE_NUMDT			SECTOR_EXT+90
N#define EE_POS_VENT			SECTOR_EXT+92
N#define EE_POWER_CNT_ADRESS   SECTOR_EXT+94
N#define EE_UBM_AV             SECTOR_EXT+96
N#define EE_NUMAVT			SECTOR_EXT+98
N#define EE_NUMMAKB			SECTOR_EXT+100
N#define EE_RELE_LOG			SECTOR_EXT+102
N
N
N#define SECTOR_ETH  		SECTOR_EXT+200
N#define EE_ETH_IS_ON		SECTOR_ETH
N#define EE_ETH_DHCP_ON		SECTOR_ETH+2
N#define EE_ETH_IP_1			SECTOR_ETH+4
N#define EE_ETH_IP_2			SECTOR_ETH+6
N#define EE_ETH_IP_3			SECTOR_ETH+8
N#define EE_ETH_IP_4			SECTOR_ETH+10
N#define EE_ETH_MASK_1		SECTOR_ETH+12
N#define EE_ETH_MASK_2		SECTOR_ETH+14
N#define EE_ETH_MASK_3		SECTOR_ETH+16
N#define EE_ETH_MASK_4		SECTOR_ETH+18
N#define EE_ETH_TRAP1_IP_1	SECTOR_ETH+20
N#define EE_ETH_TRAP1_IP_2	SECTOR_ETH+22
N#define EE_ETH_TRAP1_IP_3	SECTOR_ETH+24
N#define EE_ETH_TRAP1_IP_4	SECTOR_ETH+26
N#define EE_ETH_TRAP2_IP_1	SECTOR_ETH+28
N#define EE_ETH_TRAP2_IP_2	SECTOR_ETH+30
N#define EE_ETH_TRAP2_IP_3	SECTOR_ETH+32
N#define EE_ETH_TRAP2_IP_4	SECTOR_ETH+34
N#define EE_ETH_TRAP3_IP_1	SECTOR_ETH+36
N#define EE_ETH_TRAP3_IP_2	SECTOR_ETH+38
N#define EE_ETH_TRAP3_IP_3	SECTOR_ETH+40
N#define EE_ETH_TRAP3_IP_4	SECTOR_ETH+42
N#define EE_ETH_TRAP4_IP_1	SECTOR_ETH+44
N#define EE_ETH_TRAP4_IP_2	SECTOR_ETH+46
N#define EE_ETH_TRAP4_IP_3	SECTOR_ETH+48
N#define EE_ETH_TRAP4_IP_4	SECTOR_ETH+50
N#define EE_ETH_TRAP5_IP_1	SECTOR_ETH+52
N#define EE_ETH_TRAP5_IP_2	SECTOR_ETH+54
N#define EE_ETH_TRAP5_IP_3	SECTOR_ETH+56
N#define EE_ETH_TRAP5_IP_4	SECTOR_ETH+58
N#define EE_ETH_SNMP_PORT_READ	SECTOR_ETH+60
N#define EE_ETH_SNMP_PORT_WRITE	SECTOR_ETH+62
N#define EE_ETH_GW_1			SECTOR_ETH+64
N#define EE_ETH_GW_2			SECTOR_ETH+66
N#define EE_ETH_GW_3			SECTOR_ETH+68
N#define EE_ETH_GW_4			SECTOR_ETH+70
N#define EE_MODBUS_ADRESS		SECTOR_ETH+72
N#define EE_MODBUS_BAUDRATE	SECTOR_ETH+74
N#define EE_BAT_LINK			SECTOR_ETH+76
N#define EE_I_LOAD_MODE		SECTOR_SETS+78
N
N
N#define SECTOR_LOCATION  	SECTOR_ETH+200
N#define EE_LOCATION			SECTOR_LOCATION
N#define SECTOR_COMMUNITY  	SECTOR_ETH+270
N#define EE_COMMUNITY		SECTOR_COMMUNITY
N
N
N#define KE_PTR			996
N#define KE_CNT			998
N#define UNET_AVAR_PTR	1000
N#define UNET_AVAR_CNT	1002
N#define SRC1_AVAR_PTR	1004
N#define SRC1_AVAR_CNT	1006
N#define SRC2_AVAR_PTR	1008
N#define SRC2_AVAR_CNT	1010
N#define BAT_AVAR_PTR	1012
N#define BAT_AVAR_CNT	1014
N#define VZ_PTR			1016
N#define VZ_CNT			1018
N#define WRK_PTR		1020
N#define WRK_CNT		1022
N
N
N#define EVENT_LOG	1024 
N//массив данных журнала событий 32*64=2048
N// Структура данных журнала событий:
N// Байт 0 - род устройства:
N//					'B' - батарея
N//					'S' - бпсы
N//					'P' - питающая сеть
N//					'I' - инверторы
N//					'U' - УКУ
N//					'T' - Внешний датчик температуры
N//					'L' - Внешний логический вход
N// Байт 1 - порядковый номер устройства(начинается с нуля)
N// Байт 2 - род события:
N//					'A' - авария (для питающей сети) 
N//					'L' - авария связи (для БПСов и инверторов)
N//					'C' - авария отсутствия(для батареи и БПСов) 
N//					'U' - авария завышенного напряжения (для БПСов и инверторов) 
N//					'u' - авария заниженного напряжения (для БПСов и инверторов) 
N//					'T' - авария по температуре (для БПСов и инверторов) 
N//					'R' - перезагрузка или включение, только для УКУ
N// Байт 3 - год возникновения события
N// Байт 4 - месяц возникновения события
N// Байт 5 - день возникновения события
N// Байт 6 - час возникновения события
N// Байт 7 - минута возникновения события
N// Байт 8 - секунда возникновения события
N
N#define PTR_EVENT_LOG	EVENT_LOG+1024+512+1024 
N// указатель на события(показывает на последнее записанное) 
N#define CNT_EVENT_LOG	PTR_EVENT_LOG+2 
N// колличество событий (не более 64) 
N// массив данных аварий сети {(8*64)+(2*64)}
N// Структура данных аварий сети:
N// при возникновении аварии записывается 
N// первые 4 байта с полным временем возникновения аварии
N// другие 4 байта полностью обнуляются, при пропадании аварии  в них записывается
N// полное время устранения и в 2 байта данных записывается минимальное напряжение 
N// во время аварии.
N
N#define SRC1_AVAR	1664
N#define SRC1_AVAR_DAT	2176  
N// массив данных аварий источника №1 {(8*64)+(4*64)}
N// Структура данных аварий источника №1:
N// при возникновении аварии записывается 
N// первые 4 байта с полным временем возникновения аварии
N// другие 4 байта полностью обнуляются, при пропадании аварии  в них записывается
N// полное время устранения и в 4 байта данных записывается : 
N// 1 байт - вид аварии(0x55 - занижено напряжение,
N//                     0x66 - завышено напряжение,
N//                     0x77 - перегрев источника)
N
N#define SRC2_AVAR	2432
N#define SRC2_AVAR_DAT	2944  
N// массив данных аварий источника №1 {(8*64)+(4*64)}
N// Структура данных аварий источника №1:
N// при возникновении аварии записывается 
N// первые 4 байта с полным временем возникновения аварии
N// другие 4 байта полностью обнуляются, при пропадании аварии  в них записывается
N// полное время устранения и в 4 байта данных записывается : 
N// 1 байт - вид аварии(0x55 - занижено напряжение,
N//                     0x66 - завышено напряжение,
N//                     0x77 - перегрев источника)
N
N#define BAT_AVAR	3200
N#define BAT_AVAR_DAT	3712  
N// массив данных аварий батареи {(8*64)+(4*64)}
N// Структура данных аварий источника №1:
N// при возникновении аварии записывается 
N// первые 4 байта с полным временем возникновения аварии
N// другие 4 байта полностью обнуляются, при пропадании аварии  в них записывается
N// полное время устранения и в 4 байта данных записывается : 
N// 1 байт - вид аварии(0x55 - занижено напряжение,
N//                     0x66 - завышено напряжение,
N//                     0x77 - перегрев источника)
N
N#define VZ	3968
N#define VZ_L	4224  
N// массив данных выравнивающих зарядов {(4*64)+(2*64)}
N// Структура данных ыравнивающих зарядов:
N// при завершении процесса записывается 
N// первые 4 байта с полным временем завершения процесса
N// и в 2 байта данных записывается длительность процесса в часах 
N
N#define WRK	4352
N#define WRK_AH	5376  
N// массив данных разрядов батареи {(8*128)+(2*128)}
N// Структура данных разрядов батареи:
N// при завершении процесса записывается 
N// первые 4 байта с полным временем начала процесса
N// затем 4 байта с полным временем завершения процесса
N// и в 2 байта данных записывается колличество отданных амперчасов 
N
N#define KE	5632
N#define KE_AH	6144  
N// массив данных разрядов батареи {(8*64)+(2*64)}
N// Структура данных разрядов батареи:
N// при завершении процесса записывается 
N// первые 4 байта с полным временем начала процесса
N// затем 4 байта с полным временем завершения процесса
N// и в 2 байта данных записывается колличество отданных амперчасов 
N
Nextern const unsigned short ADR_EE_BAT_ZAR_CNT[2];
Nextern const unsigned short ADR_EE_BAT_ZAR_CNT_KE[2];
Nextern const unsigned short ADR_EE_BAT_C_NOM[2];
Nextern const unsigned short ADR_EE_BAT_YEAR_OF_ON[2];
Nextern const unsigned short ADR_EE_BAT_IS_ON[2];
Nextern const unsigned short ADR_EE_BAT_DAY_OF_ON[2];
Nextern const unsigned short ADR_EE_BAT_MONTH_OF_ON[2];
Nextern const unsigned short ADR_EE_BAT_RESURS[2];
Nextern const unsigned short ADR_EE_BAT_C_REAL[2];
Nextern const unsigned short ADR_EE_BAT_TYPE[2];
Nextern const unsigned short ADR_KUBAT[2];
Nextern const unsigned short ADR_KUBATM[2];
Nextern const unsigned short ADR_KI0BAT[2];
Nextern const unsigned short ADR_KI1BAT[2];
Nextern const unsigned short ADR_KTBAT[2];
Nextern const unsigned short ADR_EE_BAT_TYPE[2];
N
N
Nextern const unsigned short ADR_TMAX_EXT_EN[3];
Nextern const unsigned short ADR_TMAX_EXT[3];
Nextern const unsigned short ADR_TMIN_EXT_EN[3];
Nextern const unsigned short ADR_TMIN_EXT[3];
Nextern const unsigned short ADR_T_EXT_REL_EN[3];
Nextern const unsigned short ADR_T_EXT_ZVUK_EN[3];
Nextern const unsigned short ADR_T_EXT_LCD_EN[3];
Nextern const unsigned short ADR_T_EXT_RS_EN[3];
N
Nextern const unsigned short ADR_SK_SIGN[4];
Nextern const unsigned short ADR_SK_REL_EN[4];
Nextern const unsigned short ADR_SK_ZVUK_EN[4];
Nextern const unsigned short ADR_SK_LCD_EN[4];
Nextern const unsigned short ADR_SK_RS_EN[4];
N
Nextern const unsigned short ADR_EE_RELE_SET_MASK[4];
N
L 32 "main.c" 2
N#include "common_func.h"
L 1 "common_func.h" 1
N#ifndef _COMMON_FUNC_H_
N
N#define _COMMON_FUNC_H_
N
Nsigned short abs(signed short in);
Nvoid clr_scrn(void);
Nchar find(char xy);
Nvoid bin2bcd_int(unsigned int in);
Nvoid bcd2lcd_zero(char sig);
Nvoid int2lcd_m(signed short in,char xy,char des);
Nvoid int2lcd_mm(signed short in,char xy,char des);
Nvoid int2lcd_mmm(signed short in,char xy,char des);
Nvoid long2lcd_mmm(signed long in,char xy,char des);
Nvoid long2lcdyx_mmm(signed long in,char y,char x,char des);
Nvoid int2lcdyx(unsigned short in,char y,char x,char des);
Nvoid int2lcd(unsigned short in,char xy,char des);
Nvoid checkboxing(char xy,short in);
Nvoid long2lcdhyx(unsigned long in,char y,char x);
Nvoid char2lcdh(char in,char yx);
Nvoid char2lcdhyx(char in,char y,char x);
Nvoid int2lcdhyx(unsigned short in,char y,char x);
Nvoid char2lcdbyx(char in,char y,char x);
Nvoid pointer_set(char num_of_first_row);
Nvoid tree_down(signed char offset_ind,signed char offset_sub_ind);
Nvoid tree_up(char tind, char tsub_ind, char tindex_set, char tsub_ind1);
Nvoid bgnd_par(char const *ptr0,char const *ptr1,char const *ptr2,char const *ptr3);
Nvoid sub_bgnd(char const *adr,char xy,signed char offset);
Nvoid show_mess(char* p1, char* p2, char* p3, char* p4,int m_sec);
Nvoid event2ind(char num, char simbol);
Nchar ptr_carry(signed int in,unsigned char modul,signed int carry);
Nvoid event_data2ind(char num, char simbol);
Nvoid ip2lcd(	short in1,
N			short in2,
N			short in3,
N			short in4,
N			char xy,
N			char flash_pos);
Nvoid community2lcd(char* in,
N			char xy,
N			char flash_pos,
N			char flash_on);
N
N#endif
L 33 "main.c" 2
N#include "control.h"
L 1 "control.h" 1
N#ifndef _CONTROL_H_
N
N#define _CONTROL_H_
N
N
N//**********************************************
N//Работа с БПСами
Nextern char num_of_wrks_bps;
Nextern char bps_all_off_cnt,bps_mask_off_cnt,bps_mask_on_off_cnt;
Nextern char bps_hndl_2sec_cnt;
Nextern unsigned short bps_on_mask,bps_off_mask;
Nextern char num_necc_up,num_necc_down;
Nextern unsigned char sh_cnt0,b1Hz_sh;
N
N
N
N//***********************************************
N//АЦП 
Nextern long adc_buff[16][16];
Nextern signed short adc_buff_max[12],adc_buff_min[12],unet_buff_max,unet_buff_min;
Nextern short adc_buff_[16];
Nextern char adc_self_ch_cnt,adc_ch_net;
Nextern char adc_cnt,adc_cnt1,adc_ch,adc_ch_cnt;
Nextern short zero_cnt;
Ntypedef enum {asCH=1,asNET_WAIT=2,asNET_RDY=3,asNET=4} enum_adc_stat;
Nextern enum_adc_stat adc_stat;
Nextern unsigned short net_buff[32],net_buff_,net_metr_buff_[3];
Nextern char net_buff_cnt;
Nextern short ADWR,period_cnt,non_zero_cnt;
Nextern char rele_stat;
Nextern char bRELE_OUT;
Nextern short plazma_adc_cnt;
Nextern signed short adc_self_ch_buff[3],adc_self_ch_disp[3];
Nextern long main_power_buffer[8],main_power_buffer_;
Nextern short main_power_buffer_cnt;
Nextern short adc_gorb_cnt,adc_zero_cnt;
Nextern char adc_window_flag;
Nextern short adc_window_cnt;
Nextern short adc_net_buff_cnt;
N
N
Nchar vz_start(char hour);
Nvoid vz_stop(void);
N
Nvoid samokalibr_init(void);
Nvoid samokalibr_hndl(void);
Nvoid kb_init(void);
Nvoid kb_hndl(void);
Nvoid ubat_old_drv(void);
Nvoid unet_drv(void);
Nvoid matemat(void);
Nvoid adc_init(void);
Nvoid adc_drv5(void);
Nvoid adc_drv_(void);
Nvoid avg_hndl(void);
N//void bp_on(char in);
N//void bp_off(char in);
Nvoid rele_drv(void);
Nvoid bps_hndl(void);
Nvoid bps_drv(char in);
Nvoid bat_hndl(void);
Nvoid bat_drv(char in);
Nvoid u_necc_hndl(void);
Nvoid zar_drv(void);
Nvoid ke_start(char in);
Nvoid zar_drv(void);
Nvoid vent_hndl(void);
Nvoid avz_next_date_hndl(void);
Nvoid klimat_hndl(void);
Nvoid ext_drv(void);
Nvoid adc_drv7(void);
Nvoid avt_hndl(void);
Nvoid vent_resurs_hndl(void);
Nvoid ips_current_average_hndl(void);
N
N//***********************************************
N//Спецфункции
N
Ntypedef enum {spcOFF=0,spcKE, spcVZ}enum_spc_stat;
Ntypedef enum {kssNOT=0,kssNOT_VZ,kssYES=100,kssNOT_BAT,kssNOT_BAT_AV,kssNOT_BAT_AV_T,kssNOT_BAT_AV_ASS,kssNOT_BAT_ZAR,kssNOT_BAT_RAZR,kssNOT_KE1,kssNOT_KE2}enum_ke_start_stat;
Nextern enum_spc_stat spc_stat;
Nextern enum_ke_start_stat ke_start_stat;
Nextern char spc_bat;
Nextern char spc_phase;
Nextern unsigned short vz_cnt_s,vz_cnt_s_,vz_cnt_h,vz_cnt_h_;
Nextern short cnt_end_ke;
Nextern unsigned long ke_date[2];
Nextern short __ee_vz_cnt;
Nextern short __ee_spc_stat;
Nextern short __ee_spc_bat;
Nextern short __ee_spc_phase;
N
N
N
Nextern short plazma_sk;
Nextern char	plazma_inv[4];
Nextern char plazma_bat;
Nextern char plazma_cntrl_stat;
N#endif
N
Nextern signed int i_avg_max,i_avg_min,i_avg_summ,i_avg; 
Nextern signed int avg;
Nextern char bAVG;
Nextern const char sk_buff_TELECORE2015[4];
N
N//**********************************************
N//Контроль наличия батарей
Nextern signed short 	main_kb_cnt;
Nextern signed short 	kb_cnt_1lev;
Nextern signed short 	kb_cnt_2lev;
Nextern char 		kb_full_ver;
Nextern char kb_start[2],kb_start_ips;
Nextern signed short ibat_ips,ibat_ips_;
N
N//***********************************************
N//Ротация ведущего источника
Nextern char numOfForvardBps,numOfForvardBps_old;
Nextern char numOfForvardBps_minCnt;
Nextern short numOfForvardBps_hourCnt;
N
N//***********************************************
N// Параллельная работа в случае перегрева источника
Nextern char bPARALLEL_NOT_ENOUG;
Nextern char bPARALLEL_ENOUG;
Nextern char bPARALLEL;
N
Nextern char bAVG_BLOCK;
N
Nextern char cntrl_hndl_plazma;
N
Nvoid zar_superviser_drv(void);
Nvoid zar_superviser_start(void);
Nvoid vent_hndl(void);
Nvoid speedChargeHndl(void);
Nvoid speedChargeStartStop(void);
Nvoid numOfForvardBps_init(void);
Nvoid outVoltContrHndl(void);
N
N
L 34 "main.c" 2
N#include "mess.h"
L 1 "mess.h" 1
N
N
N
N
N
N#define 	MESS_BAT_ON_OFF	160
N#define   _MESS_BAT_MASK_BLOK_AFTER_2SEC		161
N#define	_MESS_BAT_MASK_ON					162
N#define	_MESS_BAT_MASK_OFF					163
N
N		
N#define	MESS_SPA_UART_SRAM	200 
N#define	MESS_SPA_UART_CMND	201 
N
N
N
Nvoid mess_hndl(void);
Nvoid mess_send(char _mess, short par0, short par1, char _time);
Nchar mess_find(char _mess);
Nchar mess_find_unvol(char _mess);
N
L 35 "main.c" 2
N//#include "full_can.h"
N#include "watchdog.h"
L 1 "watchdog.h" 1
N
Nvoid watchdog_init(unsigned long f,unsigned long time_out);
Nvoid watchdog_reset(void);
N
N
N
N
N
L 37 "main.c" 2
N#include "ad7705.h"
L 1 "ad7705.h" 1
N
Nextern unsigned short ad7705_res1,ad7705_res2;
Nextern unsigned short ad7705_buff[2][16],ad7705_buff_[2];
Nextern unsigned short ad7705_res;
Nextern char b7705ch,ad7705_wrk_cnt;
Nextern unsigned short cnt_ad7705_vis,cnt_ad7705_vis_wrk;
Nextern signed short ad7705_plazma;
N
N
Nvoid spi1_ad7705_config(void);
Nvoid ad7705_reset(void);
Nvoid ad7705_write(char in);
Nvoid ad7705_read(char num);
Nvoid ad7705_drv(void);
N
N
N
L 38 "main.c" 2
N#include "beep.h"
L 1 "beep.h" 1
N
Nextern unsigned long beep_stat_temp,beep_stat;
Nextern char beep_stat_cnt;
Nextern char beep_cnt;
Nextern char bU_BAT2REL_AV_BAT;
N
Nvoid beep_drv(void);
Nvoid beep_init(long zvuk,char fl);
Nvoid beep_hndl(void);
L 39 "main.c" 2
N//#include "avar_hndl.h"
N#include "memo.h"
L 1 "memo.h" 1
N
Nvoid memo_read (void);
N
N
N
N
N
N
L 41 "main.c" 2
N#include "simbols.h"
L 1 "simbols.h" 1
N
N
Nextern const char sAVNET[150];
Nextern const char sAVNET1[150];
Nextern const char sBPS1[30];
Nextern const char sBPS2[30];
Nextern const char sAVT[30];
Nextern const char sAVU[30];
Nextern const char caracter[1536];
L 42 "main.c" 2
N#include "graphic.h"
L 1 "graphic.h" 1
N
N
Nvoid draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse);
Nvoid draw_rectangle(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char solid,char inverse);	   
Nvoid draw_ptr(char x_b,char y_b,char ptr,char vol);
Nvoid plot(signed short x_b,signed short y_b,unsigned long data,signed short len,char inverse);
Nvoid graphic_print(signed short x_b,signed short y_b,signed short x_l,signed short y_l,signed short x_d,signed short y_d,const char* adress,char inverse);
Nvoid graphic_print_text(signed short x_b,signed short y_b,const char* bgnd,signed short num,signed short data,signed short des,signed short pos,char inverse);
Nvoid graphic_print_text_text(signed short x_b,signed short y_b,const char* bgnd,signed short num,signed short data,signed short des,signed short pos,char inverse);
L 43 "main.c" 2
N//#include "snmp_data_file.h" 
N//#include "net_config.h"
N#include "uart0.h"
L 1 "uart0.h" 1
N
N#define RX_BUFFER_SIZE0 1024
N#define TX_BUFFER_SIZE0 1024
N
N#define BUFSIZE    		1024
N
N#define IER_RBR		0x01
N#define IER_THRE		0x02
N#define IER_RLS		0x04
N
N#define PT	(UIB0[1]&0x80)
N#define C_D	(UIB0[1]&0x40)
N#define FR	(UIB0[1]&0x20)
N
N#define IIR_PEND	0x01
N#define IIR_RLS		0x03
N#define IIR_RDA		0x02
N#define IIR_CTI		0x06
N#define IIR_THRE	0x01
N
N#define LSR_RDR		0x01
N#define LSR_OE		0x02
N#define LSR_PE		0x04
N#define LSR_FE		0x08
N#define LSR_BI		0x10
N#define LSR_THRE	0x20
N#define LSR_TEMT	0x40
N#define LSR_RXFE	0x80
N
N#define VIC_UART0	6
N
Nextern char bRXIN0;
Nextern char UIB0[100];
Nextern char flag0;
Nextern char rx_buffer0[RX_BUFFER_SIZE0];
Xextern char rx_buffer0[1024];
Nextern unsigned char tx_buffer0[TX_BUFFER_SIZE0];
Xextern unsigned char tx_buffer0[1024];
Nextern unsigned short rx_wr_index0,rx_rd_index0,rx_counter0;
Nextern unsigned short tx_wr_index0,tx_rd_index0,tx_counter0;
Nextern char rx_buffer_overflow0;
Nextern char plazma_uart0;
Nextern char memo_out[50];
Nextern char data_rs[50];
Nextern char data_rs0[50];
Nextern const char Table87[];
Nextern const char Table95[]; 
N
Nchar crc_87(char* ptr,char num);
Nchar crc_95(char* ptr,char num);
Nvoid putchar0(char c);
Nvoid uart_out0 (char num,char data0,char data1,char data2,char data3,char data4,char data5);
Nvoid uart_out_adr0 (char *ptr, char len);
Nvoid uart0_init(void);
Nchar getchar0(void);
N__irq void uart0_interrupt(void);
Nvoid uart_in_an0(void);
Nsigned short index_offset0 (signed short index,signed short offset);
Nchar control_check0(signed short index);
Nvoid uart_in0(void);
Nvoid uart_out_adr_block (unsigned long adress,char *ptr, char len);
Nvoid rs232_data_out(void);
Nvoid rs232_data_out_tki(void);
Nvoid uart_out_buff0 (char *ptr, char len);
Nvoid rs232_data_out_1(void);
Nuint32_t UARTInit( uint32_t PortNum, uint32_t baudrate );
N
L 46 "main.c" 2
N#include <rtl.h>
N//#include "modbus.h"
N//#include "sacred_sun.h"
N#include "ztt.h"
L 1 "ztt.h" 1
N
Nextern char portZTTSunBatteryIsInitiated;
Nextern char zTTBatteryHndlPhase;
Nextern char liBatteryInBuff[300];
Nextern char zTTRequestPhase;
Nextern short zTTSilentCnt[3];
Nextern char zTTButteryCnter;
Nextern char zTTBatteryHndlCmnd;
N
Nvoid ztt_bat_hndl(void);
L 50 "main.c" 2
N//#include "mcp2515.h"
N#include "sc16is7xx.h"
L 1 "sc16is7xx.h" 1
N#include "stdint.h"
N
N#define CS16IS7xx_RHR	0x00
N#define CS16IS7xx_THR	0x00
N#define CS16IS7xx_IER	0x01
N#define CS16IS7xx_IIR	0x02
N#define CS16IS7xx_FCR	0x02
N#define CS16IS7xx_LCR	0x03
N#define CS16IS7xx_MCR	0x04
N#define CS16IS7xx_LSR	0x05
N#define CS16IS7xx_SPR	0x07
N#define CS16IS7xx_TXLVL	0x08
N#define CS16IS7xx_RXLVL	0x09
N#define CS16IS7xx_EFCR	0x0f
N
N
N#define CS16IS7xx_DLL	0x00
N#define CS16IS7xx_DLH	0x01
N#define CS16IS7xx_EFR	0x02
N
N#define sc16is700_CS_ON  LPC_GPIO0->FIODIR|=(1<<0);LPC_GPIO0->FIOCLR|=(1<<0);
N#define sc16is700_CS_OFF LPC_GPIO0->FIODIR|=(1<<0);LPC_GPIO0->FIOSET|=(1<<0);
N
N//Размер программного буфера передачи
N#define TX_BUFFER_SIZE_SC16IS700	32
N
N//Длительность в миллисекундах свободности ФИФО передачи для возможности начала новой передачи
N#define SC16IS700TXFIFOEMPTYCNTMAX		5
N
Nextern char sc16is700ByteAvailable;
Nextern char sc16is700TxFifoLevel;
Nextern char tx_buffer_sc16is700[TX_BUFFER_SIZE_SC16IS700]; //программный буфер передачи
Xextern char tx_buffer_sc16is700[32]; 
Nextern char tx_wr_index_sc16is700;//указатель записи в программный буфер передачи
Nextern char tx_rd_index_sc16is700;//указатель чтения из программного буфера передачи
Nextern char sc16is700TxFifoEmptyCnt; //Временной счетчик свободности ФИФО передачи
Nextern char sc16is700TxPossibleFlag;//Флаг возможности передачи
N
N
Nvoid sc16is700_init(uint32_t baudrate);
Nvoid sc16is700_wr_byte(char reg_num,char data);
Nchar sc16is700_rd_byte(char reg_num);
N//----------------------------------------------- 
N//Отправка num байт из программного буфера передачи в sc16is700
Nvoid sc16is700_wr_buff(char reg_num,char num);
Nvoid putchar_sc16is700(char out_byte);
Nvoid sc16is700_uart_hndl(void);
N
L 52 "main.c" 2
N//#include "modbus_tcp.h"
N#include <stdio.h> 
L 1 "C:\Keil\ARM\RV31\INC\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision: 137287 $
N * Checkin $Date: 2008-08-27 13:36:52 +0100 (Wed, 27 Aug 2008) $
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !1L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  typedef unsigned int size_t;   /* see <stddef.h> */
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined)
X#if 0L || !0L || !0L
N/* always defined in C++ and non-strict C for consistency of debug info */
N  typedef struct __va_list __va_list;
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#if !0L || (1L && 199901L <= 199409L)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#if !0L || (1L && 199901L <= 199409L)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#if !0L || (1L && 199901L <= 199409L)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
L 54 "main.c" 2
N
N//extern U8 own_hw_adr[];
N//extern U8  snmp_Community[];
NBOOL tick;
N
N
N//***********************************************
N//Таймер
Nchar b10000Hz,b1000Hz,b2000Hz,b100Hz,b50Hz,b10Hz,b5Hz,b2Hz,b1Hz,b1min;
Nshort t0cnt,t0cnt0,t0cnt1,t0cnt2,t0cnt3,t0cnt4,t0cnt5,t0cnt6,t0_cnt7,t0_cnt_min,t0cntMin;
Nchar bFL5,bFL2,bFL,bFL_,bTPS;
Nsigned short main_10Hz_cnt=0;
Nsigned short main_1Hz_cnt=0;
N
N 
N//***********************************************
N//Структура ИБЭПа
Nchar cnt_of_slave=3;
N//char cnt_of_wrks;   //колличество работающих источников , для индикации
N
N
N
N//**********************************************
N//Коэффициенты, отображаемые из EEPROM
Nsigned short Ktsrc[2];
Nsigned short Kusrc[2];
Nsigned short Kisrc[2];
Nsigned short Ki0src[2];
Nsigned short Kubat[2];
Nsigned short Kubatm[2];
Nunsigned short Kibat0[2];
Nsigned short Kibat1[2];
Nsigned short Ktbat[2];
Nsigned short Kunet;
Nsigned short Kunet_ext[3];
Nsigned short Ktext[3];
Nsigned short Kuload;
Nsigned short KunetA;
Nsigned short KunetB;
Nsigned short KunetC;
Nsigned short Kubps;
Nsigned short Kuout;
Nsigned short Kuvd;
N
Nsigned short MAIN_IST;
Nsigned short UMAX;
Nsigned short UOUT;
Nsigned short UOUT_;
Nsigned short UAVT;
Nsigned short TMAX;
Nsigned short TSIGN;
Nsigned short TSYSMAX;
Nsigned short AV_OFF_AVT;
Nsigned short USIGN;
Nsigned short UMN;
Nsigned short ZV_ON;
Nsigned short UINMAX;
Nsigned short UINMIN;
Nsigned short UOUTMAX;
Nsigned short UOUTMIN;
N
Nsigned short IKB;
N//signed short KVZ;
N
Nsigned short IMAX;
Nsigned short IMIN;
Nsigned short APV_ON;
Nsigned short IZMAX;
Nsigned short U0B;
Nsigned short TZAS;
Nsigned short VZ_HR;
Nsigned short TBAT;
Nsigned short U_AVT;
Nsigned short DU;
N//signed short PAR;
N
Nsigned short RELE_SET_MASK[4]={1,2,3,4};
N
Nsigned short TBATMAX;
Nsigned short TBATSIGN;
Nsigned short UBM_AV;
Nsigned short RELE_LOG;
Nsigned short TBOXMAX;
Nsigned short TBOXREG;
Nsigned short TBOXVENTMAX;
Nsigned short TLOADDISABLE;
Nsigned short TLOADENABLE;
Nsigned short TBATDISABLE;
Nsigned short TBATENABLE;
Nsigned short TVENTON;
Nsigned short TVENTOFF;
Nsigned short TWARMON;
Nsigned short TWARMOFF;
Nenum_releventsign RELEVENTSIGN;
Nsigned short TZNPN;
Nsigned short UONPN;
Nsigned short UVNPN;
Nenum_npn_out NPN_OUT;
Nenum_npn_sign NPN_SIGN;
Nsigned short TERMOKOMPENS;
Nsigned short TBOXVENTON; 
Nsigned short TBOXVENTOFF;
Nsigned short TBOXWARMON; 
Nsigned short TBOXWARMOFF;
Nsigned short BAT_TYPE;	//Тип батареи. 0 - обычная свинцовая, 1-литиевая COSLIGHT, 2-литиевая SACRED SUN , 3-литиевая ZTT
Nsigned short DU_LI_BAT;	//Параметр, определяющий напряжение содержания литиевой батареи
Nsigned short FORVARDBPSCHHOUR;	//Периодичностьсмены ведущего источника в часах. Если 0 - функция выключена и ведущий первый источник
Nsigned short NUMBAT;
Nsigned short NUMBAT_TELECORE;
Nsigned short NUMIST;
Nsigned short NUMINV;
Nsigned short NUMDT;
Nsigned short NUMSK;
Nsigned short NUMEXT;
Nsigned short NUMAVT;
Nsigned short NUMMAKB;
Nsigned short NUMBYPASS;
Nsigned short U_OUT_KONTR_MAX;
Nsigned short U_OUT_KONTR_MIN;
Nsigned short U_OUT_KONTR_DELAY;
Nsigned short DOP_RELE_FUNC;
Nsigned short CNTRL_HNDL_TIME;	//Постоянная времени регулирования источников для Телекора
Nsigned short USODERG_LI_BAT;	//Напряжение содержания литиевой батареи
Nsigned short QSODERG_LI_BAT;	//Заряд при котором начинает действовать напряжение содержания литиевой батареи
Nsigned short TVENTMAX;			//Максимальный ресурс вентилятора
Nsigned short ICA_EN;			//Включенность режима выравнивания токов ИПС
Nsigned short ICA_CH;			//Канал связи для выравнивания токов, 0 - MODBUS, 1 - MODBUS-TCP
Nsigned short ICA_MODBUS_ADDRESS;//Адрес ведомого для выравнивания токов по шине MODBUS-RTU
Nsigned short ICA_MODBUS_TCP_IP1,ICA_MODBUS_TCP_IP2,ICA_MODBUS_TCP_IP3,ICA_MODBUS_TCP_IP4;	//IP ведомого для выравнивания токов по шине MODBUS-TCP
Nsigned short ICA_MODBUS_TCP_UNIT_ID;	//UNIT ID ведомого для выравнивания токов по шине MODBUS-TCP
Nsigned short PWM_START;			//Начальный шим для ЭЛТЕХа
Nsigned short KB_ALGORITM;		//2-х или 3-х ступеннчатый алгоритм проверки цепи батареи
Nsigned short REG_SPEED;			//скорость регулирования, 1- стандартная, 2,3,4,5- замедленная в 2,3,4,5 раз
Nenum_apv_on APV_ON1,APV_ON2;
Nsigned short APV_ON2_TIME;
N
Nenum_bat_is_on BAT_IS_ON[2];
Nsigned short BAT_DAY_OF_ON[2];
Nsigned short BAT_MONTH_OF_ON[2];
Nsigned short BAT_YEAR_OF_ON[2];
Nsigned short BAT_C_NOM[2];
Nsigned short BAT_RESURS[2];
Nsigned short BAT_C_REAL[2];
N//signed short BAT_TYPE[2];
N
Nunsigned short AUSW_MAIN;
Nunsigned long AUSW_MAIN_NUMBER;
Nunsigned short AUSW_DAY;
Nunsigned short AUSW_MONTH;
Nunsigned short AUSW_YEAR;
Nunsigned short AUSW_UKU;
Nunsigned short AUSW_UKU_SUB;
Nunsigned long AUSW_UKU_NUMBER;
Nunsigned long	AUSW_BPS1_NUMBER;
Nunsigned long  AUSW_BPS2_NUMBER;
Nunsigned short AUSW_RS232;
Nunsigned short AUSW_PDH;
Nunsigned short AUSW_SDH;
Nunsigned short AUSW_ETH;
N
Nsigned short TMAX_EXT_EN[3];
Nsigned short TMAX_EXT[3];
Nsigned short TMIN_EXT_EN[3];
Nsigned short TMIN_EXT[3];
Nsigned short T_EXT_REL_EN[3];
Nsigned short T_EXT_ZVUK_EN[3];
Nsigned short T_EXT_LCD_EN[3];
Nsigned short T_EXT_RS_EN[3];
N
Nsigned short SK_SIGN[4];
Nsigned short SK_REL_EN[4];
Nsigned short SK_ZVUK_EN[4];
Nsigned short SK_LCD_EN[4];
Nsigned short SK_RS_EN[4];
N
Nenum_avz AVZ;
N
Nunsigned short HOUR_AVZ;
Nunsigned short MIN_AVZ;
Nunsigned short SEC_AVZ;
Nunsigned short DATE_AVZ;
Nunsigned short MONTH_AVZ;
Nunsigned short YEAR_AVZ;
Nunsigned short AVZ_TIME;
N
Nenum_mnemo_on MNEMO_ON;
Nunsigned short MNEMO_TIME;
N
Nsigned short POWER_CNT_ADRESS;
N
Nsigned short ETH_IS_ON;
Nsigned short ETH_DHCP_ON;
Nsigned short ETH_IP_1;
Nsigned short ETH_IP_2;
Nsigned short ETH_IP_3;
Nsigned short ETH_IP_4;
Nsigned short ETH_MASK_1;
Nsigned short ETH_MASK_2;
Nsigned short ETH_MASK_3;
Nsigned short ETH_MASK_4;
Nsigned short ETH_TRAP1_IP_1;
Nsigned short ETH_TRAP1_IP_2;
Nsigned short ETH_TRAP1_IP_3;
Nsigned short ETH_TRAP1_IP_4;
Nsigned short ETH_TRAP2_IP_1;
Nsigned short ETH_TRAP2_IP_2;
Nsigned short ETH_TRAP2_IP_3;
Nsigned short ETH_TRAP2_IP_4;
Nsigned short ETH_TRAP3_IP_1;
Nsigned short ETH_TRAP3_IP_2;
Nsigned short ETH_TRAP3_IP_3;
Nsigned short ETH_TRAP3_IP_4;
Nsigned short ETH_TRAP4_IP_1;
Nsigned short ETH_TRAP4_IP_2;
Nsigned short ETH_TRAP4_IP_3;
Nsigned short ETH_TRAP4_IP_4;
Nsigned short ETH_TRAP5_IP_1;
Nsigned short ETH_TRAP5_IP_2;
Nsigned short ETH_TRAP5_IP_3;
Nsigned short ETH_TRAP5_IP_4;
N
Nsigned short ETH_SNMP_PORT_READ;
Nsigned short ETH_SNMP_PORT_WRITE;
N
Nsigned short ETH_GW_1;
Nsigned short ETH_GW_2;
Nsigned short ETH_GW_3;
Nsigned short ETH_GW_4;
N
Nsigned short RELE_VENT_LOGIC;
N
Nsigned short MODBUS_ADRESS;
Nsigned short MODBUS_BAUDRATE;
Nsigned short BAT_LINK;
Nsigned short I_LOAD_MODE;	//способ измерения выходного тока - по шунту или как сумму токов источников
N
N
N
N
N
N
N//#ifdef UKU_TELECORE2015
N//***********************************************
N//Состояние литиевой батареи  
NLI_BAT_STAT li_bat;
N//#endif
N
N//***********************************************
N//Телеметрия по внутренней шине
Nchar can_slot[12][16];
N
N
N
N//***********************************************
N//Состояние инверторов
N#ifdef UKU_220_V2
SINV_STAT inv[3];
N#endif
N#ifndef UKU_220_V2
NINV_STAT inv[20];
N#endif
Nchar first_inv_slot=MINIM_INV_ADRESS;
Xchar first_inv_slot=20;
N
N//***********************************************
N//Состояние байпаса
NBYPS_STAT byps;
N
N//***********************************************
N//Состояние нагрузки
Nsigned short load_U;
Nsigned short load_I;
N
N//***********************************************
N//Состояние выхода
Nsigned short bps_U;
Nsigned short out_U;
Nsigned short in_U;
Nsigned short out_I;
Nsigned short vd_U;
Nsigned short bps_I;
Nsigned short sys_T;
N
N
N//***********************************************
N//Индикация
N
Nchar lcd_buffer[LCD_SIZE+100]={"Hello World"};
Xchar lcd_buffer[200+100]={"Hello World"};
Nsigned char parol[3];
Nchar phase;
Nchar lcd_bitmap[1024];
Nchar dig[5];
Nchar dumm_ind[20];
Nstuct_ind a_ind,b_ind[10],c_ind;
Nchar dumm_ind_[20];
Nchar zero_on;
Nchar mnemo_cnt=50;
Nchar simax;
Nshort av_j_si_max;
Nconst char ABCDEF[]={"0123456789ABCDEF"};
Nconst char sm_mont[13][4]={"   ","янв","фев","мар","апр","май","июн","июл","авг","сен","окт","ноя","дек"};
Nconst char sm_dow[8][3]={"ПН","ВТ","СР","ЧТ","ПТ","СБ","ВС"}; //
Nsigned short ptr_ind=0;
N
Nsigned short ind_pointer=0;
N
N//***********************************************
N//Состояние первичной сети
Nsigned short net_U,net_Ustore,net_Ua,net_Ub,net_Uc;
Nchar bFF,bFF_;
Nsigned short net_F,hz_out,hz_out_cnt,net_F3;
Nsigned char unet_drv_cnt;
Nchar net_av;
N
N//***********************************************
N//Состояние внешних датчиков
N//signed short tout[4];
Nchar tout_max_cnt[4],tout_min_cnt[4];
Nenum_tout_stat tout_stat[4];
Nsigned short t_ext[3];
N
Nsigned char sk_cnt_dumm[4],sk_cnt[4],sk_av_cnt[4];
Nenum_sk_stat sk_stat[4]={ssOFF,ssOFF,ssOFF,ssOFF};
Nenum_sk_av_stat sk_av_stat[4]={sasOFF,sasOFF,sasOFF,sasOFF},sk_av_stat_old[4];
Nsigned short t_box,t_box_warm,t_box_vent;
Nchar ND_EXT[3];
N//***********************************************
N//Звуки
Nextern char beep_cnt;
NBOOL bSILENT;
N
N
N
N
N
N
N
N
Nsigned short u_necc,u_necc_,u_necc_up,u_necc_dn;
Nsigned short main_cnt_5Hz;
Nsigned short num_necc;
Nsigned short num_necc_Imax;
Nsigned short num_necc_Imin;
Nsigned short cnt_num_necc;
N//char bSAME_IST_ON;
Nsigned mat_temper;
N
N//***********************************************
N//АПВ
Nunsigned main_apv_cnt,hour_apv_cnt[2],reset_apv_cnt[2];
Nunsigned short apv_cnt_sec[2],apv_cnt[2];
N
N//***********************************************
N//Текстовые константы
Nconst char sm_[]	={"                    "};
Nconst char sm_exit[]={" Выход              "};
Nconst char sm_time[]={" 0%:0^ 0</>  /0{   &"};
N
N
N
N
N
N//**********************************************
N//Работа с кнопками 
Nchar but;                            
Nunsigned long but_n,but_s;
Nchar but0_cnt;
Nchar but1_cnt;
Nchar but_onL_temp;
N
N//***********************************************
N//Межблоковая связь
Nsigned char cnt_net_drv;
N
N
N
N//***********************************************
N//Работа с кнопками
Nchar speed,l_but,n_but;
N
N//***********************************************
N//Неразобранное
Nenum {wrkON=0x55,wrkOFF=0xAA}wrk;
Nchar cnt_wrk;
Nsigned short ibat_integr;
Nunsigned short av_beep,av_rele,av_stat;
Nchar default_temp;
Nchar ND_out[3];
N
N//***********************************************
N//Тест
Nenum_tst_state tst_state[15];
N
N//***********************************************
N//АЦП
N//extern short adc_buff[16][16],adc_buff_[16];
Nextern char adc_cnt,adc_cnt1,adc_ch;
N
N//***********************************************
N
Nchar flag=0;
N
N
Nextern signed short bat_ver_cnt;
Nsigned short Isumm;
Nsigned short Isumm_;
N
N#include <LPC17xx.H>                        /* LPC21xx definitions */
L 1 "C:\Keil\ARM\INC\NXP\LPC17xx\LPC17xx.H" 1
N/******************************************************************************
N * @file:    LPC17xx.h
N * @purpose: CMSIS Cortex-M3 Core Peripheral Access Layer Header File for 
N *           NXP LPC17xx Device Series 
N * @version: V1.09
N * @date:    17. March 2010
N *----------------------------------------------------------------------------
N *
N * Copyright (C) 2008 ARM Limited. All rights reserved.
N *
N * ARM Limited (ARM) is supplying this software for use with Cortex-M3 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N
N#ifndef __LPC17xx_H__
N#define __LPC17xx_H__
N
N/*
N * ==========================================================================
N * ---------- Interrupt Number Definition -----------------------------------
N * ==========================================================================
N */
N
Ntypedef enum IRQn
N{
N/******  Cortex-M3 Processor Exceptions Numbers ***************************************************/
N  NonMaskableInt_IRQn           = -14,      /*!< 2 Non Maskable Interrupt                         */
N  MemoryManagement_IRQn         = -12,      /*!< 4 Cortex-M3 Memory Management Interrupt          */
N  BusFault_IRQn                 = -11,      /*!< 5 Cortex-M3 Bus Fault Interrupt                  */
N  UsageFault_IRQn               = -10,      /*!< 6 Cortex-M3 Usage Fault Interrupt                */
N  SVCall_IRQn                   = -5,       /*!< 11 Cortex-M3 SV Call Interrupt                   */
N  DebugMonitor_IRQn             = -4,       /*!< 12 Cortex-M3 Debug Monitor Interrupt             */
N  PendSV_IRQn                   = -2,       /*!< 14 Cortex-M3 Pend SV Interrupt                   */
N  SysTick_IRQn                  = -1,       /*!< 15 Cortex-M3 System Tick Interrupt               */
N
N/******  LPC17xx Specific Interrupt Numbers *******************************************************/
N  WDT_IRQn                      = 0,        /*!< Watchdog Timer Interrupt                         */
N  TIMER0_IRQn                   = 1,        /*!< Timer0 Interrupt                                 */
N  TIMER1_IRQn                   = 2,        /*!< Timer1 Interrupt                                 */
N  TIMER2_IRQn                   = 3,        /*!< Timer2 Interrupt                                 */
N  TIMER3_IRQn                   = 4,        /*!< Timer3 Interrupt                                 */
N  UART0_IRQn                    = 5,        /*!< UART0 Interrupt                                  */
N  UART1_IRQn                    = 6,        /*!< UART1 Interrupt                                  */
N  UART2_IRQn                    = 7,        /*!< UART2 Interrupt                                  */
N  UART3_IRQn                    = 8,        /*!< UART3 Interrupt                                  */
N  PWM1_IRQn                     = 9,        /*!< PWM1 Interrupt                                   */
N  I2C0_IRQn                     = 10,       /*!< I2C0 Interrupt                                   */
N  I2C1_IRQn                     = 11,       /*!< I2C1 Interrupt                                   */
N  I2C2_IRQn                     = 12,       /*!< I2C2 Interrupt                                   */
N  SPI_IRQn                      = 13,       /*!< SPI Interrupt                                    */
N  SSP0_IRQn                     = 14,       /*!< SSP0 Interrupt                                   */
N  SSP1_IRQn                     = 15,       /*!< SSP1 Interrupt                                   */
N  PLL0_IRQn                     = 16,       /*!< PLL0 Lock (Main PLL) Interrupt                   */
N  RTC_IRQn                      = 17,       /*!< Real Time Clock Interrupt                        */
N  EINT0_IRQn                    = 18,       /*!< External Interrupt 0 Interrupt                   */
N  EINT1_IRQn                    = 19,       /*!< External Interrupt 1 Interrupt                   */
N  EINT2_IRQn                    = 20,       /*!< External Interrupt 2 Interrupt                   */
N  EINT3_IRQn                    = 21,       /*!< External Interrupt 3 Interrupt                   */
N  ADC_IRQn                      = 22,       /*!< A/D Converter Interrupt                          */
N  BOD_IRQn                      = 23,       /*!< Brown-Out Detect Interrupt                       */
N  USB_IRQn                      = 24,       /*!< USB Interrupt                                    */
N  CAN_IRQn                      = 25,       /*!< CAN Interrupt                                    */
N  DMA_IRQn                      = 26,       /*!< General Purpose DMA Interrupt                    */
N  I2S_IRQn                      = 27,       /*!< I2S Interrupt                                    */
N  ENET_IRQn                     = 28,       /*!< Ethernet Interrupt                               */
N  RIT_IRQn                      = 29,       /*!< Repetitive Interrupt Timer Interrupt             */
N  MCPWM_IRQn                    = 30,       /*!< Motor Control PWM Interrupt                      */
N  QEI_IRQn                      = 31,       /*!< Quadrature Encoder Interface Interrupt           */
N  PLL1_IRQn                     = 32,       /*!< PLL1 Lock (USB PLL) Interrupt                    */
N  USBActivity_IRQn              = 33,       /* USB Activity interrupt                             */
N  CANActivity_IRQn              = 34,       /* CAN Activity interrupt                             */
N} IRQn_Type;
N
N
N/*
N * ==========================================================================
N * ----------- Processor and Core Peripheral Section ------------------------
N * ==========================================================================
N */
N
N/* Configuration of the Cortex-M3 Processor and Core Peripherals */
N#define __MPU_PRESENT             1         /*!< MPU present or not                               */
N#define __NVIC_PRIO_BITS          5         /*!< Number of Bits used for Priority Levels          */
N#define __Vendor_SysTickConfig    0         /*!< Set to 1 if different SysTick Config is used     */
N
N
N#include <core_cm3.h>                       /* Cortex-M3 processor and core peripherals           */
L 1 "C:\Keil\ARM\CMSIS\Include\core_cm3.h" 1
N/**************************************************************************//**
N * @file     core_cm3.h
N * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
N * @version  V2.01
N * @date     06. December 2010
N *
N * @note
N * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N#if defined ( __ICCARM__ )                   
X#if 0L                   
S #pragma system_include  /* treat file as system include file for MISRA check */
N#endif
N
N#ifdef __cplusplus
S extern "C" {
N#endif 
N
N#ifndef __CORE_CM3_H_GENERIC
N#define __CORE_CM3_H_GENERIC
N
N
N/** \mainpage CMSIS Cortex-M3
N   
N  This documentation describes the CMSIS Cortex-M Core Peripheral Access Layer.
N  It consists of:
N 
N     - Cortex-M Core Register Definitions
N     - Cortex-M functions
N     - Cortex-M instructions
N 
N  The CMSIS Cortex-M3 Core Peripheral Access Layer contains C and assembly functions that ease 
N  access to the Cortex-M Core
N */ 
N
N/** \defgroup CMSIS_LintCinfiguration CMSIS Lint Configuration
N  List of Lint messages which will be suppressed and not shown:
N    - not yet checked
N  .
N  Note:  To re-enable a Message, insert a space before 'lint' *
N 
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/** \defgroup CMSIS_core_definitions CMSIS Core Definitions
N  This file defines all structures and symbols for CMSIS core:
N   - CMSIS version number
N   - Cortex-M core 
N   - Cortex-M core Revision Number
N  @{
N */
N
N/*  CMSIS CM3 definitions */
N#define __CM3_CMSIS_VERSION_MAIN  (0x02)                                                       /*!< [31:16] CMSIS HAL main version */
N#define __CM3_CMSIS_VERSION_SUB   (0x00)                                                       /*!< [15:0]  CMSIS HAL sub version  */
N#define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!< CMSIS HAL version number       */
N
N#define __CORTEX_M                (0x03)                                                       /*!< Cortex core                    */
N
N
N#if defined ( __CC_ARM   )
X#if 1L
N  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler          */
N  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler       */
N
N#elif defined ( __ICCARM__ )
S  #define __ASM           __asm                                       /*!< asm keyword for IAR Compiler          */
S  #define __INLINE        inline                                      /*!< inline keyword for IAR Compiler. Only avaiable in High optimization mode! */
S
S#elif defined   (  __GNUC__  )
S  #define __ASM            __asm                                      /*!< asm keyword for GNU Compiler          */
S  #define __INLINE         inline                                     /*!< inline keyword for GNU Compiler       */
S
S#elif defined   (  __TASKING__  )
S  #define __ASM            __asm                                      /*!< asm keyword for TASKING Compiler      */
S  #define __INLINE         inline                                     /*!< inline keyword for TASKING Compiler   */
S
N#endif
N
N#include <stdint.h>                      /*!< standard types definitions                      */
N#include "core_cmInstr.h"                /*!< Core Instruction Access                         */
L 1 "C:\Keil\ARM\CMSIS\Include\core_cmInstr.h" 1
N/**************************************************************************//**
N * @file     core_cmInstr.h
N * @brief    CMSIS Cortex-M Core Instruction Access Header File
N * @version  V2.01
N * @date     06. December 2010
N *
N * @note
N * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N#ifndef __CORE_CMINSTR_H__
N#define __CORE_CMINSTR_H__
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N#if defined ( __CC_ARM   ) /*------------------ RealView Compiler ----------------*/
X#if 1L  
N/* ARM armcc specific functions */
N
N/** \brief  No Operation
N
N    No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/** \brief  Wait For Interrupt
N
N    Wait For Interrupt is a hint instruction that suspends execution
N    until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/** \brief  Wait For Event
N
N    Wait For Event is a hint instruction that permits the processor to enter
N    a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/** \brief  Send Event
N
N    Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/** \brief  Instruction Synchronization Barrier
N
N    Instruction Synchronization Barrier flushes the pipeline in the processor, 
N    so that all instructions following the ISB are fetched from cache or 
N    memory, after the instruction has been completed.
N */
N#define __ISB()                           __isb(0xF)
N
N
N/** \brief  Data Synchronization Barrier
N
N    This function acts as a special kind of Data Memory Barrier. 
N    It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB()                           __dsb(0xF)
N
N
N/** \brief  Data Memory Barrier
N
N    This function ensures the apparent order of the explicit memory operations before 
N    and after the instruction, without ensuring their completion.
N */
N#define __DMB()                           __dmb(0xF)
N
N
N/** \brief  Reverse byte order (32 bit)
N
N    This function reverses the byte order in integer value.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/** \brief  Reverse byte order (16 bit)
N
N    This function reverses the byte order in two unsigned short values.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#if (__ARMCC_VERSION < 400677)
X#if (410644 < 400677)
Sextern uint32_t __REV16(uint32_t value);
N#else  /* (__ARMCC_VERSION >= 400677)  */
Nstatic __INLINE __ASM uint32_t __REV16(uint32_t value)
Xstatic __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif /* __ARMCC_VERSION  */ 
N
N
N/** \brief  Reverse byte order in signed short value
N
N    This function reverses the byte order in a signed short value with sign extension to integer.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#if (__ARMCC_VERSION < 400677)
X#if (410644 < 400677)
Sextern int32_t __REVSH(int32_t value);
N#else  /* (__ARMCC_VERSION >= 400677)  */
Nstatic __INLINE __ASM int32_t __REVSH(int32_t value)
Xstatic __inline __asm int32_t __REVSH(int32_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif /* __ARMCC_VERSION  */ 
N
N
N#if       (__CORTEX_M >= 0x03)
X#if       ((0x03) >= 0x03)
N
N/** \brief  Reverse bit order of value
N
N    This function reverses the bit order of the given value.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#define __RBIT                            __rbit
N
N
N/** \brief  LDR Exclusive (8 bit)
N
N    This function performs a exclusive LDR command for 8 bit value.
N
N    \param [in]    ptr  Pointer to data
N    \return             value of type uint8_t at (*ptr)
N */
N#define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
N
N
N/** \brief  LDR Exclusive (16 bit)
N
N    This function performs a exclusive LDR command for 16 bit values.
N
N    \param [in]    ptr  Pointer to data
N    \return        value of type uint16_t at (*ptr)
N */
N#define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
N
N
N/** \brief  LDR Exclusive (32 bit)
N
N    This function performs a exclusive LDR command for 32 bit values.
N
N    \param [in]    ptr  Pointer to data
N    \return        value of type uint32_t at (*ptr)
N */
N#define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
N
N
N/** \brief  STR Exclusive (8 bit)
N
N    This function performs a exclusive STR command for 8 bit values.
N
N    \param [in]  value  Value to store
N    \param [in]    ptr  Pointer to location
N    \return          0  Function succeeded
N    \return          1  Function failed
N */
N#define __STREXB(value, ptr)              __strex(value, ptr)
N
N
N/** \brief  STR Exclusive (16 bit)
N
N    This function performs a exclusive STR command for 16 bit values.
N
N    \param [in]  value  Value to store
N    \param [in]    ptr  Pointer to location
N    \return          0  Function succeeded
N    \return          1  Function failed
N */
N#define __STREXH(value, ptr)              __strex(value, ptr)
N
N
N/** \brief  STR Exclusive (32 bit)
N
N    This function performs a exclusive STR command for 32 bit values.
N
N    \param [in]  value  Value to store
N    \param [in]    ptr  Pointer to location
N    \return          0  Function succeeded
N    \return          1  Function failed
N */
N#define __STREXW(value, ptr)              __strex(value, ptr)
N
N
N/** \brief  Remove the exclusive lock
N
N    This function removes the exclusive lock which is created by LDREX.
N
N */
N#if (__ARMCC_VERSION < 400000)
X#if (410644 < 400000)
Sextern void __CLREX(void);
N#else  /* (__ARMCC_VERSION >= 400000)  */
N#define __CLREX                           __clrex
N#endif /* __ARMCC_VERSION  */ 
N
N
N/** \brief  Signed Saturate
N
N    This function saturates a signed value.
N
N    \param [in]  value  Value to be saturated
N    \param [in]    sat  Bit position to saturate to (1..32)
N    \return             Saturated value
N */
N#define __SSAT                            __ssat
N
N
N/** \brief  Unsigned Saturate
N
N    This function saturates an unsigned value.
N
N    \param [in]  value  Value to be saturated
N    \param [in]    sat  Bit position to saturate to (0..31)
N    \return             Saturated value
N */
N#define __USAT                            __usat
N
N
N/** \brief  Count leading zeros
N
N    This function counts the number of leading zeros of a data value.
N
N    \param [in]  value  Value to count the leading zeros
N    \return             number of leading zeros in value
N */
N#define __CLZ                             __clz 
N
N#endif /* (__CORTEX_M >= 0x03) */
N
N
N
N#elif (defined (__ICCARM__)) /*---------------- ICC Compiler ---------------------*/
S/* IAR iccarm specific functions */
S
S#include <intrinsics.h>                     /* IAR Intrinsics   */
S
S#pragma diag_suppress=Pe940
S
S/** \brief  No Operation
S
S    No Operation does nothing. This instruction can be used for code alignment purposes.
S */
S#define __NOP                           __no_operation
S
S
S/** \brief  Wait For Interrupt
S
S    Wait For Interrupt is a hint instruction that suspends execution
S    until one of a number of events occurs.
S */
Sstatic __INLINE  void __WFI(void)
S{
S  __ASM ("wfi");
S}
S
S
S/** \brief  Wait For Event
S
S    Wait For Event is a hint instruction that permits the processor to enter
S    a low-power state until one of a number of events occurs.
S */
Sstatic __INLINE  void __WFE(void)
S{
S  __ASM ("wfe");
S}
S
S
S/** \brief  Send Event
S
S    Send Event is a hint instruction. It causes an event to be signaled to the CPU.
S */
Sstatic __INLINE  void __SEV(void)
S{
S  __ASM ("sev");
S}
S
S
S/* intrinsic     void __ISB(void)            (see intrinsics.h) */
S/* intrinsic     void __DSB(void)            (see intrinsics.h) */
S/* intrinsic     void __DMB(void)            (see intrinsics.h) */
S/* intrinsic uint32_t __REV(uint32_t value)  (see intrinsics.h) */
S/* intrinsic          __SSAT                 (see intrinsics.h) */
S/* intrinsic          __USAT                 (see intrinsics.h) */
S
S
S/** \brief  Reverse byte order (16 bit)
S
S    This function reverses the byte order in two unsigned short values.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
Sstatic uint32_t __REV16(uint32_t value)
S{
S  __ASM("rev16 r0, r0");
S}
S
S
S/* intrinsic uint32_t __REVSH(uint32_t value)  (see intrinsics.h */
S
S
S#if       (__CORTEX_M >= 0x03)
S
S/** \brief  Reverse bit order of value
S
S    This function reverses the bit order of the given value.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
Sstatic uint32_t __RBIT(uint32_t value)
S{
S  __ASM("rbit r0, r0");
S}
S
S
S/** \brief  LDR Exclusive (8 bit)
S
S    This function performs a exclusive LDR command for 8 bit value.
S
S    \param [in]    ptr  Pointer to data
S    \return             value of type uint8_t at (*ptr)
S */
Sstatic uint8_t __LDREXB(volatile uint8_t *addr)
S{
S  __ASM("ldrexb r0, [r0]");
S}
S
S
S/** \brief  LDR Exclusive (16 bit)
S
S    This function performs a exclusive LDR command for 16 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint16_t at (*ptr)
S */
Sstatic uint16_t __LDREXH(volatile uint16_t *addr)
S{
S  __ASM("ldrexh r0, [r0]");
S}
S
S
S/** \brief  LDR Exclusive (32 bit)
S
S    This function performs a exclusive LDR command for 32 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint32_t at (*ptr)
S */
S/* intrinsic unsigned long __LDREX(unsigned long *)  (see intrinsics.h) */
Sstatic uint32_t __LDREXW(volatile uint32_t *addr)
S{
S  __ASM("ldrex r0, [r0]");
S}
S
S
S/** \brief  STR Exclusive (8 bit)
S
S    This function performs a exclusive STR command for 8 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
Sstatic uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
S{
S  __ASM("strexb r0, r0, [r1]");
S}
S
S
S/** \brief  STR Exclusive (16 bit)
S
S    This function performs a exclusive STR command for 16 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
Sstatic uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
S{
S  __ASM("strexh r0, r0, [r1]");
S}
S
S
S/** \brief  STR Exclusive (32 bit)
S
S    This function performs a exclusive STR command for 32 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S/* intrinsic unsigned long __STREX(unsigned long, unsigned long)  (see intrinsics.h )*/
Sstatic uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
S{
S  __ASM("strex r0, r0, [r1]");
S}
S
S
S/** \brief  Remove the exclusive lock
S
S    This function removes the exclusive lock which is created by LDREX.
S
S */
Sstatic __INLINE void __CLREX(void)
S{
S  __ASM ("clrex");
S}
S
S/* intrinsic   unsigned char __CLZ( unsigned long )      (see intrinsics.h) */
S
S#endif /* (__CORTEX_M >= 0x03) */
S
S#pragma diag_default=Pe940
S
S
S
S#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
S/* GNU gcc specific functions */
S
S/** \brief  No Operation
S
S    No Operation does nothing. This instruction can be used for code alignment purposes.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
S{
S  __ASM volatile ("nop");
S}
S
S
S/** \brief  Wait For Interrupt
S
S    Wait For Interrupt is a hint instruction that suspends execution
S    until one of a number of events occurs.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
S{
S  __ASM volatile ("wfi");
S}
S
S
S/** \brief  Wait For Event
S
S    Wait For Event is a hint instruction that permits the processor to enter
S    a low-power state until one of a number of events occurs.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
S{
S  __ASM volatile ("wfe");
S}
S
S
S/** \brief  Send Event
S
S    Send Event is a hint instruction. It causes an event to be signaled to the CPU.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
S{
S  __ASM volatile ("sev");
S}
S
S
S/** \brief  Instruction Synchronization Barrier
S
S    Instruction Synchronization Barrier flushes the pipeline in the processor, 
S    so that all instructions following the ISB are fetched from cache or 
S    memory, after the instruction has been completed.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
S{
S  __ASM volatile ("isb");
S}
S
S
S/** \brief  Data Synchronization Barrier
S
S    This function acts as a special kind of Data Memory Barrier. 
S    It completes when all explicit memory accesses before this instruction complete.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
S{
S  __ASM volatile ("dsb");
S}
S
S
S/** \brief  Data Memory Barrier
S
S    This function ensures the apparent order of the explicit memory operations before 
S    and after the instruction, without ensuring their completion.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
S{
S  __ASM volatile ("dmb");
S}
S
S
S/** \brief  Reverse byte order (32 bit)
S
S    This function reverses the byte order in integer value.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
S{
S  uint32_t result;
S  
S  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
S  return(result);
S}
S
S
S/** \brief  Reverse byte order (16 bit)
S
S    This function reverses the byte order in two unsigned short values.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV16(uint32_t value)
S{
S  uint32_t result;
S  
S  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
S  return(result);
S}
S
S
S/** \brief  Reverse byte order in signed short value
S
S    This function reverses the byte order in a signed short value with sign extension to integer.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) static __INLINE int32_t __REVSH(int32_t value)
S{
S  uint32_t result;
S  
S  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
S  return(result);
S}
S
S
S#if       (__CORTEX_M >= 0x03)
S
S/** \brief  Reverse bit order of value
S
S    This function reverses the bit order of the given value.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __RBIT(uint32_t value)
S{
S  uint32_t result;
S  
S   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
S   return(result);
S}
S
S
S/** \brief  LDR Exclusive (8 bit)
S
S    This function performs a exclusive LDR command for 8 bit value.
S
S    \param [in]    ptr  Pointer to data
S    \return             value of type uint8_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) static __INLINE uint8_t __LDREXB(volatile uint8_t *addr)
S{
S    uint8_t result;
S  
S   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
S   return(result);
S}
S
S
S/** \brief  LDR Exclusive (16 bit)
S
S    This function performs a exclusive LDR command for 16 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint16_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) static __INLINE uint16_t __LDREXH(volatile uint16_t *addr)
S{
S    uint16_t result;
S  
S   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
S   return(result);
S}
S
S
S/** \brief  LDR Exclusive (32 bit)
S
S    This function performs a exclusive LDR command for 32 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint32_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __LDREXW(volatile uint32_t *addr)
S{
S    uint32_t result;
S  
S   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
S   return(result);
S}
S
S
S/** \brief  STR Exclusive (8 bit)
S
S    This function performs a exclusive STR command for 8 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
S{
S   uint32_t result;
S  
S   __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
S   return(result);
S}
S
S
S/** \brief  STR Exclusive (16 bit)
S
S    This function performs a exclusive STR command for 16 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
S{
S   uint32_t result;
S  
S   __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
S   return(result);
S}
S
S
S/** \brief  STR Exclusive (32 bit)
S
S    This function performs a exclusive STR command for 32 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
S{
S   uint32_t result;
S  
S   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
S   return(result);
S}
S
S
S/** \brief  Remove the exclusive lock
S
S    This function removes the exclusive lock which is created by LDREX.
S
S */
S__attribute__( ( always_inline ) ) static __INLINE void __CLREX(void)
S{
S  __ASM volatile ("clrex");
S}
S
S
S/** \brief  Signed Saturate
S
S    This function saturates a signed value.
S
S    \param [in]  value  Value to be saturated
S    \param [in]    sat  Bit position to saturate to (1..32)
S    \return             Saturated value
S */
S#define __SSAT(ARG1,ARG2) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1); \
S  __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
S  __RES; \
S })
X#define __SSAT(ARG1,ARG2) ({                            uint32_t __RES, __ARG1 = (ARG1);   __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) );   __RES;  })
S
S
S/** \brief  Unsigned Saturate
S
S    This function saturates an unsigned value.
S
S    \param [in]  value  Value to be saturated
S    \param [in]    sat  Bit position to saturate to (0..31)
S    \return             Saturated value
S */
S#define __USAT(ARG1,ARG2) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1); \
S  __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
S  __RES; \
S })
X#define __USAT(ARG1,ARG2) ({                            uint32_t __RES, __ARG1 = (ARG1);   __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) );   __RES;  })
S
S
S/** \brief  Count leading zeros
S
S    This function counts the number of leading zeros of a data value.
S
S    \param [in]  value  Value to count the leading zeros
S    \return             number of leading zeros in value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint8_t __CLZ(uint32_t value)
S{
S  uint8_t result;
S  
S  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
S  return(result);
S}
S
S#endif /* (__CORTEX_M >= 0x03) */
S
S
S
S
S#elif (defined (__TASKING__)) /*--------------- TASKING Compiler -----------------*/
S/* TASKING carm specific functions */
S
S/*
S * The CMSIS functions have been implemented as intrinsics in the compiler.
S * Please use "carm -?i" to get an up to date list of all instrinsics,
S * Including the CMSIS ones.
S */
S
N#endif
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N#endif /* __CORE_CMINSTR_H__ */
L 96 "C:\Keil\ARM\CMSIS\Include\core_cm3.h" 2
N#include "core_cmFunc.h"                 /*!< Core Function Access                            */
L 1 "C:\Keil\ARM\CMSIS\Include\core_cmFunc.h" 1
N/**************************************************************************//**
N * @file     core_cmFunc.h
N * @brief    CMSIS Cortex-M Core Function Access Header File
N * @version  V2.01
N * @date     06. December 2010
N *
N * @note
N * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N#ifndef __CORE_CMFUNC_H__
N#define __CORE_CMFUNC_H__
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface   
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N#if defined ( __CC_ARM   ) /*------------------ RealView Compiler ----------------*/
X#if 1L  
N/* ARM armcc specific functions */
N
N/* intrinsic void __enable_irq();     */
N/* intrinsic void __disable_irq();    */
N
N/** \brief  Get Control Register
N
N    This function returns the content of the Control Register.
N
N    \return               Control Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410644 <  400000)
Sextern          uint32_t __get_CONTROL(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Set Control Register
N
N    This function writes the given value to the Control Register.
N
N    \param [in]    control  Control Register value to set
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410644 <  400000)
Sextern          void __set_CONTROL(uint32_t control);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get ISPR Register
N
N    This function returns the content of the ISPR Register.
N
N    \return               ISPR Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410644 <  400000)
Sextern          uint32_t __get_IPSR(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get APSR Register
N
N    This function returns the content of the APSR Register.
N
N    \return               APSR Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410644 <  400000)
Sextern          uint32_t __get_APSR(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get xPSR Register
N
N    This function returns the content of the xPSR Register.
N
N    \return               xPSR Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410644 <  400000)
Sextern          uint32_t __get_xPSR(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get Process Stack Pointer
N
N    This function returns the current value of the Process Stack Pointer (PSP).
N
N    \return               PSP Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410644 <  400000)
Sextern          uint32_t __get_PSP(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Set Process Stack Pointer
N
N    This function assigns the given value to the Process Stack Pointer (PSP).
N
N    \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410644 <  400000)
Sextern          void __set_PSP(uint32_t topOfProcStack);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get Main Stack Pointer
N
N    This function returns the current value of the Main Stack Pointer (MSP).
N
N    \return               MSP Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410644 <  400000)
Sextern          uint32_t __get_MSP(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Set Main Stack Pointer
N
N    This function assigns the given value to the Main Stack Pointer (MSP).
N
N    \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410644 <  400000)
Sextern          void __set_MSP(uint32_t topOfMainStack);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get Priority Mask
N
N    This function returns the current state of the priority mask bit from the Priority Mask Register.
N
N    \return               Priority Mask value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410644 <  400000)
Sextern          uint32_t __get_PRIMASK(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Set Priority Mask
N
N    This function assigns the given value to the Priority Mask Register.
N
N    \param [in]    priMask  Priority Mask
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410644 <  400000)
Sextern          void __set_PRIMASK(uint32_t priMask);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N#endif /*  __ARMCC_VERSION  */ 
N 
N
N#if       (__CORTEX_M >= 0x03)
X#if       ((0x03) >= 0x03)
N
N/** \brief  Enable FIQ
N
N    This function enables FIQ interrupts by clearing the F-bit in the CPSR.
N    Can only be executed in Privileged modes.
N */
N#define __enable_fault_irq                __enable_fiq
N
N
N/** \brief  Disable FIQ
N
N    This function disables FIQ interrupts by setting the F-bit in the CPSR.
N    Can only be executed in Privileged modes.
N */
N#define __disable_fault_irq               __disable_fiq
N
N
N/** \brief  Get Base Priority
N
N    This function returns the current value of the Base Priority register.
N
N    \return               Base Priority register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410644 <  400000)
Sextern          uint32_t __get_BASEPRI(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t  __get_BASEPRI(void)
Xstatic __inline uint32_t  __get_BASEPRI(void)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  return(__regBasePri);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Set Base Priority
N
N    This function assigns the given value to the Base Priority register.
N
N    \param [in]    basePri  Base Priority value to set
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410644 <  400000)
Sextern          void __set_BASEPRI(uint32_t basePri);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE void __set_BASEPRI(uint32_t basePri)
Xstatic __inline void __set_BASEPRI(uint32_t basePri)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  __regBasePri = (basePri & 0xff);
N}
N#endif /*  __ARMCC_VERSION  */ 
N 
N
N/** \brief  Get Fault Mask
N
N    This function returns the current value of the Fault Mask register.
N
N    \return               Fault Mask register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410644 <  400000)
Sextern          uint32_t __get_FAULTMASK(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_FAULTMASK(void)
Xstatic __inline uint32_t __get_FAULTMASK(void)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  return(__regFaultMask);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Set Fault Mask
N
N    This function assigns the given value to the Fault Mask register.
N
N    \param [in]    faultMask  Fault Mask value to set
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410644 <  400000)
Sextern          void __set_FAULTMASK(uint32_t faultMask);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE void __set_FAULTMASK(uint32_t faultMask)
Xstatic __inline void __set_FAULTMASK(uint32_t faultMask)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  __regFaultMask = (faultMask & 1);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N#endif /* (__CORTEX_M >= 0x03) */
N
N
N#if       (__CORTEX_M == 0x04)
X#if       ((0x03) == 0x04)
S
S/** \brief  Get FPSCR
S
S    This function returns the current value of the Floating Point Status/Control register.
S
S    \return               Floating Point Status/Control register value
S */
Sstatic __INLINE uint32_t __get_FPSCR(void)
S{
S#if (__FPU_PRESENT == 1)
S  register uint32_t __regfpscr         __ASM("fpscr");
S  return(__regfpscr);
S#else
S   return(0);
S#endif
S}
S
S
S/** \brief  Set FPSCR
S
S    This function assigns the given value to the Floating Point Status/Control register.
S
S    \param [in]    fpscr  Floating Point Status/Control value to set
S */
Sstatic __INLINE void __set_FPSCR(uint32_t fpscr)
S{
S#if (__FPU_PRESENT == 1)
S  register uint32_t __regfpscr         __ASM("fpscr");
S  __regfpscr = (fpscr);
S#endif
S}
S
N#endif /* (__CORTEX_M == 0x04) */
N
N
N #elif (defined (__ICCARM__)) /*---------------- ICC Compiler ---------------------*/
S/* IAR iccarm specific functions */
S
S#if defined (__ICCARM__)
S  #include <intrinsics.h>                     /* IAR Intrinsics   */
S#endif
S
S#pragma diag_suppress=Pe940
S
S/** \brief  Enable IRQ Interrupts
S
S  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
S  Can only be executed in Privileged modes.
S */
S#define __enable_irq                              __enable_interrupt
S
S
S/** \brief  Disable IRQ Interrupts
S
S  This function disables IRQ interrupts by setting the I-bit in the CPSR.
S  Can only be executed in Privileged modes.
S */
S#define __disable_irq                             __disable_interrupt
S
S
S/* intrinsic unsigned long __get_CONTROL( void ); (see intrinsic.h) */
S/* intrinsic void __set_CONTROL( unsigned long ); (see intrinsic.h) */
S
S
S/** \brief  Get ISPR Register
S
S    This function returns the content of the ISPR Register.
S
S    \return               ISPR Register value
S */
Sstatic uint32_t __get_IPSR(void)
S{
S  __ASM("mrs r0, ipsr");
S}
S
S
S/** \brief  Get APSR Register
S
S    This function returns the content of the APSR Register.
S
S    \return               APSR Register value
S */
Sstatic uint32_t __get_APSR(void)
S{
S  __ASM("mrs r0, apsr");
S}
S
S
S/** \brief  Get xPSR Register
S
S    This function returns the content of the xPSR Register.
S
S    \return               xPSR Register value
S */
Sstatic uint32_t __get_xPSR(void)
S{
S  __ASM("mrs r0, psr");           // assembler does not know "xpsr"
S}
S
S
S/** \brief  Get Process Stack Pointer
S
S    This function returns the current value of the Process Stack Pointer (PSP).
S
S    \return               PSP Register value
S */
Sstatic uint32_t __get_PSP(void)
S{
S  __ASM("mrs r0, psp");
S}
S 
S
S/** \brief  Set Process Stack Pointer
S
S    This function assigns the given value to the Process Stack Pointer (PSP).
S
S    \param [in]    topOfProcStack  Process Stack Pointer value to set
S */
Sstatic void __set_PSP(uint32_t topOfProcStack)
S{
S  __ASM("msr psp, r0");
S}
S
S
S/** \brief  Get Main Stack Pointer
S
S    This function returns the current value of the Main Stack Pointer (MSP).
S
S    \return               MSP Register value
S */
Sstatic uint32_t __get_MSP(void)
S{
S  __ASM("mrs r0, msp");
S}
S 
S
S/** \brief  Set Main Stack Pointer
S
S    This function assigns the given value to the Main Stack Pointer (MSP).
S
S    \param [in]    topOfMainStack  Main Stack Pointer value to set
S */
Sstatic void __set_MSP(uint32_t topOfMainStack)
S{
S  __ASM("msr msp, r0");
S}
S 
S
S/* intrinsic unsigned long __get_PRIMASK( void ); (see intrinsic.h) */
S/* intrinsic void __set_PRIMASK( unsigned long ); (see intrinsic.h) */
S 
S
S#if       (__CORTEX_M >= 0x03)
S
S/** \brief  Enable FIQ
S
S    This function enables FIQ interrupts by clearing the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
Sstatic __INLINE void __enable_fault_irq(void)
S{
S  __ASM ("cpsie f");
S}
S
S
S/** \brief  Disable FIQ
S
S    This function disables FIQ interrupts by setting the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
Sstatic __INLINE void __disable_fault_irq(void)
S{
S  __ASM ("cpsid f");
S}
S
S
S/* intrinsic unsigned long __get_BASEPRI( void );   (see intrinsic.h) */
S/* intrinsic void __set_BASEPRI( unsigned long );   (see intrinsic.h) */
S/* intrinsic unsigned long __get_FAULTMASK( void ); (see intrinsic.h) */
S/* intrinsic void __set_FAULTMASK(unsigned long);   (see intrinsic.h) */
S
S#endif /* (__CORTEX_M >= 0x03) */
S
S
S#if       (__CORTEX_M == 0x04)
S
S/** \brief  Get FPSCR
S
S    This function returns the current value of the Floating Point Status/Control register.
S
S    \return               Floating Point Status/Control register value
S */
Sstatic uint32_t __get_FPSCR(void)
S{
S#if (__FPU_PRESENT == 1)
S  __ASM("vmrs r0, fpscr"); 
S#else
S  return(0);
S#endif
S}
S
S
S/** \brief  Set FPSCR
S
S    This function assigns the given value to the Floating Point Status/Control register.
S
S    \param [in]    fpscr  Floating Point Status/Control value to set
S */
Sstatic void __set_FPSCR(uint32_t fpscr)
S{
S#if (__FPU_PRESENT == 1)
S  __ASM("vmsr fpscr, r0");
S#endif
S}
S
S#endif /* (__CORTEX_M == 0x04) */
S
S#pragma diag_default=Pe940
S
S
S#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
S/* GNU gcc specific functions */
S
S/** \brief  Enable IRQ Interrupts
S
S  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
S  Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
S{
S  __ASM volatile ("cpsie i");
S}
S
S
S/** \brief  Disable IRQ Interrupts
S
S  This function disables IRQ interrupts by setting the I-bit in the CPSR.
S  Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
S{
S  __ASM volatile ("cpsid i");
S}
S
S
S/** \brief  Get Control Register
S
S    This function returns the content of the Control Register.
S
S    \return               Control Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_CONTROL(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, control" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Control Register
S
S    This function writes the given value to the Control Register.
S
S    \param [in]    control  Control Register value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_CONTROL(uint32_t control)
S{
S  __ASM volatile ("MSR control, %0" : : "r" (control) );
S}
S
S
S/** \brief  Get ISPR Register
S
S    This function returns the content of the ISPR Register.
S
S    \return               ISPR Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_IPSR(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Get APSR Register
S
S    This function returns the content of the APSR Register.
S
S    \return               APSR Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_APSR(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, apsr" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Get xPSR Register
S
S    This function returns the content of the xPSR Register.
S
S    \return               xPSR Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_xPSR(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Get Process Stack Pointer
S
S    This function returns the current value of the Process Stack Pointer (PSP).
S
S    \return               PSP Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_PSP(void)
S{
S  register uint32_t result;
S
S  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
S  return(result);
S}
S 
S
S/** \brief  Set Process Stack Pointer
S
S    This function assigns the given value to the Process Stack Pointer (PSP).
S
S    \param [in]    topOfProcStack  Process Stack Pointer value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_PSP(uint32_t topOfProcStack)
S{
S  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
S}
S
S
S/** \brief  Get Main Stack Pointer
S
S    This function returns the current value of the Main Stack Pointer (MSP).
S
S    \return               MSP Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
S{
S  register uint32_t result;
S
S  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
S  return(result);
S}
S 
S
S/** \brief  Set Main Stack Pointer
S
S    This function assigns the given value to the Main Stack Pointer (MSP).
S
S    \param [in]    topOfMainStack  Main Stack Pointer value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_MSP(uint32_t topOfMainStack)
S{
S  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) );
S}
S
S
S/** \brief  Get Priority Mask
S
S    This function returns the current state of the priority mask bit from the Priority Mask Register.
S
S    \return               Priority Mask value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_PRIMASK(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, primask" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Priority Mask
S
S    This function assigns the given value to the Priority Mask Register.
S
S    \param [in]    priMask  Priority Mask
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_PRIMASK(uint32_t priMask)
S{
S  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
S}
S 
S
S#if       (__CORTEX_M >= 0x03)
S
S/** \brief  Enable FIQ
S
S    This function enables FIQ interrupts by clearing the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __enable_fault_irq(void)
S{
S  __ASM volatile ("cpsie f");
S}
S
S
S/** \brief  Disable FIQ
S
S    This function disables FIQ interrupts by setting the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __disable_fault_irq(void)
S{
S  __ASM volatile ("cpsid f");
S}
S
S
S/** \brief  Get Base Priority
S
S    This function returns the current value of the Base Priority register.
S
S    \return               Base Priority register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_BASEPRI(void)
S{
S  uint32_t result;
S  
S  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Base Priority
S
S    This function assigns the given value to the Base Priority register.
S
S    \param [in]    basePri  Base Priority value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_BASEPRI(uint32_t value)
S{
S  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
S}
S
S
S/** \brief  Get Fault Mask
S
S    This function returns the current value of the Fault Mask register.
S
S    \return               Fault Mask register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_FAULTMASK(void)
S{
S  uint32_t result;
S  
S  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Fault Mask
S
S    This function assigns the given value to the Fault Mask register.
S
S    \param [in]    faultMask  Fault Mask value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_FAULTMASK(uint32_t faultMask)
S{
S  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
S}
S
S#endif /* (__CORTEX_M >= 0x03) */
S
S
S#if       (__CORTEX_M == 0x04)
S
S/** \brief  Get FPSCR
S
S    This function returns the current value of the Floating Point Status/Control register.
S
S    \return               Floating Point Status/Control register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_FPSCR(void)
S{
S#if (__FPU_PRESENT == 1)
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, fpscr" : "=r" (result) );
S  return(result);
S#else
S   return(0);
S#endif
S}
S
S
S/** \brief  Set FPSCR
S
S    This function assigns the given value to the Floating Point Status/Control register.
S
S    \param [in]    fpscr  Floating Point Status/Control value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_FPSCR(uint32_t fpscr)
S{
S#if (__FPU_PRESENT == 1)
S  __ASM volatile ("MSR fpscr, %0" : : "r" (fpscr) );
S#endif
S}
S
S#endif /* (__CORTEX_M == 0x04) */
S
S
S#elif (defined (__TASKING__)) /*--------------- TASKING Compiler -----------------*/
S/* TASKING carm specific functions */
S
S/*
S * The CMSIS functions have been implemented as intrinsics in the compiler.
S * Please use "carm -?i" to get an up to date list of all instrinsics,
S * Including the CMSIS ones.
S */
S
N#endif
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N#endif /* __CORE_CMFUNC_H__ */
L 97 "C:\Keil\ARM\CMSIS\Include\core_cm3.h" 2
N
N#endif /* __CORE_CM3_H_GENERIC */
N
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM3_H_DEPENDANT
N#define __CORE_CM3_H_DEPENDANT
N
N/* IO definitions (access restrictions to peripheral registers) */
N#ifdef __cplusplus
S  #define     __I     volatile           /*!< defines 'read only' permissions                 */
N#else
N  #define     __I     volatile const     /*!< defines 'read only' permissions                 */
N#endif
N#define     __O     volatile             /*!< defines 'write only' permissions                */
N#define     __IO    volatile             /*!< defines 'read / write' permissions              */
N
N/*@} end of group CMSIS_core_definitions */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N ******************************************************************************/
N/** \defgroup CMSIS_core_register CMSIS Core Register
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N  - Core Debug Register
N  - Core MPU Register
N*/
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_CORE CMSIS Core
N  Type definitions for the Cortex-M Core Registers
N  @{
N */
N
N/** \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N#if (__CORTEX_M != 0x04)
X#if ((0x03) != 0x04)
N    uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
N#else
S    uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
S    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
S    uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
N#endif
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
N  } b;                                   /*!< Structure used for bit  access                  */
N  uint32_t w;                            /*!< Type      used for word access                  */ 
N} APSR_Type;
N
N
N/** \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
N  } b;                                   /*!< Structure used for bit  access                  */
N  uint32_t w;                            /*!< Type      used for word access                  */
N} IPSR_Type;
N
N
N/** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
N#if (__CORTEX_M != 0x04)
X#if ((0x03) != 0x04)
N    uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
N#else
S    uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
S    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
S    uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
N#endif
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
N    uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
N  } b;                                   /*!< Structure used for bit  access                  */
N  uint32_t w;                            /*!< Type      used for word access                  */
N} xPSR_Type;
N
N
N/** \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
N    uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
N    uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
N  } b;                                   /*!< Structure used for bit  access                  */
N  uint32_t w;                            /*!< Type      used for word access                  */
N} CONTROL_Type;
N
N/*@} end of group CMSIS_CORE */
N
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_NVIC CMSIS NVIC
N  Type definitions for the Cortex-M NVIC Registers
N  @{
N */
N
N/** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register           */
X  volatile uint32_t ISER[8];                  
N       uint32_t RESERVED0[24];                                   
N  __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register         */
X  volatile uint32_t ICER[8];                  
N       uint32_t RSERVED1[24];                                    
N  __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register          */
X  volatile uint32_t ISPR[8];                  
N       uint32_t RESERVED2[24];                                   
N  __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register        */
X  volatile uint32_t ICPR[8];                  
N       uint32_t RESERVED3[24];                                   
N  __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register           */
X  volatile uint32_t IABR[8];                  
N       uint32_t RESERVED4[56];                                   
N  __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bit wide) */
X  volatile uint8_t  IP[240];                  
N       uint32_t RESERVED5[644];                                  
N  __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Register     */
X  volatile  uint32_t STIR;                     
N}  NVIC_Type;                                               
N
N/*@} end of group CMSIS_NVIC */
N
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_SCB CMSIS SCB
N  Type definitions for the Cortex-M System Control Block Registers
N  @{
N */
N
N/** \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPU ID Base Register                                  */
X  volatile const  uint32_t CPUID;                    
N  __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control State Register                      */
X  volatile uint32_t ICSR;                     
N  __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */
X  volatile uint32_t VTOR;                     
N  __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt / Reset Control Register        */
X  volatile uint32_t AIRCR;                    
N  __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */
X  volatile uint32_t SCR;                      
N  __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */
X  volatile uint32_t CCR;                      
N  __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registers (4-7, 8-11, 12-15) */
X  volatile uint8_t  SHP[12];                  
N  __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State Register             */
X  volatile uint32_t SHCSR;                    
N  __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Register                    */
X  volatile uint32_t CFSR;                     
N  __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  Hard Fault Status Register                            */
X  volatile uint32_t HFSR;                     
N  __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register                           */
X  volatile uint32_t DFSR;                     
N  __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  Mem Manage Address Register                           */
X  volatile uint32_t MMFAR;                    
N  __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  Bus Fault Address Register                            */
X  volatile uint32_t BFAR;                     
N  __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register                       */
X  volatile uint32_t AFSR;                     
N  __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register                            */
X  volatile const  uint32_t PFR[2];                   
N  __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register                                */
X  volatile const  uint32_t DFR;                      
N  __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register                            */
X  volatile const  uint32_t ADR;                      
N  __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register                         */
X  volatile const  uint32_t MMFR[4];                  
N  __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  ISA Feature Register                                  */
X  volatile const  uint32_t ISAR[5];                  
N} SCB_Type;                                                
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB ICSR: RETTOBASE Position */
N#define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB ICSR: RETTOBASE Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB VTOR: TBLBASE Position */
N#define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB VTOR: TBLBASE Mask */
N
N#define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB VTOR: TBLOFF Position */
N#define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB VTOR: TBLOFF Mask */
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB AIRCR: PRIGROUP Position */
N#define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N#define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB AIRCR: VECTRESET Position */
N#define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB AIRCR: VECTRESET Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB CCR: BFHFNMIGN Position */
N#define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB CCR: BFHFNMIGN Mask */
N
N#define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB CCR: DIV_0_TRP Position */
N#define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB CCR: DIV_0_TRP Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N#define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB CCR: USERSETMPEND Position */
N#define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB CCR: USERSETMPEND Mask */
N
N#define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB CCR: NONBASETHRDENA Position */
N#define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB CCR: NONBASETHRDENA Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB SHCSR: USGFAULTENA Position */
N#define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB SHCSR: USGFAULTENA Mask */
N
N#define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB SHCSR: BUSFAULTENA Position */
N#define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB SHCSR: BUSFAULTENA Mask */
N
N#define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB SHCSR: MEMFAULTENA Position */
N#define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB SHCSR: MEMFAULTENA Mask */
N
N#define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N#define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB SHCSR: BUSFAULTPENDED Position */
N#define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB SHCSR: BUSFAULTPENDED Mask */
N
N#define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB SHCSR: MEMFAULTPENDED Position */
N#define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB SHCSR: MEMFAULTPENDED Mask */
N
N#define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB SHCSR: USGFAULTPENDED Position */
N#define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB SHCSR: USGFAULTPENDED Mask */
N
N#define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB SHCSR: SYSTICKACT Position */
N#define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB SHCSR: SYSTICKACT Mask */
N
N#define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB SHCSR: PENDSVACT Position */
N#define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB SHCSR: PENDSVACT Mask */
N
N#define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB SHCSR: MONITORACT Position */
N#define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB SHCSR: MONITORACT Mask */
N
N#define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB SHCSR: SVCALLACT Position */
N#define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB SHCSR: SVCALLACT Mask */
N                                     
N#define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB SHCSR: USGFAULTACT Position */
N#define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB SHCSR: USGFAULTACT Mask */
N
N#define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB SHCSR: BUSFAULTACT Position */
N#define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB SHCSR: BUSFAULTACT Mask */
N
N#define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB SHCSR: MEMFAULTACT Position */
N#define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB SHCSR: MEMFAULTACT Mask */
N
N/* SCB Configurable Fault Status Registers Definitions */
N#define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB CFSR: Usage Fault Status Register Position */
N#define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB CFSR: Usage Fault Status Register Mask */
N
N#define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB CFSR: Bus Fault Status Register Position */
N#define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB CFSR: Bus Fault Status Register Mask */
N
N#define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB CFSR: Memory Manage Fault Status Register Position */
N#define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB CFSR: Memory Manage Fault Status Register Mask */
N
N/* SCB Hard Fault Status Registers Definitions */
N#define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB HFSR: DEBUGEVT Position */
N#define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB HFSR: DEBUGEVT Mask */
N
N#define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB HFSR: FORCED Position */
N#define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB HFSR: FORCED Mask */
N
N#define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB HFSR: VECTTBL Position */
N#define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB HFSR: VECTTBL Mask */
N
N/* SCB Debug Fault Status Register Definitions */
N#define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB DFSR: EXTERNAL Position */
N#define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB DFSR: EXTERNAL Mask */
N
N#define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB DFSR: VCATCH Position */
N#define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB DFSR: VCATCH Mask */
N
N#define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB DFSR: DWTTRAP Position */
N#define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB DFSR: DWTTRAP Mask */
N
N#define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB DFSR: BKPT Position */
N#define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB DFSR: BKPT Mask */
N
N#define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB DFSR: HALTED Position */
N#define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB DFSR: HALTED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_SysTick CMSIS SysTick
N  Type definitions for the Cortex-M System Timer Registers
N  @{
N */
N
N/** \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                     
N  __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register       */
X  volatile uint32_t LOAD;                     
N  __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register      */
X  volatile uint32_t VAL;                      
N  __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register        */
X  volatile const  uint32_t CALIB;                    
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_ITM CMSIS ITM
N  Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
N  @{
N */
N
N/** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
N */
Ntypedef struct
N{
N  __O  union  
X  volatile  union  
N  {
N    __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit                   */
X    volatile  uint8_t    u8;                   
N    __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit                  */
X    volatile  uint16_t   u16;                  
N    __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit                  */
X    volatile  uint32_t   u32;                  
N  }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers               */
N       uint32_t RESERVED0[864];                                 
N  __IO uint32_t TER;                     /*!< Offset:       (R/W)  ITM Trace Enable Register                 */
X  volatile uint32_t TER;                      
N       uint32_t RESERVED1[15];                                  
N  __IO uint32_t TPR;                     /*!< Offset:       (R/W)  ITM Trace Privilege Register              */
X  volatile uint32_t TPR;                      
N       uint32_t RESERVED2[15];                                  
N  __IO uint32_t TCR;                     /*!< Offset:       (R/W)  ITM Trace Control Register                */
X  volatile uint32_t TCR;                      
N       uint32_t RESERVED3[29];                                  
N  __IO uint32_t IWR;                     /*!< Offset:       (R/W)  ITM Integration Write Register            */
X  volatile uint32_t IWR;                      
N  __IO uint32_t IRR;                     /*!< Offset:       (R/W)  ITM Integration Read Register             */
X  volatile uint32_t IRR;                      
N  __IO uint32_t IMCR;                    /*!< Offset:       (R/W)  ITM Integration Mode Control Register     */
X  volatile uint32_t IMCR;                     
N       uint32_t RESERVED4[43];                                  
N  __IO uint32_t LAR;                     /*!< Offset:       (R/W)  ITM Lock Access Register                  */
X  volatile uint32_t LAR;                      
N  __IO uint32_t LSR;                     /*!< Offset:       (R/W)  ITM Lock Status Register                  */
X  volatile uint32_t LSR;                      
N       uint32_t RESERVED5[6];                                   
N  __I  uint32_t PID4;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Register #4 */
X  volatile const  uint32_t PID4;                     
N  __I  uint32_t PID5;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Register #5 */
X  volatile const  uint32_t PID5;                     
N  __I  uint32_t PID6;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Register #6 */
X  volatile const  uint32_t PID6;                     
N  __I  uint32_t PID7;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Register #7 */
X  volatile const  uint32_t PID7;                     
N  __I  uint32_t PID0;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Register #0 */
X  volatile const  uint32_t PID0;                     
N  __I  uint32_t PID1;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Register #1 */
X  volatile const  uint32_t PID1;                     
N  __I  uint32_t PID2;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Register #2 */
X  volatile const  uint32_t PID2;                     
N  __I  uint32_t PID3;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Register #3 */
X  volatile const  uint32_t PID3;                     
N  __I  uint32_t CID0;                    /*!< Offset:       (R/ )  ITM Component  Identification Register #0 */
X  volatile const  uint32_t CID0;                     
N  __I  uint32_t CID1;                    /*!< Offset:       (R/ )  ITM Component  Identification Register #1 */
X  volatile const  uint32_t CID1;                     
N  __I  uint32_t CID2;                    /*!< Offset:       (R/ )  ITM Component  Identification Register #2 */
X  volatile const  uint32_t CID2;                     
N  __I  uint32_t CID3;                    /*!< Offset:       (R/ )  ITM Component  Identification Register #3 */
X  volatile const  uint32_t CID3;                     
N} ITM_Type;                                                
N
N/* ITM Trace Privilege Register Definitions */
N#define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM TPR: PRIVMASK Position */
N#define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM TPR: PRIVMASK Mask */
N
N/* ITM Trace Control Register Definitions */
N#define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM TCR: BUSY Position */
N#define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM TCR: BUSY Mask */
N
N#define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM TCR: ATBID Position */
N#define ITM_TCR_ATBID_Msk                  (0x7FUL << ITM_TCR_ATBID_Pos)                  /*!< ITM TCR: ATBID Mask */
N
N#define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM TCR: TSPrescale Position */
N#define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM TCR: TSPrescale Mask */
N
N#define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM TCR: SWOENA Position */
N#define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM TCR: SWOENA Mask */
N
N#define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM TCR: DWTENA Position */
N#define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM TCR: DWTENA Mask */
N
N#define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM TCR: SYNCENA Position */
N#define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM TCR: SYNCENA Mask */
N
N#define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM TCR: TSENA Position */
N#define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM TCR: TSENA Mask */
N
N#define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM TCR: ITM Enable bit Position */
N#define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM TCR: ITM Enable bit Mask */
N
N/* ITM Integration Write Register Definitions */
N#define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM IWR: ATVALIDM Position */
N#define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM IWR: ATVALIDM Mask */
N
N/* ITM Integration Read Register Definitions */
N#define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM IRR: ATREADYM Position */
N#define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM IRR: ATREADYM Mask */
N
N/* ITM Integration Mode Control Register Definitions */
N#define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM IMCR: INTEGRATION Position */
N#define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM IMCR: INTEGRATION Mask */
N
N/* ITM Lock Status Register Definitions */
N#define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM LSR: ByteAcc Position */
N#define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM LSR: ByteAcc Mask */
N
N#define ITM_LSR_Access_Pos                  1                                             /*!< ITM LSR: Access Position */
N#define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM LSR: Access Mask */
N
N#define ITM_LSR_Present_Pos                 0                                             /*!< ITM LSR: Present Position */
N#define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM LSR: Present Mask */
N
N/*@}*/ /* end of group CMSIS_ITM */
N
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_InterruptType CMSIS Interrupt Type
N  Type definitions for the Cortex-M Interrupt Type Register
N  @{
N */
N
N/** \brief  Structure type to access the Interrupt Type Register.
N */
Ntypedef struct
N{
N       uint32_t RESERVED0;
N  __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Control Type Register */
X  volatile const  uint32_t ICTR;                     
N#if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
X#if ((0L) && (__CM3_REV >= 0x200))
S  __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      */
N#else
N       uint32_t RESERVED1;
N#endif
N} InterruptType_Type;
N
N/* Interrupt Controller Type Register Definitions */
N#define IntType_ICTR_INTLINESNUM_Pos  0                                                   /*!< InterruptType ICTR: INTLINESNUM Position */
N#define IntType_ICTR_INTLINESNUM_Msk (0x1FUL << IntType_ICTR_INTLINESNUM_Pos)             /*!< InterruptType ICTR: INTLINESNUM Mask */
N
N/* Auxiliary Control Register Definitions */
N#define IntType_ACTLR_DISFOLD_Pos     2                                                   /*!< InterruptType ACTLR: DISFOLD Position */
N#define IntType_ACTLR_DISFOLD_Msk    (1UL << IntType_ACTLR_DISFOLD_Pos)                   /*!< InterruptType ACTLR: DISFOLD Mask */
N
N#define IntType_ACTLR_DISDEFWBUF_Pos  1                                                   /*!< InterruptType ACTLR: DISDEFWBUF Position */
N#define IntType_ACTLR_DISDEFWBUF_Msk (1UL << IntType_ACTLR_DISDEFWBUF_Pos)                /*!< InterruptType ACTLR: DISDEFWBUF Mask */
N
N#define IntType_ACTLR_DISMCYCINT_Pos  0                                                   /*!< InterruptType ACTLR: DISMCYCINT Position */
N#define IntType_ACTLR_DISMCYCINT_Msk (1UL << IntType_ACTLR_DISMCYCINT_Pos)                /*!< InterruptType ACTLR: DISMCYCINT Mask */
N
N/*@}*/ /* end of group CMSIS_InterruptType */
N
N
N#if (__MPU_PRESENT == 1)
X#if (1 == 1)
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_MPU CMSIS MPU
N  Type definitions for the Cortex-M Memory Protection Unit (MPU)
N  @{
N */
N
N/** \brief  Structure type to access the Memory Protection Unit (MPU).
N */
Ntypedef struct
N{
N  __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register                              */
X  volatile const  uint32_t TYPE;                     
N  __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register                           */
X  volatile uint32_t CTRL;                     
N  __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register                     */
X  volatile uint32_t RNR;                      
N  __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register               */
X  volatile uint32_t RBAR;                     
N  __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Register         */
X  volatile uint32_t RASR;                     
N  __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address Register       */
X  volatile uint32_t RBAR_A1;                  
N  __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and Size Register */
X  volatile uint32_t RASR_A1;                  
N  __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address Register       */
X  volatile uint32_t RBAR_A2;                  
N  __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and Size Register */
X  volatile uint32_t RASR_A2;                  
N  __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address Register       */
X  volatile uint32_t RBAR_A3;                  
N  __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and Size Register */
X  volatile uint32_t RASR_A3;                  
N} MPU_Type;                                                
N
N/* MPU Type Register */
N#define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU TYPE: IREGION Position */
N#define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU TYPE: IREGION Mask */
N
N#define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU TYPE: DREGION Position */
N#define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU TYPE: DREGION Mask */
N
N#define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU TYPE: SEPARATE Position */
N#define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU TYPE: SEPARATE Mask */
N
N/* MPU Control Register */
N#define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU CTRL: PRIVDEFENA Position */
N#define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU CTRL: PRIVDEFENA Mask */
N
N#define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU CTRL: HFNMIENA Position */
N#define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU CTRL: HFNMIENA Mask */
N
N#define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU CTRL: ENABLE Position */
N#define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU CTRL: ENABLE Mask */
N
N/* MPU Region Number Register */
N#define MPU_RNR_REGION_Pos                  0                                             /*!< MPU RNR: REGION Position */
N#define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU RNR: REGION Mask */
N
N/* MPU Region Base Address Register */
N#define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU RBAR: ADDR Position */
N#define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU RBAR: ADDR Mask */
N
N#define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU RBAR: VALID Position */
N#define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU RBAR: VALID Mask */
N
N#define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU RBAR: REGION Position */
N#define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU RBAR: REGION Mask */
N
N/* MPU Region Attribute and Size Register */
N#define MPU_RASR_XN_Pos                    28                                             /*!< MPU RASR: XN Position */
N#define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU RASR: XN Mask */
N
N#define MPU_RASR_AP_Pos                    24                                             /*!< MPU RASR: AP Position */
N#define MPU_RASR_AP_Msk                    (7UL << MPU_RASR_AP_Pos)                       /*!< MPU RASR: AP Mask */
N
N#define MPU_RASR_TEX_Pos                   19                                             /*!< MPU RASR: TEX Position */
N#define MPU_RASR_TEX_Msk                   (7UL << MPU_RASR_TEX_Pos)                      /*!< MPU RASR: TEX Mask */
N
N#define MPU_RASR_S_Pos                     18                                             /*!< MPU RASR: Shareable bit Position */
N#define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU RASR: Shareable bit Mask */
N
N#define MPU_RASR_C_Pos                     17                                             /*!< MPU RASR: Cacheable bit Position */
N#define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU RASR: Cacheable bit Mask */
N
N#define MPU_RASR_B_Pos                     16                                             /*!< MPU RASR: Bufferable bit Position */
N#define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU RASR: Bufferable bit Mask */
N
N#define MPU_RASR_SRD_Pos                    8                                             /*!< MPU RASR: Sub-Region Disable Position */
N#define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU RASR: Sub-Region Disable Mask */
N
N#define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU RASR: Region Size Field Position */
N#define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU RASR: Region Size Field Mask */
N
N#define MPU_RASR_ENA_Pos                     0                                            /*!< MPU RASR: Region enable bit Position */
N#define MPU_RASR_ENA_Msk                    (0x1UL << MPU_RASR_ENA_Pos)                   /*!< MPU RASR: Region enable bit Disable Mask */
N
N/*@} end of group CMSIS_MPU */
N#endif
N
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_CoreDebug CMSIS Core Debug
N  Type definitions for the Cortex-M Core Debug Registers
N  @{
N */
N
N/** \brief  Structure type to access the Core Debug Register (CoreDebug).
N */
Ntypedef struct
N{
N  __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status Register    */
X  volatile uint32_t DHCSR;                    
N  __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Register        */
X  volatile  uint32_t DCRSR;                    
N  __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Register            */
X  volatile uint32_t DCRDR;                    
N  __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Control Register */
X  volatile uint32_t DEMCR;                    
N} CoreDebug_Type;
N
N/* Debug Halting Control and Status Register */
N#define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< CoreDebug DHCSR: DBGKEY Position */
N#define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */
N
N#define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< CoreDebug DHCSR: S_RESET_ST Position */
N#define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */
N
N#define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< CoreDebug DHCSR: S_RETIRE_ST Position */
N#define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< CoreDebug DHCSR: S_RETIRE_ST Mask */
N
N#define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< CoreDebug DHCSR: S_LOCKUP Position */
N#define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< CoreDebug DHCSR: S_LOCKUP Mask */
N
N#define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< CoreDebug DHCSR: S_SLEEP Position */
N#define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< CoreDebug DHCSR: S_SLEEP Mask */
N
N#define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< CoreDebug DHCSR: S_HALT Position */
N#define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< CoreDebug DHCSR: S_HALT Mask */
N
N#define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< CoreDebug DHCSR: S_REGRDY Position */
N#define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< CoreDebug DHCSR: S_REGRDY Mask */
N
N#define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< CoreDebug DHCSR: C_SNAPSTALL Position */
N#define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< CoreDebug DHCSR: C_SNAPSTALL Mask */
N
N#define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< CoreDebug DHCSR: C_MASKINTS Position */
N#define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< CoreDebug DHCSR: C_MASKINTS Mask */
N
N#define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< CoreDebug DHCSR: C_STEP Position */
N#define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< CoreDebug DHCSR: C_STEP Mask */
N
N#define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< CoreDebug DHCSR: C_HALT Position */
N#define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< CoreDebug DHCSR: C_HALT Mask */
N
N#define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< CoreDebug DHCSR: C_DEBUGEN Position */
N#define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< CoreDebug DHCSR: C_DEBUGEN Mask */
N
N/* Debug Core Register Selector Register */
N#define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< CoreDebug DCRSR: REGWnR Position */
N#define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< CoreDebug DCRSR: REGWnR Mask */
N
N#define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< CoreDebug DCRSR: REGSEL Position */
N#define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< CoreDebug DCRSR: REGSEL Mask */
N
N/* Debug Exception and Monitor Control Register */
N#define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< CoreDebug DEMCR: TRCENA Position */
N#define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< CoreDebug DEMCR: TRCENA Mask */
N
N#define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< CoreDebug DEMCR: MON_REQ Position */
N#define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< CoreDebug DEMCR: MON_REQ Mask */
N
N#define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< CoreDebug DEMCR: MON_STEP Position */
N#define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< CoreDebug DEMCR: MON_STEP Mask */
N
N#define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< CoreDebug DEMCR: MON_PEND Position */
N#define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< CoreDebug DEMCR: MON_PEND Mask */
N
N#define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< CoreDebug DEMCR: MON_EN Position */
N#define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< CoreDebug DEMCR: MON_EN Mask */
N
N#define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< CoreDebug DEMCR: VC_HARDERR Position */
N#define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< CoreDebug DEMCR: VC_HARDERR Mask */
N
N#define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< CoreDebug DEMCR: VC_INTERR Position */
N#define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< CoreDebug DEMCR: VC_INTERR Mask */
N
N#define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< CoreDebug DEMCR: VC_BUSERR Position */
N#define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< CoreDebug DEMCR: VC_BUSERR Mask */
N
N#define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< CoreDebug DEMCR: VC_STATERR Position */
N#define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< CoreDebug DEMCR: VC_STATERR Mask */
N
N#define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< CoreDebug DEMCR: VC_CHKERR Position */
N#define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< CoreDebug DEMCR: VC_CHKERR Mask */
N
N#define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< CoreDebug DEMCR: VC_NOCPERR Position */
N#define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< CoreDebug DEMCR: VC_NOCPERR Mask */
N
N#define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< CoreDebug DEMCR: VC_MMERR Position */
N#define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< CoreDebug DEMCR: VC_MMERR Mask */
N
N#define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< CoreDebug DEMCR: VC_CORERESET Position */
N#define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< CoreDebug DEMCR: VC_CORERESET Mask */
N
N/*@} end of group CMSIS_CoreDebug */
N
N
N/** \ingroup  CMSIS_core_register   
N  @{
N */
N 
N/* Memory mapping of Cortex-M3 Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address                  */
N#define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address           */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address              */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address                 */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register           */
N#define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct          */
N#define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration struct      */
N#define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struct         */
N#define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct          */
N#define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration struct   */
N
N#if (__MPU_PRESENT == 1)
X#if (1 == 1)
N  #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit            */
N  #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit            */
N#endif
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N ******************************************************************************/
N/** \defgroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Debug Functions
N  - Core Register Access Functions
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/** \ingroup  CMSIS_Core_FunctionInterface   
N    \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
N  @{
N */
N
N/** \brief  Set Priority Grouping
N
N  This function sets the priority grouping field using the required unlock sequence.
N  The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
N  Only values from 0..7 are used.
N  In case of a conflict between priority grouping and available
N  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
N
N    \param [in]      PriorityGroup  Priority grouping field
N */
Nstatic __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
Xstatic __inline void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
N{
N  uint32_t reg_value;
N  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */
N  
N  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
X  reg_value  =  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL))->AIRCR;                                                    
N  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
X  reg_value &= ~((0xFFFFUL << 16) | (7UL << 8));              
N  reg_value  =  (reg_value                       |
N                (0x5FA << SCB_AIRCR_VECTKEY_Pos) | 
X                (0x5FA << 16) | 
N                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
N  SCB->AIRCR =  reg_value;
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL))->AIRCR =  reg_value;
N}
N
N
N/** \brief  Get Priority Grouping
N
N  This function gets the priority grouping from NVIC Interrupt Controller.
N  Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
N
N    \return                Priority grouping field
N */
Nstatic __INLINE uint32_t NVIC_GetPriorityGrouping(void)
Xstatic __inline uint32_t NVIC_GetPriorityGrouping(void)
N{
N  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
X  return ((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL))->AIRCR & (7UL << 8)) >> 8);    
N}
N
N
N/** \brief  Enable External Interrupt
N
N    This function enables a device specific interupt in the NVIC interrupt controller.
N    The interrupt number cannot be a negative value. 
N
N    \param [in]      IRQn  Number of the external interrupt to enable
N */
Nstatic __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N
N/** \brief  Disable External Interrupt
N
N    This function disables a device specific interupt in the NVIC interrupt controller.
N    The interrupt number cannot be a negative value. 
N
N    \param [in]      IRQn  Number of the external interrupt to disable
N */
Nstatic __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N
N/** \brief  Get Pending Interrupt
N
N    This function reads the pending register in the NVIC and returns the pending bit
N    for the specified interrupt. 
N
N    \param [in]      IRQn  Number of the interrupt for get pending
N    \return             0  Interrupt status is not pending
N    \return             1  Interrupt status is pending
N */
Nstatic __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
X  return((uint32_t) ((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
N}
N
N
N/** \brief  Set Pending Interrupt
N
N    This function sets the pending bit for the specified interrupt. 
N    The interrupt number cannot be a negative value.
N
N    \param [in]      IRQn  Number of the interrupt for set pending
N */
Nstatic __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N
N/** \brief  Clear Pending Interrupt
N
N    This function clears the pending bit for the specified interrupt. 
N    The interrupt number cannot be a negative value.
N
N    \param [in]      IRQn  Number of the interrupt for clear pending
N */
Nstatic __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N
N/** \brief  Get Active Interrupt
N
N    This function reads the active register in NVIC and returns the active bit. 
N    \param [in]      IRQn  Number of the interrupt for get active
N    \return             0  Interrupt status is not active
N    \return             1  Interrupt status is active
N */
Nstatic __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetActive(IRQn_Type IRQn)
N{
N  return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if active else 0 */
X  return((uint32_t)((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
N}
N
N
N/** \brief  Set Interrupt Priority
N
N    This function sets the priority for the specified interrupt. The interrupt 
N    number can be positive to specify an external (device specific) 
N    interrupt, or negative to specify an internal (core) interrupt.
N
N    Note: The priority cannot be set for every core interrupt.
N
N    \param [in]      IRQn  Number of the interrupt for set priority
N    \param [in]  priority  Priority to set
N */
Nstatic __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if(IRQn < 0) {
N    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL))->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - 5)) & 0xff); }  
N  else {
N    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->IP[(uint32_t)(IRQn)] = ((priority << (8 - 5)) & 0xff);    }         
N}
N
N
N/** \brief  Get Interrupt Priority
N
N    This function reads the priority for the specified interrupt. The interrupt 
N    number can be positive to specify an external (device specific) 
N    interrupt, or negative to specify an internal (core) interrupt.
N
N    The returned priority value is automatically aligned to the implemented
N    priority bits of the microcontroller.
N
N    \param [in]   IRQn  Number of the interrupt for get priority
N    \return             Interrupt Priority
N */
Nstatic __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if(IRQn < 0) {
N    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M  system interrupts */
X    return((uint32_t)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL))->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - 5)));  }  
N  else {
N    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
X    return((uint32_t)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->IP[(uint32_t)(IRQn)]           >> (8 - 5)));  }  
N}
N
N
N/** \brief  Encode Priority
N
N    This function encodes the priority for an interrupt with the given priority group,
N    preemptive priority value and sub priority value.
N    In case of a conflict between priority grouping and available
N    priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
N 
N    The returned priority value can be used for NVIC_SetPriority(...) function
N
N    \param [in]     PriorityGroup  Used priority group
N    \param [in]   PreemptPriority  Preemptive priority value (starting from 0)
N    \param [in]       SubPriority  Sub priority value (starting from 0)
N    \return                        Encoded priority for the interrupt
N */
Nstatic __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
Xstatic __inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
X  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 5) ? 5 : 7 - PriorityGroupTmp;
N  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
X  SubPriorityBits     = ((PriorityGroupTmp + 5) < 7) ? 0 : PriorityGroupTmp - 7 + 5;
N 
N  return (
N           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
N           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
N         );
N}
N
N
N/** \brief  Decode Priority
N
N    This function decodes an interrupt priority value with the given priority group to 
N    preemptive priority value and sub priority value.
N    In case of a conflict between priority grouping and available
N    priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
N 
N    The priority value can be retrieved with NVIC_GetPriority(...) function
N 
N    \param [in]         Priority   Priority value
N    \param [in]     PriorityGroup  Used priority group
N    \param [out] pPreemptPriority  Preemptive priority value (starting from 0)
N    \param [out]     pSubPriority  Sub priority value (starting from 0)
N */
Nstatic __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
Xstatic __inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
X  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 5) ? 5 : 7 - PriorityGroupTmp;
N  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
X  SubPriorityBits     = ((PriorityGroupTmp + 5) < 7) ? 0 : PriorityGroupTmp - 7 + 5;
N  
N  *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
N  *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
N}
N
N
N/** \brief  System Reset
N
N    This function initiate a system reset request to reset the MCU.
N */
Nstatic __INLINE void NVIC_SystemReset(void)
Xstatic __inline void NVIC_SystemReset(void)
N{
N  __DSB();                                                     /* Ensure all outstanding memory accesses included
X  __dsb(0xF);                                                     
N                                                                  buffered write are completed before reset */              
N  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL))->AIRCR  = ((0x5FA << 16)      | 
N                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | 
X                 (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL))->AIRCR & (7UL << 8)) | 
N                 SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
X                 (1UL << 2));                    
N  __DSB();                                                     /* Ensure completion of memory access */              
X  __dsb(0xF);                                                                    
N  while(1);                                                    /* wait until reset */
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/** \ingroup  CMSIS_Core_FunctionInterface   
N    \defgroup CMSIS_Core_SysTickFunctions CMSIS Core SysTick Functions
N  @{
N */
N
N#if (__Vendor_SysTickConfig == 0)
X#if (0 == 0)
N
N/** \brief  System Tick Configuration
N
N    This function initialises the system tick timer and its interrupt and start the system tick timer.
N    Counter is in free running mode to generate periodical interrupts.
N
N    \param [in]  ticks  Number of ticks between two interrupts
N    \return          0  Function succeeded
N    \return          1  Function failed
N */
Nstatic __INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{ 
N  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
X  if (ticks > (0xFFFFFFUL << 0))  return (1);             
N                                                               
N  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL))->LOAD  = (ticks & (0xFFFFFFUL << 0)) - 1;       
N  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
X  NVIC_SetPriority (SysTick_IRQn, (1<<5) - 1);   
N  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL))->VAL   = 0;                                           
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL))->CTRL  = (1UL << 2) | 
N                   SysTick_CTRL_TICKINT_Msk   | 
X                   (1UL << 1)   | 
N                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL << 0);                     
N  return (0);                                                  /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N/* ##################################### Debug In/Output function ########################################### */
N/** \ingroup  CMSIS_Core_FunctionInterface   
N    \defgroup CMSIS_core_DebugFunctions CMSIS Core Debug Functions
N  @{
N */
N
Nextern volatile int32_t ITM_RxBuffer;                    /*!< external variable to receive characters                    */
N#define                 ITM_RXBUFFER_EMPTY    0x5AA55AA5 /*!< value identifying ITM_RxBuffer is ready for next character */
N
N
N/** \brief  ITM Send Character
N
N    This function transmits a character via the ITM channel 0. 
N    It just returns when no debugger is connected that has booked the output.  
N    It is blocking when a debugger is connected, but the previous character send is not transmitted. 
N
N    \param [in]     ch  Character to transmit
N    \return             Character to transmit
N */
Nstatic __INLINE uint32_t ITM_SendChar (uint32_t ch)
Xstatic __inline uint32_t ITM_SendChar (uint32_t ch)
N{
N  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
X  if ((((CoreDebug_Type *) (0xE000EDF0UL))->DEMCR & (1UL << 24))  &&       
N      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
X      (((ITM_Type *) (0xE0000000UL))->TCR & (1UL << 0))                  &&       
N      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
X      (((ITM_Type *) (0xE0000000UL))->TER & (1UL << 0)        )                    )      
N  {
N    while (ITM->PORT[0].u32 == 0);
X    while (((ITM_Type *) (0xE0000000UL))->PORT[0].u32 == 0);
N    ITM->PORT[0].u8 = (uint8_t) ch;
X    ((ITM_Type *) (0xE0000000UL))->PORT[0].u8 = (uint8_t) ch;
N  }  
N  return (ch);
N}
N
N
N/** \brief  ITM Receive Character
N
N    This function inputs a character via external variable ITM_RxBuffer. 
N    It just returns when no debugger is connected that has booked the output.  
N    It is blocking when a debugger is connected, but the previous character send is not transmitted. 
N
N    \return             Received character
N    \return         -1  No character received
N */
Nstatic __INLINE int32_t ITM_ReceiveChar (void) {
Xstatic __inline int32_t ITM_ReceiveChar (void) {
N  int32_t ch = -1;                           /* no character available */
N
N  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY) {
X  if (ITM_RxBuffer != 0x5AA55AA5) {
N    ch = ITM_RxBuffer;
N    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
X    ITM_RxBuffer = 0x5AA55AA5;        
N  }
N  
N  return (ch); 
N}
N
N
N/** \brief  ITM Check Character
N
N    This function checks external variable ITM_RxBuffer whether a character is available or not. 
N    It returns '1' if a character is available and '0' if no character is available. 
N
N    \return          0  No character available
N    \return          1  Character available
N */
Nstatic __INLINE int32_t ITM_CheckChar (void) {
Xstatic __inline int32_t ITM_CheckChar (void) {
N
N  if (ITM_RxBuffer == ITM_RXBUFFER_EMPTY) {
X  if (ITM_RxBuffer == 0x5AA55AA5) {
N    return (0);                                 /* no character available */
N  } else {
N    return (1);                                 /*    character available */
N  }
N}
N
N/*@} end of CMSIS_core_DebugFunctions */
N
N#endif /* __CORE_CM3_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
N
N#ifdef __cplusplus
S}
N#endif
N
N/*lint -restore */
L 97 "C:\Keil\ARM\INC\NXP\LPC17xx\LPC17xx.H" 2
N#include "system_LPC17xx.h"                 /* System Header                                      */
L 1 "C:\Keil\ARM\INC\NXP\LPC17xx\system_LPC17xx.h" 1
N/******************************************************************************
N * @file:    system_LPC17xx.h
N * @purpose: CMSIS Cortex-M3 Device Peripheral Access Layer Header File
N *           for the NXP LPC17xx Device Series 
N * @version: V1.01
N * @date:    22. Jul. 2009
N *----------------------------------------------------------------------------
N *
N * Copyright (C) 2009 ARM Limited. All rights reserved.
N *
N * ARM Limited (ARM) is supplying this software for use with Cortex-M3 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N
N#ifndef __SYSTEM_LPC17xx_H
N#define __SYSTEM_LPC17xx_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif 
N
Nextern uint32_t SystemFrequency;    /*!< System Clock Frequency (Core Clock)  */
N
N
N/**
N * Initialize the system
N *
N * @param  none
N * @return none
N *
N * @brief  Setup the microcontroller system.
N *         Initialize the System and update the SystemFrequency variable.
N */
Nextern void SystemInit (void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __SYSTEM_LPC17xx_H */
L 98 "C:\Keil\ARM\INC\NXP\LPC17xx\LPC17xx.H" 2
N
N
N/******************************************************************************/
N/*                Device Specific Peripheral registers structures             */
N/******************************************************************************/
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/*------------- System Control (SC) ------------------------------------------*/
Ntypedef struct
N{
N  __IO uint32_t FLASHCFG;               /* Flash Accelerator Module           */
X  volatile uint32_t FLASHCFG;                
N       uint32_t RESERVED0[31];
N  __IO uint32_t PLL0CON;                /* Clocking and Power Control         */
X  volatile uint32_t PLL0CON;                 
N  __IO uint32_t PLL0CFG;
X  volatile uint32_t PLL0CFG;
N  __I  uint32_t PLL0STAT;
X  volatile const  uint32_t PLL0STAT;
N  __O  uint32_t PLL0FEED;
X  volatile  uint32_t PLL0FEED;
N       uint32_t RESERVED1[4];
N  __IO uint32_t PLL1CON;
X  volatile uint32_t PLL1CON;
N  __IO uint32_t PLL1CFG;
X  volatile uint32_t PLL1CFG;
N  __I  uint32_t PLL1STAT;
X  volatile const  uint32_t PLL1STAT;
N  __O  uint32_t PLL1FEED;
X  volatile  uint32_t PLL1FEED;
N       uint32_t RESERVED2[4];
N  __IO uint32_t PCON;
X  volatile uint32_t PCON;
N  __IO uint32_t PCONP;
X  volatile uint32_t PCONP;
N       uint32_t RESERVED3[15];
N  __IO uint32_t CCLKCFG;
X  volatile uint32_t CCLKCFG;
N  __IO uint32_t USBCLKCFG;
X  volatile uint32_t USBCLKCFG;
N  __IO uint32_t CLKSRCSEL;
X  volatile uint32_t CLKSRCSEL;
N  __IO uint32_t	CANSLEEPCLR;
X  volatile uint32_t	CANSLEEPCLR;
N  __IO uint32_t	CANWAKEFLAGS;
X  volatile uint32_t	CANWAKEFLAGS;
N       uint32_t RESERVED4[10];
N  __IO uint32_t EXTINT;                 /* External Interrupts                */
X  volatile uint32_t EXTINT;                  
N       uint32_t RESERVED5;
N  __IO uint32_t EXTMODE;
X  volatile uint32_t EXTMODE;
N  __IO uint32_t EXTPOLAR;
X  volatile uint32_t EXTPOLAR;
N       uint32_t RESERVED6[12];
N  __IO uint32_t RSID;                   /* Reset                              */
X  volatile uint32_t RSID;                    
N       uint32_t RESERVED7[7];
N  __IO uint32_t SCS;                    /* Syscon Miscellaneous Registers     */
X  volatile uint32_t SCS;                     
N  __IO uint32_t IRCTRIM;                /* Clock Dividers                     */
X  volatile uint32_t IRCTRIM;                 
N  __IO uint32_t PCLKSEL0;
X  volatile uint32_t PCLKSEL0;
N  __IO uint32_t PCLKSEL1;
X  volatile uint32_t PCLKSEL1;
N       uint32_t RESERVED8[4];
N  __IO uint32_t USBIntSt;               /* USB Device/OTG Interrupt Register  */
X  volatile uint32_t USBIntSt;                
N  __IO uint32_t DMAREQSEL;
X  volatile uint32_t DMAREQSEL;
N  __IO uint32_t CLKOUTCFG;              /* Clock Output Configuration         */
X  volatile uint32_t CLKOUTCFG;               
N } LPC_SC_TypeDef;
N
N/*------------- Pin Connect Block (PINCON) -----------------------------------*/
Ntypedef struct
N{
N  __IO uint32_t PINSEL0;
X  volatile uint32_t PINSEL0;
N  __IO uint32_t PINSEL1;
X  volatile uint32_t PINSEL1;
N  __IO uint32_t PINSEL2;
X  volatile uint32_t PINSEL2;
N  __IO uint32_t PINSEL3;
X  volatile uint32_t PINSEL3;
N  __IO uint32_t PINSEL4;
X  volatile uint32_t PINSEL4;
N  __IO uint32_t PINSEL5;
X  volatile uint32_t PINSEL5;
N  __IO uint32_t PINSEL6;
X  volatile uint32_t PINSEL6;
N  __IO uint32_t PINSEL7;
X  volatile uint32_t PINSEL7;
N  __IO uint32_t PINSEL8;
X  volatile uint32_t PINSEL8;
N  __IO uint32_t PINSEL9;
X  volatile uint32_t PINSEL9;
N  __IO uint32_t PINSEL10;
X  volatile uint32_t PINSEL10;
N       uint32_t RESERVED0[5];
N  __IO uint32_t PINMODE0;
X  volatile uint32_t PINMODE0;
N  __IO uint32_t PINMODE1;
X  volatile uint32_t PINMODE1;
N  __IO uint32_t PINMODE2;
X  volatile uint32_t PINMODE2;
N  __IO uint32_t PINMODE3;
X  volatile uint32_t PINMODE3;
N  __IO uint32_t PINMODE4;
X  volatile uint32_t PINMODE4;
N  __IO uint32_t PINMODE5;
X  volatile uint32_t PINMODE5;
N  __IO uint32_t PINMODE6;
X  volatile uint32_t PINMODE6;
N  __IO uint32_t PINMODE7;
X  volatile uint32_t PINMODE7;
N  __IO uint32_t PINMODE8;
X  volatile uint32_t PINMODE8;
N  __IO uint32_t PINMODE9;
X  volatile uint32_t PINMODE9;
N  __IO uint32_t PINMODE_OD0;
X  volatile uint32_t PINMODE_OD0;
N  __IO uint32_t PINMODE_OD1;
X  volatile uint32_t PINMODE_OD1;
N  __IO uint32_t PINMODE_OD2;
X  volatile uint32_t PINMODE_OD2;
N  __IO uint32_t PINMODE_OD3;
X  volatile uint32_t PINMODE_OD3;
N  __IO uint32_t PINMODE_OD4;
X  volatile uint32_t PINMODE_OD4;
N  __IO uint32_t I2CPADCFG;
X  volatile uint32_t I2CPADCFG;
N} LPC_PINCON_TypeDef;
N
N/*------------- General Purpose Input/Output (GPIO) --------------------------*/
Ntypedef struct
N{
N  union {
N    __IO uint32_t FIODIR;
X    volatile uint32_t FIODIR;
N    struct {
N      __IO uint16_t FIODIRL;
X      volatile uint16_t FIODIRL;
N      __IO uint16_t FIODIRH;
X      volatile uint16_t FIODIRH;
N    };
N    struct {
N      __IO uint8_t  FIODIR0;
X      volatile uint8_t  FIODIR0;
N      __IO uint8_t  FIODIR1;
X      volatile uint8_t  FIODIR1;
N      __IO uint8_t  FIODIR2;
X      volatile uint8_t  FIODIR2;
N      __IO uint8_t  FIODIR3;
X      volatile uint8_t  FIODIR3;
N    };
N  };
N  uint32_t RESERVED0[3];
N  union {
N    __IO uint32_t FIOMASK;
X    volatile uint32_t FIOMASK;
N    struct {
N      __IO uint16_t FIOMASKL;
X      volatile uint16_t FIOMASKL;
N      __IO uint16_t FIOMASKH;
X      volatile uint16_t FIOMASKH;
N    };
N    struct {
N      __IO uint8_t  FIOMASK0;
X      volatile uint8_t  FIOMASK0;
N      __IO uint8_t  FIOMASK1;
X      volatile uint8_t  FIOMASK1;
N      __IO uint8_t  FIOMASK2;
X      volatile uint8_t  FIOMASK2;
N      __IO uint8_t  FIOMASK3;
X      volatile uint8_t  FIOMASK3;
N    };
N  };
N  union {
N    __IO uint32_t FIOPIN;
X    volatile uint32_t FIOPIN;
N    struct {
N      __IO uint16_t FIOPINL;
X      volatile uint16_t FIOPINL;
N      __IO uint16_t FIOPINH;
X      volatile uint16_t FIOPINH;
N    };
N    struct {
N      __IO uint8_t  FIOPIN0;
X      volatile uint8_t  FIOPIN0;
N      __IO uint8_t  FIOPIN1;
X      volatile uint8_t  FIOPIN1;
N      __IO uint8_t  FIOPIN2;
X      volatile uint8_t  FIOPIN2;
N      __IO uint8_t  FIOPIN3;
X      volatile uint8_t  FIOPIN3;
N    };
N  };
N  union {
N    __IO uint32_t FIOSET;
X    volatile uint32_t FIOSET;
N    struct {
N      __IO uint16_t FIOSETL;
X      volatile uint16_t FIOSETL;
N      __IO uint16_t FIOSETH;
X      volatile uint16_t FIOSETH;
N    };
N    struct {
N      __IO uint8_t  FIOSET0;
X      volatile uint8_t  FIOSET0;
N      __IO uint8_t  FIOSET1;
X      volatile uint8_t  FIOSET1;
N      __IO uint8_t  FIOSET2;
X      volatile uint8_t  FIOSET2;
N      __IO uint8_t  FIOSET3;
X      volatile uint8_t  FIOSET3;
N    };
N  };
N  union {
N    __O  uint32_t FIOCLR;
X    volatile  uint32_t FIOCLR;
N    struct {
N      __O  uint16_t FIOCLRL;
X      volatile  uint16_t FIOCLRL;
N      __O  uint16_t FIOCLRH;
X      volatile  uint16_t FIOCLRH;
N    };
N    struct {
N      __O  uint8_t  FIOCLR0;
X      volatile  uint8_t  FIOCLR0;
N      __O  uint8_t  FIOCLR1;
X      volatile  uint8_t  FIOCLR1;
N      __O  uint8_t  FIOCLR2;
X      volatile  uint8_t  FIOCLR2;
N      __O  uint8_t  FIOCLR3;
X      volatile  uint8_t  FIOCLR3;
N    };
N  };
N} LPC_GPIO_TypeDef;
N
Ntypedef struct
N{
N  __I  uint32_t IntStatus;
X  volatile const  uint32_t IntStatus;
N  __I  uint32_t IO0IntStatR;
X  volatile const  uint32_t IO0IntStatR;
N  __I  uint32_t IO0IntStatF;
X  volatile const  uint32_t IO0IntStatF;
N  __O  uint32_t IO0IntClr;
X  volatile  uint32_t IO0IntClr;
N  __IO uint32_t IO0IntEnR;
X  volatile uint32_t IO0IntEnR;
N  __IO uint32_t IO0IntEnF;
X  volatile uint32_t IO0IntEnF;
N       uint32_t RESERVED0[3];
N  __I  uint32_t IO2IntStatR;
X  volatile const  uint32_t IO2IntStatR;
N  __I  uint32_t IO2IntStatF;
X  volatile const  uint32_t IO2IntStatF;
N  __O  uint32_t IO2IntClr;
X  volatile  uint32_t IO2IntClr;
N  __IO uint32_t IO2IntEnR;
X  volatile uint32_t IO2IntEnR;
N  __IO uint32_t IO2IntEnF;
X  volatile uint32_t IO2IntEnF;
N} LPC_GPIOINT_TypeDef;
N
N/*------------- Timer (TIM) --------------------------------------------------*/
Ntypedef struct
N{
N  __IO uint32_t IR;
X  volatile uint32_t IR;
N  __IO uint32_t TCR;
X  volatile uint32_t TCR;
N  __IO uint32_t TC;
X  volatile uint32_t TC;
N  __IO uint32_t PR;
X  volatile uint32_t PR;
N  __IO uint32_t PC;
X  volatile uint32_t PC;
N  __IO uint32_t MCR;
X  volatile uint32_t MCR;
N  __IO uint32_t MR0;
X  volatile uint32_t MR0;
N  __IO uint32_t MR1;
X  volatile uint32_t MR1;
N  __IO uint32_t MR2;
X  volatile uint32_t MR2;
N  __IO uint32_t MR3;
X  volatile uint32_t MR3;
N  __IO uint32_t CCR;
X  volatile uint32_t CCR;
N  __I  uint32_t CR0;
X  volatile const  uint32_t CR0;
N  __I  uint32_t CR1;
X  volatile const  uint32_t CR1;
N       uint32_t RESERVED0[2];
N  __IO uint32_t EMR;
X  volatile uint32_t EMR;
N       uint32_t RESERVED1[12];
N  __IO uint32_t CTCR;
X  volatile uint32_t CTCR;
N} LPC_TIM_TypeDef;
N
N/*------------- Pulse-Width Modulation (PWM) ---------------------------------*/
Ntypedef struct
N{
N  __IO uint32_t IR;
X  volatile uint32_t IR;
N  __IO uint32_t TCR;
X  volatile uint32_t TCR;
N  __IO uint32_t TC;
X  volatile uint32_t TC;
N  __IO uint32_t PR;
X  volatile uint32_t PR;
N  __IO uint32_t PC;
X  volatile uint32_t PC;
N  __IO uint32_t MCR;
X  volatile uint32_t MCR;
N  __IO uint32_t MR0;
X  volatile uint32_t MR0;
N  __IO uint32_t MR1;
X  volatile uint32_t MR1;
N  __IO uint32_t MR2;
X  volatile uint32_t MR2;
N  __IO uint32_t MR3;
X  volatile uint32_t MR3;
N  __IO uint32_t CCR;
X  volatile uint32_t CCR;
N  __I  uint32_t CR0;
X  volatile const  uint32_t CR0;
N  __I  uint32_t CR1;
X  volatile const  uint32_t CR1;
N  __I  uint32_t CR2;
X  volatile const  uint32_t CR2;
N  __I  uint32_t CR3;
X  volatile const  uint32_t CR3;
N       uint32_t RESERVED0;
N  __IO uint32_t MR4;
X  volatile uint32_t MR4;
N  __IO uint32_t MR5;
X  volatile uint32_t MR5;
N  __IO uint32_t MR6;
X  volatile uint32_t MR6;
N  __IO uint32_t PCR;
X  volatile uint32_t PCR;
N  __IO uint32_t LER;
X  volatile uint32_t LER;
N       uint32_t RESERVED1[7];
N  __IO uint32_t CTCR;
X  volatile uint32_t CTCR;
N} LPC_PWM_TypeDef;
N
N/*------------- Universal Asynchronous Receiver Transmitter (UART) -----------*/
Ntypedef struct
N{
N  union {
N  __I  uint8_t  RBR;
X  volatile const  uint8_t  RBR;
N  __O  uint8_t  THR;
X  volatile  uint8_t  THR;
N  __IO uint8_t  DLL;
X  volatile uint8_t  DLL;
N       uint32_t RESERVED0;
N  };
N  union {
N  __IO uint8_t  DLM;
X  volatile uint8_t  DLM;
N  __IO uint32_t IER;
X  volatile uint32_t IER;
N  };
N  union {
N  __I  uint32_t IIR;
X  volatile const  uint32_t IIR;
N  __O  uint8_t  FCR;
X  volatile  uint8_t  FCR;
N  };
N  __IO uint8_t  LCR;
X  volatile uint8_t  LCR;
N       uint8_t  RESERVED1[7];
N  __I  uint8_t  LSR;
X  volatile const  uint8_t  LSR;
N       uint8_t  RESERVED2[7];
N  __IO uint8_t  SCR;
X  volatile uint8_t  SCR;
N       uint8_t  RESERVED3[3];
N  __IO uint32_t ACR;
X  volatile uint32_t ACR;
N  __IO uint8_t  ICR;
X  volatile uint8_t  ICR;
N       uint8_t  RESERVED4[3];
N  __IO uint8_t  FDR;
X  volatile uint8_t  FDR;
N       uint8_t  RESERVED5[7];
N  __IO uint8_t  TER;
X  volatile uint8_t  TER;
N       uint8_t  RESERVED6[39];
N  __IO uint32_t FIFOLVL;
X  volatile uint32_t FIFOLVL;
N} LPC_UART_TypeDef;
N
Ntypedef struct
N{
N  union {
N  __I  uint8_t  RBR;
X  volatile const  uint8_t  RBR;
N  __O  uint8_t  THR;
X  volatile  uint8_t  THR;
N  __IO uint8_t  DLL;
X  volatile uint8_t  DLL;
N       uint32_t RESERVED0;
N  };
N  union {
N  __IO uint8_t  DLM;
X  volatile uint8_t  DLM;
N  __IO uint32_t IER;
X  volatile uint32_t IER;
N  };
N  union {
N  __I  uint32_t IIR;
X  volatile const  uint32_t IIR;
N  __O  uint8_t  FCR;
X  volatile  uint8_t  FCR;
N  };
N  __IO uint8_t  LCR;
X  volatile uint8_t  LCR;
N       uint8_t  RESERVED1[7];
N  __I  uint8_t  LSR;
X  volatile const  uint8_t  LSR;
N       uint8_t  RESERVED2[7];
N  __IO uint8_t  SCR;
X  volatile uint8_t  SCR;
N       uint8_t  RESERVED3[3];
N  __IO uint32_t ACR;
X  volatile uint32_t ACR;
N  __IO uint8_t  ICR;
X  volatile uint8_t  ICR;
N       uint8_t  RESERVED4[3];
N  __IO uint8_t  FDR;
X  volatile uint8_t  FDR;
N       uint8_t  RESERVED5[7];
N  __IO uint8_t  TER;
X  volatile uint8_t  TER;
N       uint8_t  RESERVED6[39];
N  __IO uint32_t FIFOLVL;
X  volatile uint32_t FIFOLVL;
N} LPC_UART0_TypeDef;
N
Ntypedef struct
N{
N  union {
N  __I  uint8_t  RBR;
X  volatile const  uint8_t  RBR;
N  __O  uint8_t  THR;
X  volatile  uint8_t  THR;
N  __IO uint8_t  DLL;
X  volatile uint8_t  DLL;
N       uint32_t RESERVED0;
N  };
N  union {
N  __IO uint8_t  DLM;
X  volatile uint8_t  DLM;
N  __IO uint32_t IER;
X  volatile uint32_t IER;
N  };
N  union {
N  __I  uint32_t IIR;
X  volatile const  uint32_t IIR;
N  __O  uint8_t  FCR;
X  volatile  uint8_t  FCR;
N  };
N  __IO uint8_t  LCR;
X  volatile uint8_t  LCR;
N       uint8_t  RESERVED1[3];
N  __IO uint8_t  MCR;
X  volatile uint8_t  MCR;
N       uint8_t  RESERVED2[3];
N  __I  uint8_t  LSR;
X  volatile const  uint8_t  LSR;
N       uint8_t  RESERVED3[3];
N  __I  uint8_t  MSR;
X  volatile const  uint8_t  MSR;
N       uint8_t  RESERVED4[3];
N  __IO uint8_t  SCR;
X  volatile uint8_t  SCR;
N       uint8_t  RESERVED5[3];
N  __IO uint32_t ACR;
X  volatile uint32_t ACR;
N       uint32_t RESERVED6;
N  __IO uint32_t FDR;
X  volatile uint32_t FDR;
N       uint32_t RESERVED7;
N  __IO uint8_t  TER;
X  volatile uint8_t  TER;
N       uint8_t  RESERVED8[27];
N  __IO uint8_t  RS485CTRL;
X  volatile uint8_t  RS485CTRL;
N       uint8_t  RESERVED9[3];
N  __IO uint8_t  ADRMATCH;
X  volatile uint8_t  ADRMATCH;
N       uint8_t  RESERVED10[3];
N  __IO uint8_t  RS485DLY;
X  volatile uint8_t  RS485DLY;
N       uint8_t  RESERVED11[3];
N  __IO uint32_t FIFOLVL;
X  volatile uint32_t FIFOLVL;
N} LPC_UART1_TypeDef;
N
N/*------------- Serial Peripheral Interface (SPI) ----------------------------*/
Ntypedef struct
N{
N  __IO uint32_t SPCR;
X  volatile uint32_t SPCR;
N  __I  uint32_t SPSR;
X  volatile const  uint32_t SPSR;
N  __IO uint32_t SPDR;
X  volatile uint32_t SPDR;
N  __IO uint32_t SPCCR;
X  volatile uint32_t SPCCR;
N       uint32_t RESERVED0[3];
N  __IO uint32_t SPINT;
X  volatile uint32_t SPINT;
N} LPC_SPI_TypeDef;
N
N/*------------- Synchronous Serial Communication (SSP) -----------------------*/
Ntypedef struct
N{
N  __IO uint32_t CR0;
X  volatile uint32_t CR0;
N  __IO uint32_t CR1;
X  volatile uint32_t CR1;
N  __IO uint32_t DR;
X  volatile uint32_t DR;
N  __I  uint32_t SR;
X  volatile const  uint32_t SR;
N  __IO uint32_t CPSR;
X  volatile uint32_t CPSR;
N  __IO uint32_t IMSC;
X  volatile uint32_t IMSC;
N  __IO uint32_t RIS;
X  volatile uint32_t RIS;
N  __IO uint32_t MIS;
X  volatile uint32_t MIS;
N  __IO uint32_t ICR;
X  volatile uint32_t ICR;
N  __IO uint32_t DMACR;
X  volatile uint32_t DMACR;
N} LPC_SSP_TypeDef;
N
N/*------------- Inter-Integrated Circuit (I2C) -------------------------------*/
Ntypedef struct
N{
N  __IO uint32_t I2CONSET;
X  volatile uint32_t I2CONSET;
N  __I  uint32_t I2STAT;
X  volatile const  uint32_t I2STAT;
N  __IO uint32_t I2DAT;
X  volatile uint32_t I2DAT;
N  __IO uint32_t I2ADR0;
X  volatile uint32_t I2ADR0;
N  __IO uint32_t I2SCLH;
X  volatile uint32_t I2SCLH;
N  __IO uint32_t I2SCLL;
X  volatile uint32_t I2SCLL;
N  __O  uint32_t I2CONCLR;
X  volatile  uint32_t I2CONCLR;
N  __IO uint32_t MMCTRL;
X  volatile uint32_t MMCTRL;
N  __IO uint32_t I2ADR1;
X  volatile uint32_t I2ADR1;
N  __IO uint32_t I2ADR2;
X  volatile uint32_t I2ADR2;
N  __IO uint32_t I2ADR3;
X  volatile uint32_t I2ADR3;
N  __I  uint32_t I2DATA_BUFFER;
X  volatile const  uint32_t I2DATA_BUFFER;
N  __IO uint32_t I2MASK0;
X  volatile uint32_t I2MASK0;
N  __IO uint32_t I2MASK1;
X  volatile uint32_t I2MASK1;
N  __IO uint32_t I2MASK2;
X  volatile uint32_t I2MASK2;
N  __IO uint32_t I2MASK3;
X  volatile uint32_t I2MASK3;
N} LPC_I2C_TypeDef;
N
N/*------------- Inter IC Sound (I2S) -----------------------------------------*/
Ntypedef struct
N{
N  __IO uint32_t I2SDAO;
X  volatile uint32_t I2SDAO;
N  __IO uint32_t I2SDAI;
X  volatile uint32_t I2SDAI;
N  __O  uint32_t I2STXFIFO;
X  volatile  uint32_t I2STXFIFO;
N  __I  uint32_t I2SRXFIFO;
X  volatile const  uint32_t I2SRXFIFO;
N  __I  uint32_t I2SSTATE;
X  volatile const  uint32_t I2SSTATE;
N  __IO uint32_t I2SDMA1;
X  volatile uint32_t I2SDMA1;
N  __IO uint32_t I2SDMA2;
X  volatile uint32_t I2SDMA2;
N  __IO uint32_t I2SIRQ;
X  volatile uint32_t I2SIRQ;
N  __IO uint32_t I2STXRATE;
X  volatile uint32_t I2STXRATE;
N  __IO uint32_t I2SRXRATE;
X  volatile uint32_t I2SRXRATE;
N  __IO uint32_t I2STXBITRATE;
X  volatile uint32_t I2STXBITRATE;
N  __IO uint32_t I2SRXBITRATE;
X  volatile uint32_t I2SRXBITRATE;
N  __IO uint32_t I2STXMODE;
X  volatile uint32_t I2STXMODE;
N  __IO uint32_t I2SRXMODE;
X  volatile uint32_t I2SRXMODE;
N} LPC_I2S_TypeDef;
N
N/*------------- Repetitive Interrupt Timer (RIT) -----------------------------*/
Ntypedef struct
N{
N  __IO uint32_t RICOMPVAL;
X  volatile uint32_t RICOMPVAL;
N  __IO uint32_t RIMASK;
X  volatile uint32_t RIMASK;
N  __IO uint8_t  RICTRL;
X  volatile uint8_t  RICTRL;
N       uint8_t  RESERVED0[3];
N  __IO uint32_t RICOUNTER;
X  volatile uint32_t RICOUNTER;
N} LPC_RIT_TypeDef;
N
N/*------------- Real-Time Clock (RTC) ----------------------------------------*/
Ntypedef struct
N{
N  __IO uint8_t  ILR;
X  volatile uint8_t  ILR;
N       uint8_t  RESERVED0[7];
N  __IO uint8_t  CCR;
X  volatile uint8_t  CCR;
N       uint8_t  RESERVED1[3];
N  __IO uint8_t  CIIR;
X  volatile uint8_t  CIIR;
N       uint8_t  RESERVED2[3];
N  __IO uint8_t  AMR;
X  volatile uint8_t  AMR;
N       uint8_t  RESERVED3[3];
N  __I  uint32_t CTIME0;
X  volatile const  uint32_t CTIME0;
N  __I  uint32_t CTIME1;
X  volatile const  uint32_t CTIME1;
N  __I  uint32_t CTIME2;
X  volatile const  uint32_t CTIME2;
N  __IO uint8_t  SEC;
X  volatile uint8_t  SEC;
N       uint8_t  RESERVED4[3];
N  __IO uint8_t  MIN;
X  volatile uint8_t  MIN;
N       uint8_t  RESERVED5[3];
N  __IO uint8_t  HOUR;
X  volatile uint8_t  HOUR;
N       uint8_t  RESERVED6[3];
N  __IO uint8_t  DOM;
X  volatile uint8_t  DOM;
N       uint8_t  RESERVED7[3];
N  __IO uint8_t  DOW;
X  volatile uint8_t  DOW;
N       uint8_t  RESERVED8[3];
N  __IO uint16_t DOY;
X  volatile uint16_t DOY;
N       uint16_t RESERVED9;
N  __IO uint8_t  MONTH;
X  volatile uint8_t  MONTH;
N       uint8_t  RESERVED10[3];
N  __IO uint16_t YEAR;
X  volatile uint16_t YEAR;
N       uint16_t RESERVED11;
N  __IO uint32_t CALIBRATION;
X  volatile uint32_t CALIBRATION;
N  __IO uint32_t GPREG0;
X  volatile uint32_t GPREG0;
N  __IO uint32_t GPREG1;
X  volatile uint32_t GPREG1;
N  __IO uint32_t GPREG2;
X  volatile uint32_t GPREG2;
N  __IO uint32_t GPREG3;
X  volatile uint32_t GPREG3;
N  __IO uint32_t GPREG4;
X  volatile uint32_t GPREG4;
N  __IO uint8_t  RTC_AUXEN;
X  volatile uint8_t  RTC_AUXEN;
N       uint8_t  RESERVED12[3];
N  __IO uint8_t  RTC_AUX;
X  volatile uint8_t  RTC_AUX;
N       uint8_t  RESERVED13[3];
N  __IO uint8_t  ALSEC;
X  volatile uint8_t  ALSEC;
N       uint8_t  RESERVED14[3];
N  __IO uint8_t  ALMIN;
X  volatile uint8_t  ALMIN;
N       uint8_t  RESERVED15[3];
N  __IO uint8_t  ALHOUR;
X  volatile uint8_t  ALHOUR;
N       uint8_t  RESERVED16[3];
N  __IO uint8_t  ALDOM;
X  volatile uint8_t  ALDOM;
N       uint8_t  RESERVED17[3];
N  __IO uint8_t  ALDOW;
X  volatile uint8_t  ALDOW;
N       uint8_t  RESERVED18[3];
N  __IO uint16_t ALDOY;
X  volatile uint16_t ALDOY;
N       uint16_t RESERVED19;
N  __IO uint8_t  ALMON;
X  volatile uint8_t  ALMON;
N       uint8_t  RESERVED20[3];
N  __IO uint16_t ALYEAR;
X  volatile uint16_t ALYEAR;
N       uint16_t RESERVED21;
N} LPC_RTC_TypeDef;
N
N/*------------- Watchdog Timer (WDT) -----------------------------------------*/
Ntypedef struct
N{
N  __IO uint8_t  WDMOD;
X  volatile uint8_t  WDMOD;
N       uint8_t  RESERVED0[3];
N  __IO uint32_t WDTC;
X  volatile uint32_t WDTC;
N  __O  uint8_t  WDFEED;
X  volatile  uint8_t  WDFEED;
N       uint8_t  RESERVED1[3];
N  __I  uint32_t WDTV;
X  volatile const  uint32_t WDTV;
N  __IO uint32_t WDCLKSEL;
X  volatile uint32_t WDCLKSEL;
N} LPC_WDT_TypeDef;
N
N/*------------- Analog-to-Digital Converter (ADC) ----------------------------*/
Ntypedef struct
N{
N  __IO uint32_t ADCR;
X  volatile uint32_t ADCR;
N  __IO uint32_t ADGDR;
X  volatile uint32_t ADGDR;
N       uint32_t RESERVED0;
N  __IO uint32_t ADINTEN;
X  volatile uint32_t ADINTEN;
N  __I  uint32_t ADDR0;
X  volatile const  uint32_t ADDR0;
N  __I  uint32_t ADDR1;
X  volatile const  uint32_t ADDR1;
N  __I  uint32_t ADDR2;
X  volatile const  uint32_t ADDR2;
N  __I  uint32_t ADDR3;
X  volatile const  uint32_t ADDR3;
N  __I  uint32_t ADDR4;
X  volatile const  uint32_t ADDR4;
N  __I  uint32_t ADDR5;
X  volatile const  uint32_t ADDR5;
N  __I  uint32_t ADDR6;
X  volatile const  uint32_t ADDR6;
N  __I  uint32_t ADDR7;
X  volatile const  uint32_t ADDR7;
N  __I  uint32_t ADSTAT;
X  volatile const  uint32_t ADSTAT;
N  __IO uint32_t ADTRM;
X  volatile uint32_t ADTRM;
N} LPC_ADC_TypeDef;
N
N/*------------- Digital-to-Analog Converter (DAC) ----------------------------*/
Ntypedef struct
N{
N  __IO uint32_t DACR;
X  volatile uint32_t DACR;
N  __IO uint32_t DACCTRL;
X  volatile uint32_t DACCTRL;
N  __IO uint16_t DACCNTVAL;
X  volatile uint16_t DACCNTVAL;
N} LPC_DAC_TypeDef;
N
N/*------------- Motor Control Pulse-Width Modulation (MCPWM) -----------------*/
Ntypedef struct
N{
N  __I  uint32_t MCCON;
X  volatile const  uint32_t MCCON;
N  __O  uint32_t MCCON_SET;
X  volatile  uint32_t MCCON_SET;
N  __O  uint32_t MCCON_CLR;
X  volatile  uint32_t MCCON_CLR;
N  __I  uint32_t MCCAPCON;
X  volatile const  uint32_t MCCAPCON;
N  __O  uint32_t MCCAPCON_SET;
X  volatile  uint32_t MCCAPCON_SET;
N  __O  uint32_t MCCAPCON_CLR;
X  volatile  uint32_t MCCAPCON_CLR;
N  __IO uint32_t MCTIM0;
X  volatile uint32_t MCTIM0;
N  __IO uint32_t MCTIM1;
X  volatile uint32_t MCTIM1;
N  __IO uint32_t MCTIM2;
X  volatile uint32_t MCTIM2;
N  __IO uint32_t MCPER0;
X  volatile uint32_t MCPER0;
N  __IO uint32_t MCPER1;
X  volatile uint32_t MCPER1;
N  __IO uint32_t MCPER2;
X  volatile uint32_t MCPER2;
N  __IO uint32_t MCPW0;
X  volatile uint32_t MCPW0;
N  __IO uint32_t MCPW1;
X  volatile uint32_t MCPW1;
N  __IO uint32_t MCPW2;
X  volatile uint32_t MCPW2;
N  __IO uint32_t MCDEADTIME;
X  volatile uint32_t MCDEADTIME;
N  __IO uint32_t MCCCP;
X  volatile uint32_t MCCCP;
N  __IO uint32_t MCCR0;
X  volatile uint32_t MCCR0;
N  __IO uint32_t MCCR1;
X  volatile uint32_t MCCR1;
N  __IO uint32_t MCCR2;
X  volatile uint32_t MCCR2;
N  __I  uint32_t MCINTEN;
X  volatile const  uint32_t MCINTEN;
N  __O  uint32_t MCINTEN_SET;
X  volatile  uint32_t MCINTEN_SET;
N  __O  uint32_t MCINTEN_CLR;
X  volatile  uint32_t MCINTEN_CLR;
N  __I  uint32_t MCCNTCON;
X  volatile const  uint32_t MCCNTCON;
N  __O  uint32_t MCCNTCON_SET;
X  volatile  uint32_t MCCNTCON_SET;
N  __O  uint32_t MCCNTCON_CLR;
X  volatile  uint32_t MCCNTCON_CLR;
N  __I  uint32_t MCINTFLAG;
X  volatile const  uint32_t MCINTFLAG;
N  __O  uint32_t MCINTFLAG_SET;
X  volatile  uint32_t MCINTFLAG_SET;
N  __O  uint32_t MCINTFLAG_CLR;
X  volatile  uint32_t MCINTFLAG_CLR;
N  __O  uint32_t MCCAP_CLR;
X  volatile  uint32_t MCCAP_CLR;
N} LPC_MCPWM_TypeDef;
N
N/*------------- Quadrature Encoder Interface (QEI) ---------------------------*/
Ntypedef struct
N{
N  __O  uint32_t QEICON;
X  volatile  uint32_t QEICON;
N  __I  uint32_t QEISTAT;
X  volatile const  uint32_t QEISTAT;
N  __IO uint32_t QEICONF;
X  volatile uint32_t QEICONF;
N  __I  uint32_t QEIPOS;
X  volatile const  uint32_t QEIPOS;
N  __IO uint32_t QEIMAXPOS;
X  volatile uint32_t QEIMAXPOS;
N  __IO uint32_t CMPOS0;
X  volatile uint32_t CMPOS0;
N  __IO uint32_t CMPOS1;
X  volatile uint32_t CMPOS1;
N  __IO uint32_t CMPOS2;
X  volatile uint32_t CMPOS2;
N  __I  uint32_t INXCNT;
X  volatile const  uint32_t INXCNT;
N  __IO uint32_t INXCMP;
X  volatile uint32_t INXCMP;
N  __IO uint32_t QEILOAD;
X  volatile uint32_t QEILOAD;
N  __I  uint32_t QEITIME;
X  volatile const  uint32_t QEITIME;
N  __I  uint32_t QEIVEL;
X  volatile const  uint32_t QEIVEL;
N  __I  uint32_t QEICAP;
X  volatile const  uint32_t QEICAP;
N  __IO uint32_t VELCOMP;
X  volatile uint32_t VELCOMP;
N  __IO uint32_t FILTER;
X  volatile uint32_t FILTER;
N       uint32_t RESERVED0[998];
N  __O  uint32_t QEIIEC;
X  volatile  uint32_t QEIIEC;
N  __O  uint32_t QEIIES;
X  volatile  uint32_t QEIIES;
N  __I  uint32_t QEIINTSTAT;
X  volatile const  uint32_t QEIINTSTAT;
N  __I  uint32_t QEIIE;
X  volatile const  uint32_t QEIIE;
N  __O  uint32_t QEICLR;
X  volatile  uint32_t QEICLR;
N  __O  uint32_t QEISET;
X  volatile  uint32_t QEISET;
N} LPC_QEI_TypeDef;
N
N/*------------- Controller Area Network (CAN) --------------------------------*/
Ntypedef struct
N{
N  __IO uint32_t mask[512];              /* ID Masks                           */
X  volatile uint32_t mask[512];               
N} LPC_CANAF_RAM_TypeDef;
N
Ntypedef struct                          /* Acceptance Filter Registers        */
N{
N  __IO uint32_t AFMR;
X  volatile uint32_t AFMR;
N  __IO uint32_t SFF_sa;
X  volatile uint32_t SFF_sa;
N  __IO uint32_t SFF_GRP_sa;
X  volatile uint32_t SFF_GRP_sa;
N  __IO uint32_t EFF_sa;
X  volatile uint32_t EFF_sa;
N  __IO uint32_t EFF_GRP_sa;
X  volatile uint32_t EFF_GRP_sa;
N  __IO uint32_t ENDofTable;
X  volatile uint32_t ENDofTable;
N  __I  uint32_t LUTerrAd;
X  volatile const  uint32_t LUTerrAd;
N  __I  uint32_t LUTerr;
X  volatile const  uint32_t LUTerr;
N  __IO uint32_t FCANIE;
X  volatile uint32_t FCANIE;
N  __IO uint32_t FCANIC0;
X  volatile uint32_t FCANIC0;
N  __IO uint32_t FCANIC1;
X  volatile uint32_t FCANIC1;
N} LPC_CANAF_TypeDef;
N
Ntypedef struct                          /* Central Registers                  */
N{
N  __I  uint32_t CANTxSR;
X  volatile const  uint32_t CANTxSR;
N  __I  uint32_t CANRxSR;
X  volatile const  uint32_t CANRxSR;
N  __I  uint32_t CANMSR;
X  volatile const  uint32_t CANMSR;
N} LPC_CANCR_TypeDef;
N
Ntypedef struct                          /* Controller Registers               */
N{
N  __IO uint32_t MOD;
X  volatile uint32_t MOD;
N  __O  uint32_t CMR;
X  volatile  uint32_t CMR;
N  __IO uint32_t GSR;
X  volatile uint32_t GSR;
N  __I  uint32_t ICR;
X  volatile const  uint32_t ICR;
N  __IO uint32_t IER;
X  volatile uint32_t IER;
N  __IO uint32_t BTR;
X  volatile uint32_t BTR;
N  __IO uint32_t EWL;
X  volatile uint32_t EWL;
N  __I  uint32_t SR;
X  volatile const  uint32_t SR;
N  __IO uint32_t RFS;
X  volatile uint32_t RFS;
N  __IO uint32_t RID;
X  volatile uint32_t RID;
N  __IO uint32_t RDA;
X  volatile uint32_t RDA;
N  __IO uint32_t RDB;
X  volatile uint32_t RDB;
N  __IO uint32_t TFI1;
X  volatile uint32_t TFI1;
N  __IO uint32_t TID1;
X  volatile uint32_t TID1;
N  __IO uint32_t TDA1;
X  volatile uint32_t TDA1;
N  __IO uint32_t TDB1;
X  volatile uint32_t TDB1;
N  __IO uint32_t TFI2;
X  volatile uint32_t TFI2;
N  __IO uint32_t TID2;
X  volatile uint32_t TID2;
N  __IO uint32_t TDA2;
X  volatile uint32_t TDA2;
N  __IO uint32_t TDB2;
X  volatile uint32_t TDB2;
N  __IO uint32_t TFI3;
X  volatile uint32_t TFI3;
N  __IO uint32_t TID3;
X  volatile uint32_t TID3;
N  __IO uint32_t TDA3;
X  volatile uint32_t TDA3;
N  __IO uint32_t TDB3;
X  volatile uint32_t TDB3;
N} LPC_CAN_TypeDef;
N
N/*------------- General Purpose Direct Memory Access (GPDMA) -----------------*/
Ntypedef struct                          /* Common Registers                   */
N{
N  __I  uint32_t DMACIntStat;
X  volatile const  uint32_t DMACIntStat;
N  __I  uint32_t DMACIntTCStat;
X  volatile const  uint32_t DMACIntTCStat;
N  __O  uint32_t DMACIntTCClear;
X  volatile  uint32_t DMACIntTCClear;
N  __I  uint32_t DMACIntErrStat;
X  volatile const  uint32_t DMACIntErrStat;
N  __O  uint32_t DMACIntErrClr;
X  volatile  uint32_t DMACIntErrClr;
N  __I  uint32_t DMACRawIntTCStat;
X  volatile const  uint32_t DMACRawIntTCStat;
N  __I  uint32_t DMACRawIntErrStat;
X  volatile const  uint32_t DMACRawIntErrStat;
N  __I  uint32_t DMACEnbldChns;
X  volatile const  uint32_t DMACEnbldChns;
N  __IO uint32_t DMACSoftBReq;
X  volatile uint32_t DMACSoftBReq;
N  __IO uint32_t DMACSoftSReq;
X  volatile uint32_t DMACSoftSReq;
N  __IO uint32_t DMACSoftLBReq;
X  volatile uint32_t DMACSoftLBReq;
N  __IO uint32_t DMACSoftLSReq;
X  volatile uint32_t DMACSoftLSReq;
N  __IO uint32_t DMACConfig;
X  volatile uint32_t DMACConfig;
N  __IO uint32_t DMACSync;
X  volatile uint32_t DMACSync;
N} LPC_GPDMA_TypeDef;
N
Ntypedef struct                          /* Channel Registers                  */
N{
N  __IO uint32_t DMACCSrcAddr;
X  volatile uint32_t DMACCSrcAddr;
N  __IO uint32_t DMACCDestAddr;
X  volatile uint32_t DMACCDestAddr;
N  __IO uint32_t DMACCLLI;
X  volatile uint32_t DMACCLLI;
N  __IO uint32_t DMACCControl;
X  volatile uint32_t DMACCControl;
N  __IO uint32_t DMACCConfig;
X  volatile uint32_t DMACCConfig;
N} LPC_GPDMACH_TypeDef;
N
N/*------------- Universal Serial Bus (USB) -----------------------------------*/
Ntypedef struct
N{
N  __I  uint32_t HcRevision;             /* USB Host Registers                 */
X  volatile const  uint32_t HcRevision;              
N  __IO uint32_t HcControl;
X  volatile uint32_t HcControl;
N  __IO uint32_t HcCommandStatus;
X  volatile uint32_t HcCommandStatus;
N  __IO uint32_t HcInterruptStatus;
X  volatile uint32_t HcInterruptStatus;
N  __IO uint32_t HcInterruptEnable;
X  volatile uint32_t HcInterruptEnable;
N  __IO uint32_t HcInterruptDisable;
X  volatile uint32_t HcInterruptDisable;
N  __IO uint32_t HcHCCA;
X  volatile uint32_t HcHCCA;
N  __I  uint32_t HcPeriodCurrentED;
X  volatile const  uint32_t HcPeriodCurrentED;
N  __IO uint32_t HcControlHeadED;
X  volatile uint32_t HcControlHeadED;
N  __IO uint32_t HcControlCurrentED;
X  volatile uint32_t HcControlCurrentED;
N  __IO uint32_t HcBulkHeadED;
X  volatile uint32_t HcBulkHeadED;
N  __IO uint32_t HcBulkCurrentED;
X  volatile uint32_t HcBulkCurrentED;
N  __I  uint32_t HcDoneHead;
X  volatile const  uint32_t HcDoneHead;
N  __IO uint32_t HcFmInterval;
X  volatile uint32_t HcFmInterval;
N  __I  uint32_t HcFmRemaining;
X  volatile const  uint32_t HcFmRemaining;
N  __I  uint32_t HcFmNumber;
X  volatile const  uint32_t HcFmNumber;
N  __IO uint32_t HcPeriodicStart;
X  volatile uint32_t HcPeriodicStart;
N  __IO uint32_t HcLSTreshold;
X  volatile uint32_t HcLSTreshold;
N  __IO uint32_t HcRhDescriptorA;
X  volatile uint32_t HcRhDescriptorA;
N  __IO uint32_t HcRhDescriptorB;
X  volatile uint32_t HcRhDescriptorB;
N  __IO uint32_t HcRhStatus;
X  volatile uint32_t HcRhStatus;
N  __IO uint32_t HcRhPortStatus1;
X  volatile uint32_t HcRhPortStatus1;
N  __IO uint32_t HcRhPortStatus2;
X  volatile uint32_t HcRhPortStatus2;
N       uint32_t RESERVED0[40];
N  __I  uint32_t Module_ID;
X  volatile const  uint32_t Module_ID;
N
N  __I  uint32_t OTGIntSt;               /* USB On-The-Go Registers            */
X  volatile const  uint32_t OTGIntSt;                
N  __IO uint32_t OTGIntEn;
X  volatile uint32_t OTGIntEn;
N  __O  uint32_t OTGIntSet;
X  volatile  uint32_t OTGIntSet;
N  __O  uint32_t OTGIntClr;
X  volatile  uint32_t OTGIntClr;
N  __IO uint32_t OTGStCtrl;
X  volatile uint32_t OTGStCtrl;
N  __IO uint32_t OTGTmr;
X  volatile uint32_t OTGTmr;
N       uint32_t RESERVED1[58];
N
N  __I  uint32_t USBDevIntSt;            /* USB Device Interrupt Registers     */
X  volatile const  uint32_t USBDevIntSt;             
N  __IO uint32_t USBDevIntEn;
X  volatile uint32_t USBDevIntEn;
N  __O  uint32_t USBDevIntClr;
X  volatile  uint32_t USBDevIntClr;
N  __O  uint32_t USBDevIntSet;
X  volatile  uint32_t USBDevIntSet;
N
N  __O  uint32_t USBCmdCode;             /* USB Device SIE Command Registers   */
X  volatile  uint32_t USBCmdCode;              
N  __I  uint32_t USBCmdData;
X  volatile const  uint32_t USBCmdData;
N
N  __I  uint32_t USBRxData;              /* USB Device Transfer Registers      */
X  volatile const  uint32_t USBRxData;               
N  __O  uint32_t USBTxData;
X  volatile  uint32_t USBTxData;
N  __I  uint32_t USBRxPLen;
X  volatile const  uint32_t USBRxPLen;
N  __O  uint32_t USBTxPLen;
X  volatile  uint32_t USBTxPLen;
N  __IO uint32_t USBCtrl;
X  volatile uint32_t USBCtrl;
N  __O  uint32_t USBDevIntPri;
X  volatile  uint32_t USBDevIntPri;
N
N  __I  uint32_t USBEpIntSt;             /* USB Device Endpoint Interrupt Regs */
X  volatile const  uint32_t USBEpIntSt;              
N  __IO uint32_t USBEpIntEn;
X  volatile uint32_t USBEpIntEn;
N  __O  uint32_t USBEpIntClr;
X  volatile  uint32_t USBEpIntClr;
N  __O  uint32_t USBEpIntSet;
X  volatile  uint32_t USBEpIntSet;
N  __O  uint32_t USBEpIntPri;
X  volatile  uint32_t USBEpIntPri;
N
N  __IO uint32_t USBReEp;                /* USB Device Endpoint Realization Reg*/
X  volatile uint32_t USBReEp;                 
N  __O  uint32_t USBEpInd;
X  volatile  uint32_t USBEpInd;
N  __IO uint32_t USBMaxPSize;
X  volatile uint32_t USBMaxPSize;
N
N  __I  uint32_t USBDMARSt;              /* USB Device DMA Registers           */
X  volatile const  uint32_t USBDMARSt;               
N  __O  uint32_t USBDMARClr;
X  volatile  uint32_t USBDMARClr;
N  __O  uint32_t USBDMARSet;
X  volatile  uint32_t USBDMARSet;
N       uint32_t RESERVED2[9];
N  __IO uint32_t USBUDCAH;
X  volatile uint32_t USBUDCAH;
N  __I  uint32_t USBEpDMASt;
X  volatile const  uint32_t USBEpDMASt;
N  __O  uint32_t USBEpDMAEn;
X  volatile  uint32_t USBEpDMAEn;
N  __O  uint32_t USBEpDMADis;
X  volatile  uint32_t USBEpDMADis;
N  __I  uint32_t USBDMAIntSt;
X  volatile const  uint32_t USBDMAIntSt;
N  __IO uint32_t USBDMAIntEn;
X  volatile uint32_t USBDMAIntEn;
N       uint32_t RESERVED3[2];
N  __I  uint32_t USBEoTIntSt;
X  volatile const  uint32_t USBEoTIntSt;
N  __O  uint32_t USBEoTIntClr;
X  volatile  uint32_t USBEoTIntClr;
N  __O  uint32_t USBEoTIntSet;
X  volatile  uint32_t USBEoTIntSet;
N  __I  uint32_t USBNDDRIntSt;
X  volatile const  uint32_t USBNDDRIntSt;
N  __O  uint32_t USBNDDRIntClr;
X  volatile  uint32_t USBNDDRIntClr;
N  __O  uint32_t USBNDDRIntSet;
X  volatile  uint32_t USBNDDRIntSet;
N  __I  uint32_t USBSysErrIntSt;
X  volatile const  uint32_t USBSysErrIntSt;
N  __O  uint32_t USBSysErrIntClr;
X  volatile  uint32_t USBSysErrIntClr;
N  __O  uint32_t USBSysErrIntSet;
X  volatile  uint32_t USBSysErrIntSet;
N       uint32_t RESERVED4[15];
N
N  union {
N  __I  uint32_t I2C_RX;                 /* USB OTG I2C Registers              */
X  volatile const  uint32_t I2C_RX;                  
N  __O  uint32_t I2C_TX;
X  volatile  uint32_t I2C_TX;
N  };
N  __I  uint32_t I2C_STS;
X  volatile const  uint32_t I2C_STS;
N  __IO uint32_t I2C_CTL;
X  volatile uint32_t I2C_CTL;
N  __IO uint32_t I2C_CLKHI;
X  volatile uint32_t I2C_CLKHI;
N  __O  uint32_t I2C_CLKLO;
X  volatile  uint32_t I2C_CLKLO;
N       uint32_t RESERVED5[824];
N
N  union {
N  __IO uint32_t USBClkCtrl;             /* USB Clock Control Registers        */
X  volatile uint32_t USBClkCtrl;              
N  __IO uint32_t OTGClkCtrl;
X  volatile uint32_t OTGClkCtrl;
N  };
N  union {
N  __I  uint32_t USBClkSt;
X  volatile const  uint32_t USBClkSt;
N  __I  uint32_t OTGClkSt;
X  volatile const  uint32_t OTGClkSt;
N  };
N} LPC_USB_TypeDef;
N
N/*------------- Ethernet Media Access Controller (EMAC) ----------------------*/
Ntypedef struct
N{
N  __IO uint32_t MAC1;                   /* MAC Registers                      */
X  volatile uint32_t MAC1;                    
N  __IO uint32_t MAC2;
X  volatile uint32_t MAC2;
N  __IO uint32_t IPGT;
X  volatile uint32_t IPGT;
N  __IO uint32_t IPGR;
X  volatile uint32_t IPGR;
N  __IO uint32_t CLRT;
X  volatile uint32_t CLRT;
N  __IO uint32_t MAXF;
X  volatile uint32_t MAXF;
N  __IO uint32_t SUPP;
X  volatile uint32_t SUPP;
N  __IO uint32_t TEST;
X  volatile uint32_t TEST;
N  __IO uint32_t MCFG;
X  volatile uint32_t MCFG;
N  __IO uint32_t MCMD;
X  volatile uint32_t MCMD;
N  __IO uint32_t MADR;
X  volatile uint32_t MADR;
N  __O  uint32_t MWTD;
X  volatile  uint32_t MWTD;
N  __I  uint32_t MRDD;
X  volatile const  uint32_t MRDD;
N  __I  uint32_t MIND;
X  volatile const  uint32_t MIND;
N       uint32_t RESERVED0[2];
N  __IO uint32_t SA0;
X  volatile uint32_t SA0;
N  __IO uint32_t SA1;
X  volatile uint32_t SA1;
N  __IO uint32_t SA2;
X  volatile uint32_t SA2;
N       uint32_t RESERVED1[45];
N  __IO uint32_t Command;                /* Control Registers                  */
X  volatile uint32_t Command;                 
N  __I  uint32_t Status;
X  volatile const  uint32_t Status;
N  __IO uint32_t RxDescriptor;
X  volatile uint32_t RxDescriptor;
N  __IO uint32_t RxStatus;
X  volatile uint32_t RxStatus;
N  __IO uint32_t RxDescriptorNumber;
X  volatile uint32_t RxDescriptorNumber;
N  __I  uint32_t RxProduceIndex;
X  volatile const  uint32_t RxProduceIndex;
N  __IO uint32_t RxConsumeIndex;
X  volatile uint32_t RxConsumeIndex;
N  __IO uint32_t TxDescriptor;
X  volatile uint32_t TxDescriptor;
N  __IO uint32_t TxStatus;
X  volatile uint32_t TxStatus;
N  __IO uint32_t TxDescriptorNumber;
X  volatile uint32_t TxDescriptorNumber;
N  __IO uint32_t TxProduceIndex;
X  volatile uint32_t TxProduceIndex;
N  __I  uint32_t TxConsumeIndex;
X  volatile const  uint32_t TxConsumeIndex;
N       uint32_t RESERVED2[10];
N  __I  uint32_t TSV0;
X  volatile const  uint32_t TSV0;
N  __I  uint32_t TSV1;
X  volatile const  uint32_t TSV1;
N  __I  uint32_t RSV;
X  volatile const  uint32_t RSV;
N       uint32_t RESERVED3[3];
N  __IO uint32_t FlowControlCounter;
X  volatile uint32_t FlowControlCounter;
N  __I  uint32_t FlowControlStatus;
X  volatile const  uint32_t FlowControlStatus;
N       uint32_t RESERVED4[34];
N  __IO uint32_t RxFilterCtrl;           /* Rx Filter Registers                */
X  volatile uint32_t RxFilterCtrl;            
N  __IO uint32_t RxFilterWoLStatus;
X  volatile uint32_t RxFilterWoLStatus;
N  __IO uint32_t RxFilterWoLClear;
X  volatile uint32_t RxFilterWoLClear;
N       uint32_t RESERVED5;
N  __IO uint32_t HashFilterL;
X  volatile uint32_t HashFilterL;
N  __IO uint32_t HashFilterH;
X  volatile uint32_t HashFilterH;
N       uint32_t RESERVED6[882];
N  __I  uint32_t IntStatus;              /* Module Control Registers           */
X  volatile const  uint32_t IntStatus;               
N  __IO uint32_t IntEnable;
X  volatile uint32_t IntEnable;
N  __O  uint32_t IntClear;
X  volatile  uint32_t IntClear;
N  __O  uint32_t IntSet;
X  volatile  uint32_t IntSet;
N       uint32_t RESERVED7;
N  __IO uint32_t PowerDown;
X  volatile uint32_t PowerDown;
N       uint32_t RESERVED8;
N  __IO uint32_t Module_ID;
X  volatile uint32_t Module_ID;
N} LPC_EMAC_TypeDef;
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N
N/******************************************************************************/
N/*                         Peripheral memory map                              */
N/******************************************************************************/
N/* Base addresses                                                             */
N#define LPC_FLASH_BASE        (0x00000000UL)
N#define LPC_RAM_BASE          (0x10000000UL)
N#define LPC_GPIO_BASE         (0x2009C000UL)
N#define LPC_APB0_BASE         (0x40000000UL)
N#define LPC_APB1_BASE         (0x40080000UL)
N#define LPC_AHB_BASE          (0x50000000UL)
N#define LPC_CM3_BASE          (0xE0000000UL)
N
N/* APB0 peripherals                                                           */
N#define LPC_WDT_BASE          (LPC_APB0_BASE + 0x00000)
N#define LPC_TIM0_BASE         (LPC_APB0_BASE + 0x04000)
N#define LPC_TIM1_BASE         (LPC_APB0_BASE + 0x08000)
N#define LPC_UART0_BASE        (LPC_APB0_BASE + 0x0C000)
N#define LPC_UART1_BASE        (LPC_APB0_BASE + 0x10000)
N#define LPC_PWM1_BASE         (LPC_APB0_BASE + 0x18000)
N#define LPC_I2C0_BASE         (LPC_APB0_BASE + 0x1C000)
N#define LPC_SPI_BASE          (LPC_APB0_BASE + 0x20000)
N#define LPC_RTC_BASE          (LPC_APB0_BASE + 0x24000)
N#define LPC_GPIOINT_BASE      (LPC_APB0_BASE + 0x28080)
N#define LPC_PINCON_BASE       (LPC_APB0_BASE + 0x2C000)
N#define LPC_SSP1_BASE         (LPC_APB0_BASE + 0x30000)
N#define LPC_ADC_BASE          (LPC_APB0_BASE + 0x34000)
N#define LPC_CANAF_RAM_BASE    (LPC_APB0_BASE + 0x38000)
N#define LPC_CANAF_BASE        (LPC_APB0_BASE + 0x3C000)
N#define LPC_CANCR_BASE        (LPC_APB0_BASE + 0x40000)
N#define LPC_CAN1_BASE         (LPC_APB0_BASE + 0x44000)
N#define LPC_CAN2_BASE         (LPC_APB0_BASE + 0x48000)
N#define LPC_I2C1_BASE         (LPC_APB0_BASE + 0x5C000)
N
N/* APB1 peripherals                                                           */
N#define LPC_SSP0_BASE         (LPC_APB1_BASE + 0x08000)
N#define LPC_DAC_BASE          (LPC_APB1_BASE + 0x0C000)
N#define LPC_TIM2_BASE         (LPC_APB1_BASE + 0x10000)
N#define LPC_TIM3_BASE         (LPC_APB1_BASE + 0x14000)
N#define LPC_UART2_BASE        (LPC_APB1_BASE + 0x18000)
N#define LPC_UART3_BASE        (LPC_APB1_BASE + 0x1C000)
N#define LPC_I2C2_BASE         (LPC_APB1_BASE + 0x20000)
N#define LPC_I2S_BASE          (LPC_APB1_BASE + 0x28000)
N#define LPC_RIT_BASE          (LPC_APB1_BASE + 0x30000)
N#define LPC_MCPWM_BASE        (LPC_APB1_BASE + 0x38000)
N#define LPC_QEI_BASE          (LPC_APB1_BASE + 0x3C000)
N#define LPC_SC_BASE           (LPC_APB1_BASE + 0x7C000)
N
N/* AHB peripherals                                                            */
N#define LPC_EMAC_BASE         (LPC_AHB_BASE  + 0x00000)
N#define LPC_GPDMA_BASE        (LPC_AHB_BASE  + 0x04000)
N#define LPC_GPDMACH0_BASE     (LPC_AHB_BASE  + 0x04100)
N#define LPC_GPDMACH1_BASE     (LPC_AHB_BASE  + 0x04120)
N#define LPC_GPDMACH2_BASE     (LPC_AHB_BASE  + 0x04140)
N#define LPC_GPDMACH3_BASE     (LPC_AHB_BASE  + 0x04160)
N#define LPC_GPDMACH4_BASE     (LPC_AHB_BASE  + 0x04180)
N#define LPC_GPDMACH5_BASE     (LPC_AHB_BASE  + 0x041A0)
N#define LPC_GPDMACH6_BASE     (LPC_AHB_BASE  + 0x041C0)
N#define LPC_GPDMACH7_BASE     (LPC_AHB_BASE  + 0x041E0)
N#define LPC_USB_BASE          (LPC_AHB_BASE  + 0x0C000)
N
N/* GPIOs                                                                      */
N#define LPC_GPIO0_BASE        (LPC_GPIO_BASE + 0x00000)
N#define LPC_GPIO1_BASE        (LPC_GPIO_BASE + 0x00020)
N#define LPC_GPIO2_BASE        (LPC_GPIO_BASE + 0x00040)
N#define LPC_GPIO3_BASE        (LPC_GPIO_BASE + 0x00060)
N#define LPC_GPIO4_BASE        (LPC_GPIO_BASE + 0x00080)
N
N
N/******************************************************************************/
N/*                         Peripheral declaration                             */
N/******************************************************************************/
N#define LPC_SC                ((LPC_SC_TypeDef        *) LPC_SC_BASE       )
N#define LPC_GPIO0             ((LPC_GPIO_TypeDef      *) LPC_GPIO0_BASE    )
N#define LPC_GPIO1             ((LPC_GPIO_TypeDef      *) LPC_GPIO1_BASE    )
N#define LPC_GPIO2             ((LPC_GPIO_TypeDef      *) LPC_GPIO2_BASE    )
N#define LPC_GPIO3             ((LPC_GPIO_TypeDef      *) LPC_GPIO3_BASE    )
N#define LPC_GPIO4             ((LPC_GPIO_TypeDef      *) LPC_GPIO4_BASE    )
N#define LPC_WDT               ((LPC_WDT_TypeDef       *) LPC_WDT_BASE      )
N#define LPC_TIM0              ((LPC_TIM_TypeDef       *) LPC_TIM0_BASE     )
N#define LPC_TIM1              ((LPC_TIM_TypeDef       *) LPC_TIM1_BASE     )
N#define LPC_TIM2              ((LPC_TIM_TypeDef       *) LPC_TIM2_BASE     )
N#define LPC_TIM3              ((LPC_TIM_TypeDef       *) LPC_TIM3_BASE     )
N#define LPC_RIT               ((LPC_RIT_TypeDef       *) LPC_RIT_BASE      )
N#define LPC_UART0             ((LPC_UART0_TypeDef     *) LPC_UART0_BASE    )
N#define LPC_UART1             ((LPC_UART1_TypeDef     *) LPC_UART1_BASE    )
N#define LPC_UART2             ((LPC_UART_TypeDef      *) LPC_UART2_BASE    )
N#define LPC_UART3             ((LPC_UART_TypeDef      *) LPC_UART3_BASE    )
N#define LPC_PWM1              ((LPC_PWM_TypeDef       *) LPC_PWM1_BASE     )
N#define LPC_I2C0              ((LPC_I2C_TypeDef       *) LPC_I2C0_BASE     )
N#define LPC_I2C1              ((LPC_I2C_TypeDef       *) LPC_I2C1_BASE     )
N#define LPC_I2C2              ((LPC_I2C_TypeDef       *) LPC_I2C2_BASE     )
N#define LPC_I2S               ((LPC_I2S_TypeDef       *) LPC_I2S_BASE      )
N#define LPC_SPI               ((LPC_SPI_TypeDef       *) LPC_SPI_BASE      )
N#define LPC_RTC               ((LPC_RTC_TypeDef       *) LPC_RTC_BASE      )
N#define LPC_GPIOINT           ((LPC_GPIOINT_TypeDef   *) LPC_GPIOINT_BASE  )
N#define LPC_PINCON            ((LPC_PINCON_TypeDef    *) LPC_PINCON_BASE   )
N#define LPC_SSP0              ((LPC_SSP_TypeDef       *) LPC_SSP0_BASE     )
N#define LPC_SSP1              ((LPC_SSP_TypeDef       *) LPC_SSP1_BASE     )
N#define LPC_ADC               ((LPC_ADC_TypeDef       *) LPC_ADC_BASE      )
N#define LPC_DAC               ((LPC_DAC_TypeDef       *) LPC_DAC_BASE      )
N#define LPC_CANAF_RAM         ((LPC_CANAF_RAM_TypeDef *) LPC_CANAF_RAM_BASE)
N#define LPC_CANAF             ((LPC_CANAF_TypeDef     *) LPC_CANAF_BASE    )
N#define LPC_CANCR             ((LPC_CANCR_TypeDef     *) LPC_CANCR_BASE    )
N#define LPC_CAN1              ((LPC_CAN_TypeDef       *) LPC_CAN1_BASE     )
N#define LPC_CAN2              ((LPC_CAN_TypeDef       *) LPC_CAN2_BASE     )
N#define LPC_MCPWM             ((LPC_MCPWM_TypeDef     *) LPC_MCPWM_BASE    )
N#define LPC_QEI               ((LPC_QEI_TypeDef       *) LPC_QEI_BASE      )
N#define LPC_EMAC              ((LPC_EMAC_TypeDef      *) LPC_EMAC_BASE     )
N#define LPC_GPDMA             ((LPC_GPDMA_TypeDef     *) LPC_GPDMA_BASE    )
N#define LPC_GPDMACH0          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH0_BASE )
N#define LPC_GPDMACH1          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH1_BASE )
N#define LPC_GPDMACH2          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH2_BASE )
N#define LPC_GPDMACH3          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH3_BASE )
N#define LPC_GPDMACH4          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH4_BASE )
N#define LPC_GPDMACH5          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH5_BASE )
N#define LPC_GPDMACH6          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH6_BASE )
N#define LPC_GPDMACH7          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH7_BASE )
N#define LPC_USB               ((LPC_USB_TypeDef       *) LPC_USB_BASE      )
N
N#endif  // __LPC17xx_H__
L 461 "main.c" 2
N
N
N
N/*
Nextern void lcd_init(void);
Nextern void lcd_on(void);
Nextern void lcd_clear(void);
N*/
N
Nextern short plazma_adc_cnt;
Nextern char net_buff_cnt;
Nextern unsigned short net_buff[32],net_buff_;
Nextern char rele_stat/*,rele_stat_*/;
Nextern char bRXIN0;
N
N
Nchar cntrl_plazma;
Nextern char bOUT_FREE2;
Nextern char /*av_net,*//*av_bat[2],*/av_bps[12],av_inv[6],av_dt[4],av_sk[4];
N
Nchar content[63];
N
N//const short ptr_bat_zar_cnt[2]={EE_ZAR1_CNT,EE_ZAR2_CNT};
N
N
N//unsigned short YEAR_AVZ,MONTH_AVZ,DATE_AVZ,HOUR_AVZ,MIN_AVZ,SEC_AVZ;
N
N
N//**********************************************
N//Самокалиброввка
Nextern signed short samokalibr_cnt;
N
N//**********************************************
N//Сообщения
Nextern char mess[MESS_DEEP],mess_old[MESS_DEEP],mess_cnt[MESS_DEEP];
Xextern char mess[10],mess_old[10],mess_cnt[10];
Nextern short mess_par0[MESS_DEEP],mess_par1[MESS_DEEP],mess_data[2];
Xextern short mess_par0[10],mess_par1[10],mess_data[2];
N
N
N//**********************************************
N//Контроль наличия батарей
Nextern signed short 	main_kb_cnt;
Nextern signed short 	kb_cnt_1lev;
Nextern signed short 	kb_cnt_2lev;
Nextern char 			kb_full_ver;
Nextern char 			kb_start[2],kb_start_ips;
N
N
N
N//-----------------------------------------------
N//Контроль заряда
Nchar sign_U[2],sign_I[2];
Nchar superviser_cnt;
N
N
Nchar plazma_plazma_plazma;
N
Nchar bRESET=0;
Nchar bRESET_EXT=0;
Nchar ext_can_cnt;
Nchar bRESET_INT_WDT=0;
Nchar bRESET_EXT_WDT=0;
N//-----------------------------------------------
N//Состояние вводов
Nsigned short vvod_pos;
N
N//-----------------------------------------------
N//Плата расширения
Nunsigned short adc_buff_ext_[3];
Nunsigned short Uvv[3];
Nunsigned short Uvv0;
Nshort pos_vent;
Nshort t_ext_can;
Nchar t_ext_can_nd;
N
N
N//-----------------------------------------------
N//Плата расширения 2
Nchar eb2_data[30];
Nshort eb2_data_short[10];
Nshort Uvv_eb2[3],Upes_eb2[3];
Nshort Kvv_eb2[3],Kpes_eb2[3];
N//-----------------------------------------------
N//Работа со щетчиком
Nsigned long power_summary;
Nsigned short power_current;
Nsigned long power_summary_tempo,power_summary_tempo_old;
Nsigned short power_current_tempo,power_current_tempo_old;
Nchar powerSummaryCnt;
Nchar powerCurrentCnt;
N
N//-----------------------------------------------
N//Климатконтроль и вентиляторы
Nsigned short main_vent_pos;
Nsigned char t_box_cnt=0;
Nenum_mixer_vent_stat mixer_vent_stat=mvsOFF;
NINT_BOX_TEMPER ibt;
Nenum_tbatdisable_stat tbatdisable_stat=tbdsON;
Nenum_tloaddisable_stat tloaddisable_stat=tldsON;
Nenum_av_tbox_stat av_tbox_stat=atsOFF;
Nsigned short av_tbox_cnt;
Nshort tbatdisable_cnt,tloaddisable_cnt;
N#ifdef UKU_KONTUR
Sshort t_box_vent_on_cnt;
Sshort t_box_warm_on_cnt;
Senum_vent_stat vent_stat_k=vsON;
Senum_warm_stat warm_stat_k=wsON;
N#endif
N
N#ifdef UKU_TELECORE2015 
Sshort t_box_vent_on_cnt;
Sshort t_box_warm_on_cnt;
Sshort t_box_vvent_on_cnt;
Senum_vent_stat vent_stat_k=vsON,vvent_stat_k=vsON;
Senum_warm_stat warm_stat_k=wsON;
Ssigned short TELECORE2015_KLIMAT_WARM_ON_temp;
N#endif
N
N
N
N
N
N//short sys_plazma,sys_plazma1;
N
Nchar snmp_plazma;
N
N
Nshort plazma_but_an;
N
Nchar bCAN_OFF;
N
N
Nchar max_net_slot;
N
N//-----------------------------------------------
N//Показания АЦП на плате измерения тока батареи
Nsigned long ibat_metr_buff_[2];
Nshort bIBAT_SMKLBR;
Nchar ibat_metr_cnt=0;
N
N
N
N
N
Nchar ips_bat_av_vzvod=0;
Nchar ips_bat_av_stat=0;
N
Nchar rel_warm_plazma;
Nchar can_byps_plazma0,can_byps_plazma1;
N
Nchar bCAN_INV;
Nchar plazma_can_inv[3];
N
Nunsigned short bat_drv_rx_cnt;
Nchar bat_drv_rx_buff[512];
Nchar bat_drv_rx_in;
N
Nshort plazma_bat_drv0,plazma_bat_drv1,bat_drv_cnt_cnt;
Nshort can_plazma;
N
N//-----------------------------------------------
N//Ускоренный заряд
Nsigned short speedChrgCurr;			//максимальный ток ускоренного заряда, отображение из ЕЕПРОМ
Nsigned short speedChrgVolt;			//максимальное напряжение ускоренного заряда, отображение из ЕЕПРОМ
Nsigned short speedChrgTimeInHour; 		//максимальное время ускоренного заряда в часах, отображение из ЕЕПРОМ
Nsigned short speedChrgAvtEn;	    		//Автоматическое включение Ускоренного заряда включено/выключено
Nsigned short speedChrgDU;	    		//Просадка напряжения необходимая для включения ускоренного заряда
Nsigned short speedChIsOn;			//Текущее состояние ускоренного заряда вкл/выкл
Nsigned long  speedChTimeCnt;			//Счетчик времени прямой ускоренного заряда
Nsigned short speedChrgBlckSrc;		//Источник сигнала блокировки, 0-выкл., 1-СК1, 2-СК2
Nsigned short speedChrgBlckLog;		//Логика сигнала блокировки, 1 - блокировка по замкнутому СК, 0 - по разомкнутому
Nsigned short speedChrgBlckStat;		//Сигнал блокировки для выравнивающего и ускоренного заряда.
Nchar  	   speedChrgShowCnt;		//Счетчик показа информационного сообщения
N
N//-----------------------------------------------
N//Блокировка ИПС
Nsigned short ipsBlckSrc;
Nsigned short ipsBlckLog;
Nsigned short ipsBlckStat;
N
N
N//-----------------------------------------------
N//Контроль выходного напряжения
Nsigned short outVoltContrHndlCnt;		//Счетчик, считает в плюс в случае выполнения условия аварии
Nsigned short outVoltContrHndlCnt_;		//Счетчик, считает в плюс в случае отсутствия выполнения условия аварии
Nchar uout_av;
N
N//-----------------------------------------------
N//Контроль работы вольтдобавки
Nchar bVDISWORK;
Nchar vd_is_work_cnt;
N
Nshort plazma_numOfCells;
Nshort plazma_numOfTemperCells;
Nshort plazma_numOfPacks;
N/*
N#ifdef MCP2515_CAN
N#define can1_out	mcp2515_transmit
N#endif
N*/
N
Nchar plazma_ztt[2];
Nchar plazma1809;
N
NU8 socket_tcp;
N
N//-----------------------------------------------
N//Ресурс вентиляторов
N//char vent_resurs_temp[4];
N
N//-----------------------------------------------
N//Выравнивание токов ИПС
Nchar ica_plazma[10];
Nchar ica_timer_cnt;
Nsigned short ica_my_current;
Nsigned short ica_your_current;
Nsigned short ica_u_necc;
NU8 tcp_soc_avg;
NU8 tcp_connect_stat;
N
N//-----------------------------------------------
N//Авария по перегрузке
Nshort overloadHndlCnt;
Nchar overloadAvar;
N
N//-----------------------------------------------
N//Авария по выходному напряжению
Nshort uAvarHndlOutUMaxCnt,uAvarHndlOutUMinCnt;
Nchar uOutAvar;
N
N//-----------------------------------------------
N//Авария по входному напряжению
Nshort uAvarHndlInUMaxCnt,uAvarHndlInUMinCnt;
Nchar uInAvar;
N
N//-----------------------------------------------
N//Авария по температуре системы
Nshort sysTAvarHndlCnt;
Nchar sysTAvar;
N
Nshort pvlk;
Nchar klbr_en;
N
N
N//***********************************************
N//состояние входных сигналов от реле
Nchar rele_in_stat[3][3];
N
N//-----------------------------------------------
N//Состояние оптронов передаваемое испытуемой плате 
Nenum_optr_stat optr_stat[3];
N
N//***********************************************
N//Состояния аварий для реле
Nshort rele_av_flags;
Nshort avar_vd_stat;
N// Бит 0 - авария одного из БПС
N// Бит 1 - перегрузка системы по току
N// Бит 2 - перегрев системы
N// Бит 3 - выходное напряжение завышено
N// Бит 4 - выходное напряжение занижено
N// Бит 5 - входное напряжение завышено
N// Бит 6 - входное напряжение занижено
N// Бит 7 - авария связи по шине KAN
N// Бит 8 - вольтдобавка в работе
N
N#define THRE        (1<<5) //Transmit Holding Register Empty
N#define MULVAL      15
N#define DIVADDVAL   2
N#define Ux_FIFO_EN  (1<<0)
N#define Rx_FIFO_RST (1<<1)
N#define Tx_FIFO_RST (1<<2)
N#define DLAB_BIT    (1<<7)
N#define LINE_FEED   0x0A //LF, For Linux, MAC and Windows Terminals  
N#define CARRIAGE_RETURN 0x0D //CR, For Windows Terminals (CR+LF).
N
N//-----------------------------------------------
Nvoid uartWrite(char c)
N{
N	//while ( !(LPC_UART0->LSR & THRE) ); //wait till the THR is empty
N	if( c == '\n' ) //Send 
N		{
N	/*	LPC_UART0->THR = CARRIAGE_RETURN;
N		while( !(LPC_UART0->LSR & THRE )); 
N		LPC_UART0->THR = LINE_FEED;*/
N
N		putchar_sc16is700(CARRIAGE_RETURN);
X		putchar_sc16is700(0x0D);
N		putchar_sc16is700(LINE_FEED);
X		putchar_sc16is700(0x0A);
N		}
N	else
N		{
N		//LPC_UART0->THR = c; 
N		putchar_sc16is700(c);
N		}
N}
N
N//-----------------------------------------------
Nint fputc(int c, FILE * stream)
N{
N	uartWrite(c); //Transmit Character
N	return c; //return the character written to denote a successful write
N}
N
N
N//-----------------------------------------------
Nvoid rtc_init (void) 
N{
NLPC_RTC->CCR=0x11;
X((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->CCR=0x11;
N}
N
N/*
N//-----------------------------------------------
Nstatic void timer_poll () 
N{
Nif (SysTick->CTRL & 0x10000) 
N     {
N     timer_tick ();
N     tick = __TRUE;
N     }
N} */
N
N
N//-----------------------------------------------
Nsigned short abs_pal(signed short in)
N{
Nif(in<0)return -in;
Nelse return in;
N}
N
N
N// Определение входов от реле по входам АЦП
N// REL2.3 означает третье реле(счет слева направо) во втором канале(счет от себя)
N// REL1.1	adc_buff_[0];
N// REL1.2	adc_buff_[7];
N// REL1.3	adc_buff_[8];
N// REL2.1	adc_buff_[1];
N// REL2.2	adc_buff_[4];
N// REL2.3	adc_buff_[3];
N// REL3.1	adc_buff_[2];
N// REL3.2	adc_buff_[6];
N// REL3.2	adc_buff_[5];
N
N//-----------------------------------------------
Nvoid rele_in_drv(void)
N{
N
Nif(adc_buff_[0]>3000)rele_in_stat[0][0]=1;
Nelse if(adc_buff_[0]<1000)rele_in_stat[0][0]=0;
N
Nif(adc_buff_[7]>3000)rele_in_stat[0][1]=1;
Nelse if(adc_buff_[7]<1000)rele_in_stat[0][1]=0;
N
Nif(adc_buff_[8]>3000)rele_in_stat[0][2]=1;
Nelse if(adc_buff_[8]<1000)rele_in_stat[0][2]=0;
N
Nif(adc_buff_[1]>3000)rele_in_stat[1][0]=1;
Nelse if(adc_buff_[1]<1000)rele_in_stat[1][0]=0;
N
Nif(adc_buff_[4]>3000)rele_in_stat[1][1]=1;
Nelse if(adc_buff_[4]<1000)rele_in_stat[1][1]=0;
N
Nif(adc_buff_[3]>3000)rele_in_stat[1][2]=1;
Nelse if(adc_buff_[3]<1000)rele_in_stat[1][2]=0;
N
Nif(adc_buff_[2]>3000)rele_in_stat[2][0]=1;
Nelse if(adc_buff_[2]<1000)rele_in_stat[2][0]=0;
N
Nif(adc_buff_[6]>3000)rele_in_stat[2][1]=1;
Nelse if(adc_buff_[6]<1000)rele_in_stat[2][1]=0;
N
Nif(adc_buff_[5]>3000)rele_in_stat[2][2]=1;
Nelse if(adc_buff_[5]<1000)rele_in_stat[2][2]=0;
N
N}
N
N
N//-----------------------------------------------
Nvoid ADC_IRQHandler(void) {
NLPC_ADC->ADCR &=  ~(7<<24);
X((LPC_ADC_TypeDef *) ((0x40000000UL) + 0x34000) )->ADCR &=  ~(7<<24);
N
N
N
Nadc_self_ch_buff[adc_self_ch_cnt]=(LPC_ADC->ADGDR>>4) & 0xFFF;/* Read Conversion Result             */
Xadc_self_ch_buff[adc_self_ch_cnt]=(((LPC_ADC_TypeDef *) ((0x40000000UL) + 0x34000) )->ADGDR>>4) & 0xFFF; 
Nadc_self_ch_cnt++;
Nif(adc_self_ch_cnt<3)
N	{
N	LPC_ADC->ADCR |=  (1<<24);
X	((LPC_ADC_TypeDef *) ((0x40000000UL) + 0x34000) )->ADCR |=  (1<<24);
N	}
Nelse
N	{
N
N 
N	//SET_REG(LPC_ADC->ADCR,1,24,3);
N	}
N
N/*			adc_buff_[0]=AD_last;
N			if(AD_last<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=AD_last;
N			if(AD_last>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=AD_last;*/
N}
N
N//-----------------------------------------------
Nvoid transmit_hndl(void)
N{
Nstatic char transmit_hndl_cnt;
Nif(ind==iMn)
Xif(a_ind . i==iMn)
N	{
N	printf("OK%dCRC%d\n",25,7);
N	}
Nelse if(ind==iOptr_kontr)
Xelse if(a_ind . i==iOptr_kontr)
N	{
N	transmit_hndl_cnt++;
N	if(transmit_hndl_cnt>=5)transmit_hndl_cnt=0;
N
N	if(transmit_hndl_cnt==0)printf("OK%dCRC%d\n",38,11);
N	else 
N		{
N		char temp=0,tempCRC=0;
N
N		if(optr_stat[0]==osON)
N			{
N			temp|=0x01;
N			tempCRC++;
N			}
N		if(optr_stat[1]==osON)
N			{
N			temp|=0x02;
N			tempCRC++;
N			}
N		if(optr_stat[2]==osON)
N			{
N			temp|=0x04;
N			tempCRC++;
N			} 
N		printf("OPTR%dCRC%d\n",temp,tempCRC);
N		} 
N	}
N
Nelse if(ind==iSet_T)
Xelse if(a_ind . i==iSet_T)
N	{
N	transmit_hndl_cnt++;
N	if(transmit_hndl_cnt>=5)transmit_hndl_cnt=0;
N
N	if(transmit_hndl_cnt==0)printf("OK%dCRC%d\n",11,2);
N	else 
N		{
N		char tempCRC=0;
N
N		tempCRC=LPC_RTC->YEAR%100;
X		tempCRC=((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->YEAR%100;
N		tempCRC^=(LPC_RTC->MONTH%100);
X		tempCRC^=(((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->MONTH%100);
N		tempCRC^=(LPC_RTC->DOM%100);
X		tempCRC^=(((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->DOM%100);
N		tempCRC^=(LPC_RTC->DOW%100);
X		tempCRC^=(((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->DOW%100);
N		tempCRC^=(LPC_RTC->HOUR%100);
X		tempCRC^=(((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->HOUR%100);
N		tempCRC^=(LPC_RTC->MIN%100);
X		tempCRC^=(((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->MIN%100);
N		
N		printf("DATA%02d%02d%02d%02d%02d%02dCRC%d\n",LPC_RTC->YEAR,LPC_RTC->MONTH,LPC_RTC->DOM,LPC_RTC->DOW+1,LPC_RTC->HOUR,LPC_RTC->MIN,tempCRC);
X		printf("DATA%02d%02d%02d%02d%02d%02dCRC%d\n",((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->YEAR,((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->MONTH,((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->DOM,((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->DOW+1,((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->HOUR,((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->MIN,tempCRC);
N		} 
N	}
N
Nelse if(ind==iSet_T_ret)
Xelse if(a_ind . i==iSet_T_ret)
N	{
N	transmit_hndl_cnt++;
N	if(transmit_hndl_cnt>=5)transmit_hndl_cnt=0;
N
N	/*if(transmit_hndl_cnt==4)	printf("RET0\n");
N	else*/ 						printf("TIMESTART\n");
N	}
N
Nelse if(ind==iWater_sensor_kontr)
Xelse if(a_ind . i==iWater_sensor_kontr)
N	{
N	transmit_hndl_cnt++;
N	if(transmit_hndl_cnt>=5)transmit_hndl_cnt=0;
N
N	if(transmit_hndl_cnt==0)printf("OK%dCRC%d\n",12,2);
N	else 
N		{
N		printf("WATER\n");
N		}
N	}
Nelse if(ind==iWater_sensor_kontr_ret)
Xelse if(a_ind . i==iWater_sensor_kontr_ret)
N	{
N	transmit_hndl_cnt++;
N	if(transmit_hndl_cnt>=5)transmit_hndl_cnt=0;
N
N	printf("WAT_RET\n");
N	}
Nelse if(ind==iAir_sensor_kontr)
Xelse if(a_ind . i==iAir_sensor_kontr)
N	{
N	transmit_hndl_cnt++;
N	if(transmit_hndl_cnt>=5)transmit_hndl_cnt=0;
N
N	if(transmit_hndl_cnt==0)printf("OK%dCRC%d\n",17,2);
N	else 
N		{
N		printf("AIR\n");
N		}
N	}
Nelse if(ind==iAir_sensor_kontr_ret)
Xelse if(a_ind . i==iAir_sensor_kontr_ret)
N	{
N	transmit_hndl_cnt++;
N	if(transmit_hndl_cnt>=5)transmit_hndl_cnt=0;
N
N	printf("AI_RET\n");
N	}
Nelse if(ind==iInterf_kontr)
Xelse if(a_ind . i==iInterf_kontr)
N	{
N	printf("INTER\n");
N
N	}
Nelse if(ind==iInterf_kontr_ret)
Xelse if(a_ind . i==iInterf_kontr_ret)
N	{
N	printf("INTE_RET\n");
N	}
Nelse if(ind==iProbesms)
Xelse if(a_ind . i==iProbesms)
N	{
N	printf("PROBESMS\n");
N	}
N
Nelse if(ind==iDefset)
Xelse if(a_ind . i==iDefset)
N	{
N	printf("DEFAULT\n");
N	}
N
N}
N
N
N//-----------------------------------------------
Nvoid def_ips_set(short voltage)
N{
Nif(voltage==24)
N	{
N	//def_set(300,voltage,voltage,22,150,240,7,0);
N	}
Nif(voltage==48)
N	{
N	//def_set(600,voltage,voltage,44,100,480,7,0);
N	}
Nif(voltage==60)
N	{
N	//def_set(750,voltage,voltage,55,100,600,7,0);
N	}
N
Nif(voltage==220)
N	{
N	//def_set(2450,2366,2315,187,100,2200,2,2346);
N
N	lc640_write_int(EE_NUMIST,2);
X	lc640_write_int(0x10+100+36,2);
N	lc640_write_int(EE_NUMINV,0);
X	lc640_write_int(0x10+100+38,0);
N//lc640_write_int(EE_NUMDT,0);
N//lc640_write_int(EE_NUMSK,0);
N	lc640_write_int(EE_MAIN_IST,0);
X	lc640_write_int(0x10+100+2,0);
N	lc640_write_int(EE_PAR,1);
X	lc640_write_int(0x10+100+86,1);
N	lc640_write_int(EE_TBAT,60);
X	lc640_write_int(0x10+100+78,60);
N	lc640_write_int(EE_UMAX,2450);
X	lc640_write_int(0x10+100+4,2450);
N	lc640_write_int(EE_DU,2315/2);
X	lc640_write_int(0x10+100+84,2315/2);
N	//lc640_write_int(EE_UB0,2366);
N	//lc640_write_int(EE_UB20,2315);
N	lc640_write_int(EE_TSIGN,70);
X	lc640_write_int(0x10+100+82,70);
N	lc640_write_int(EE_TMAX,80);
X	lc640_write_int(0x10+100+10,80);
N//lc640_write_int(EE_C_BAT,180);
N	lc640_write_int(EE_USIGN,187);
X	lc640_write_int(0x10+100+14,187);
N	lc640_write_int(EE_UMN,187);
X	lc640_write_int(0x10+100+16,187);
N	lc640_write_int(EE_ZV_ON,0);
X	lc640_write_int(0x10+100+18,0);
N	lc640_write_int(EE_IKB,20);
X	lc640_write_int(0x10+100+20,20);
N//lc640_write_int(EE_KVZ,1030);
N	//lc640_write_int(EE_UVZ,2346);
N	lc640_write_int(EE_IMAX,80);
X	lc640_write_int(0x10+100+24,80);
N	lc640_write_int(EE_IMIN,50);
X	lc640_write_int(0x10+100+26,50);
N//lc640_write_int(EE_APV_ON,apvON);
N	lc640_write_int(EE_APV_ON1,apvON);
X	lc640_write_int(0x10+100+44,apvON);
N	lc640_write_int(EE_APV_ON2,apvON);
X	lc640_write_int(0x10+100+46,apvON);
N	lc640_write_int(EE_APV_ON2_TIME,1);
X	lc640_write_int(0x10+100+48,1);
N	lc640_write_int(EE_IZMAX,160);
X	lc640_write_int(0x10+100+30,160);
N	lc640_write_int(EE_U0B,2200);
X	lc640_write_int(0x10+100+32,2200);
N	lc640_write_int(EE_TZAS,3);
X	lc640_write_int(0x10+100+34,3);
N	lc640_write_int(EE_TBATMAX,50);  
X	lc640_write_int(0x10+100+88,50);  
N	lc640_write_int(EE_TBATSIGN,40);
X	lc640_write_int(0x10+100+90,40);
N	lc640_write_int(EE_MNEMO_ON,mnON);
X	lc640_write_int(0x10+100+72,mnON);
N	lc640_write_int(EE_MNEMO_TIME,30);	
X	lc640_write_int(0x10+100+74,30);	
N	lc640_write_int(EE_AV_OFF_AVT,1);
X	lc640_write_int(0x10+100+12,1);
N//lc640_write_int(EE_APV_ON1,apvOFF);
N
N
N
N	lc640_write_int(EE_TBOXMAX,70);
X	lc640_write_int(0x10+100+92,70);
N	lc640_write_int(EE_TBOXVENTMAX,60);
X	lc640_write_int(0x10+100+96,60);
N	lc640_write_int(EE_TBOXREG,25);
X	lc640_write_int(0x10+100+94,25);
N	lc640_write_int(EE_TLOADDISABLE,80);
X	lc640_write_int(0x10+100+98,80);
N	lc640_write_int(EE_TLOADENABLE,70);
X	lc640_write_int(0x10+100+100,70);
N	lc640_write_int(EE_TBATDISABLE,91);
X	lc640_write_int(0x10+100+102,91);
N	lc640_write_int(EE_TBATENABLE,80);
X	lc640_write_int(0x10+100+104,80);
N
N	lc640_write_int(ADR_SK_SIGN[0],0);
N	lc640_write_int(ADR_SK_REL_EN[0],0);
N	lc640_write_int(ADR_SK_LCD_EN[0],0xffff);
N
N	lc640_write_int(ADR_SK_SIGN[1],0);
N	lc640_write_int(ADR_SK_REL_EN[1],0);
N	lc640_write_int(ADR_SK_LCD_EN[1],0xffff);
N
N	lc640_write_int(ADR_SK_SIGN[2],0);
N	lc640_write_int(ADR_SK_REL_EN[2],0);
N	lc640_write_int(ADR_SK_LCD_EN[2],0xffff);
N
N	lc640_write_int(ADR_SK_SIGN[3],0);
N	lc640_write_int(ADR_SK_REL_EN[3],0);
N	lc640_write_int(ADR_SK_LCD_EN[3],0xffff);
N
N	lc640_write_int(EE_UBM_AV,10);
X	lc640_write_int(0x10+500+96,10);
N
N	lc640_write_int(EE_POS_VENT,11);
X	lc640_write_int(0x10+500+92,11);
N
N
N	lc640_write_int(EE_DU,2315-1870);
X	lc640_write_int(0x10+100+84,2315-1870);
N	lc640_write_int(EE_U_AVT,2200);
X	lc640_write_int(0x10+100+80,2200);
N	lc640_write_int(EE_IZMAX,20);
X	lc640_write_int(0x10+100+30,20);
N	lc640_write_int(EE_AUSW_MAIN,22033);
X	lc640_write_int(0x10+100+224,22033);
N	lc640_write_int(EE_PAR,1);
X	lc640_write_int(0x10+100+86,1);
N	lc640_write_int(EE_MNEMO_ON,mnOFF);
X	lc640_write_int(0x10+100+72,mnOFF);
N	}
N
Nif(voltage==110)
N	{
N	//def_set(1350,1270,1225,99,20,1220,2,1290);
N
N	lc640_write_int(EE_NUMIST,2);
X	lc640_write_int(0x10+100+36,2);
N	lc640_write_int(EE_NUMINV,0);
X	lc640_write_int(0x10+100+38,0);
N//lc640_write_int(EE_NUMDT,0);
N//lc640_write_int(EE_NUMSK,0);
N	lc640_write_int(EE_MAIN_IST,0);
X	lc640_write_int(0x10+100+2,0);
N	lc640_write_int(EE_PAR,1);
X	lc640_write_int(0x10+100+86,1);
N	lc640_write_int(EE_TBAT,60);
X	lc640_write_int(0x10+100+78,60);
N	lc640_write_int(EE_UMAX,1350);
X	lc640_write_int(0x10+100+4,1350);
N	lc640_write_int(EE_DU,1350/2);
X	lc640_write_int(0x10+100+84,1350/2);
N	//lc640_write_int(EE_UB0,1270);
N	//lc640_write_int(EE_UB20,1225);
N	lc640_write_int(EE_TSIGN,70);
X	lc640_write_int(0x10+100+82,70);
N	lc640_write_int(EE_TMAX,80);
X	lc640_write_int(0x10+100+10,80);
N//lc640_write_int(EE_C_BAT,180);
N	lc640_write_int(EE_USIGN,99);
X	lc640_write_int(0x10+100+14,99);
N	lc640_write_int(EE_UMN,187);
X	lc640_write_int(0x10+100+16,187);
N	lc640_write_int(EE_ZV_ON,0);
X	lc640_write_int(0x10+100+18,0);
N	lc640_write_int(EE_IKB,20);
X	lc640_write_int(0x10+100+20,20);
N//lc640_write_int(EE_KVZ,1030);
N	//lc640_write_int(EE_UVZ,1290);
N	lc640_write_int(EE_IMAX,80);
X	lc640_write_int(0x10+100+24,80);
N	lc640_write_int(EE_IMIN,50);
X	lc640_write_int(0x10+100+26,50);
N//lc640_write_int(EE_APV_ON,apvON);
N	lc640_write_int(EE_APV_ON1,apvON);
X	lc640_write_int(0x10+100+44,apvON);
N	lc640_write_int(EE_APV_ON2,apvON);
X	lc640_write_int(0x10+100+46,apvON);
N	lc640_write_int(EE_APV_ON2_TIME,1);
X	lc640_write_int(0x10+100+48,1);
N	lc640_write_int(EE_IZMAX,160);
X	lc640_write_int(0x10+100+30,160);
N	lc640_write_int(EE_U0B,1220);
X	lc640_write_int(0x10+100+32,1220);
N	lc640_write_int(EE_TZAS,3);
X	lc640_write_int(0x10+100+34,3);
N	lc640_write_int(EE_TBATMAX,50);  
X	lc640_write_int(0x10+100+88,50);  
N	lc640_write_int(EE_TBATSIGN,40);
X	lc640_write_int(0x10+100+90,40);
N	lc640_write_int(EE_MNEMO_ON,mnON);
X	lc640_write_int(0x10+100+72,mnON);
N	lc640_write_int(EE_MNEMO_TIME,30);	
X	lc640_write_int(0x10+100+74,30);	
N	lc640_write_int(EE_AV_OFF_AVT,1);
X	lc640_write_int(0x10+100+12,1);
N//lc640_write_int(EE_APV_ON1,apvOFF);
N
N
N
N	lc640_write_int(EE_TBOXMAX,70);
X	lc640_write_int(0x10+100+92,70);
N	lc640_write_int(EE_TBOXVENTMAX,60);
X	lc640_write_int(0x10+100+96,60);
N	lc640_write_int(EE_TBOXREG,25);
X	lc640_write_int(0x10+100+94,25);
N	lc640_write_int(EE_TLOADDISABLE,80);
X	lc640_write_int(0x10+100+98,80);
N	lc640_write_int(EE_TLOADENABLE,70);
X	lc640_write_int(0x10+100+100,70);
N	lc640_write_int(EE_TBATDISABLE,91);
X	lc640_write_int(0x10+100+102,91);
N	lc640_write_int(EE_TBATENABLE,80);
X	lc640_write_int(0x10+100+104,80);
N
N	lc640_write_int(ADR_SK_SIGN[0],0);
N	lc640_write_int(ADR_SK_REL_EN[0],0);
N	lc640_write_int(ADR_SK_LCD_EN[0],0xffff);
N
N	lc640_write_int(ADR_SK_SIGN[1],0);
N	lc640_write_int(ADR_SK_REL_EN[1],0);
N	lc640_write_int(ADR_SK_LCD_EN[1],0xffff);
N
N	lc640_write_int(ADR_SK_SIGN[2],0);
N	lc640_write_int(ADR_SK_REL_EN[2],0);
N	lc640_write_int(ADR_SK_LCD_EN[2],0xffff);
N
N	lc640_write_int(ADR_SK_SIGN[3],0);
N	lc640_write_int(ADR_SK_REL_EN[3],0);
N	lc640_write_int(ADR_SK_LCD_EN[3],0xffff);
N
N	lc640_write_int(EE_UBM_AV,10);
X	lc640_write_int(0x10+500+96,10);
N
N	lc640_write_int(EE_POS_VENT,11);
X	lc640_write_int(0x10+500+92,11);
N
N
N	lc640_write_int(EE_DU,1220-600);
X	lc640_write_int(0x10+100+84,1220-600);
N	lc640_write_int(EE_U_AVT,1220);
X	lc640_write_int(0x10+100+80,1220);
N	lc640_write_int(EE_IZMAX,20);
X	lc640_write_int(0x10+100+30,20);
N	lc640_write_int(EE_AUSW_MAIN,22033);
X	lc640_write_int(0x10+100+224,22033);
N	lc640_write_int(EE_PAR,1);
X	lc640_write_int(0x10+100+86,1);
N	lc640_write_int(EE_MNEMO_ON,mnOFF);
X	lc640_write_int(0x10+100+72,mnOFF);
N	}
N
Nlc640_write_int(ADR_EE_BAT_IS_ON[0],bisOFF);
Nlc640_write_int(ADR_EE_BAT_DAY_OF_ON[0],LPC_RTC->DOM);
Xlc640_write_int(ADR_EE_BAT_DAY_OF_ON[0],((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->DOM);
Nlc640_write_int(ADR_EE_BAT_MONTH_OF_ON[0],LPC_RTC->MONTH);
Xlc640_write_int(ADR_EE_BAT_MONTH_OF_ON[0],((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->MONTH);
Nlc640_write_int(ADR_EE_BAT_YEAR_OF_ON[0],LPC_RTC->YEAR);
Xlc640_write_int(ADR_EE_BAT_YEAR_OF_ON[0],((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->YEAR);
Nlc640_write_int(ADR_EE_BAT_C_NOM[0],0);
Nlc640_write_int(ADR_EE_BAT_RESURS[0],0);
N
Nlc640_write_int(ADR_EE_BAT_IS_ON[1],bisOFF);
Nlc640_write_int(ADR_EE_BAT_DAY_OF_ON[1],LPC_RTC->DOM);
Xlc640_write_int(ADR_EE_BAT_DAY_OF_ON[1],((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->DOM);
Nlc640_write_int(ADR_EE_BAT_MONTH_OF_ON[1],LPC_RTC->MONTH);
Xlc640_write_int(ADR_EE_BAT_MONTH_OF_ON[1],((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->MONTH);
Nlc640_write_int(ADR_EE_BAT_YEAR_OF_ON[1],LPC_RTC->YEAR);
Xlc640_write_int(ADR_EE_BAT_YEAR_OF_ON[1],((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->YEAR);
Nlc640_write_int(ADR_EE_BAT_C_NOM[1],0);
Nlc640_write_int(ADR_EE_BAT_RESURS[1],0);
N
N
Nlc640_write_int(EE_SPEED_CHRG_VOLT,2400);
Xlc640_write_int(0x10+100+164,2400);
Nlc640_write_int(EE_SPEED_CHRG_CURR,20);
Xlc640_write_int(0x10+100+162,20);
Nlc640_write_int(EE_SPEED_CHRG_TIME,1);
Xlc640_write_int(0x10+100+166,1);
Nlc640_write_int(EE_SPEED_CHRG_AVT_EN,0);
Xlc640_write_int(0x10+100+168,0);
Nlc640_write_int(EE_SPEED_CHRG_BLOCK_SRC,0);
Xlc640_write_int(0x10+100+172,0);
Nlc640_write_int(EE_SPEED_CHRG_BLOCK_LOG,0);
Xlc640_write_int(0x10+100+174,0);
Nlc640_write_int(EE_SPEED_CHRG_D_U,40);
Xlc640_write_int(0x10+100+170,40);
Nlc640_write_int(EE_U_OUT_KONTR_MAX,1310);
Xlc640_write_int(0x10+100+182,1310);
Nlc640_write_int(EE_U_OUT_KONTR_MIN,1100);
Xlc640_write_int(0x10+100+184,1100);
N
N
N}
N
N
N//-----------------------------------------------
Nvoid net_drv(void)
N{ 
N
Nmax_net_slot=24;
N
N
Nif(++cnt_net_drv>max_net_slot) 
N	{
N	cnt_net_drv=-5;
N	} 
N
N
Nif((cnt_net_drv>=0)&&(cnt_net_drv<=max_net_slot)) // с 1 по 12 посылки адресные
N
N
N	{
N	//cnt_net_drv=2; 
N	if(mess_find_unvol(MESS2NET_DRV))
X	if(mess_find_unvol(33))
N		{
N		if(mess_data[0]==PARAM_BPS_NET_OFF)
X		if(mess_data[0]==34)
N			{
N			//mess_data[1]=1;
N			if(sub_ind1==cnt_net_drv)
X			if(a_ind . s_i1==cnt_net_drv)
N				{
N				return;
N				}
N			}
N		}
N	
N	//bps[cnt_net_drv]._vol_u=2400;
N	//bps[cnt_net_drv]._x_=0;
N	//if(cntrl_stat==1000) 		   
N	if(!bCAN_OFF)
N		{
N//		if(cntrl_stat==1000)	can1_out(cnt_net_drv,cnt_net_drv,GETTM,bps[cnt_net_drv]._flags_tu,*((char*)(&UOUT)),*((char*)((&UOUT))+1),0xe8,0x03);
N//		else 					can1_out(cnt_net_drv,cnt_net_drv,GETTM,bps[cnt_net_drv]._flags_tu,*((char*)(&UOUT)),*((char*)((&UOUT))+1),*((char*)(&bps[cnt_net_drv]._x_)),*((char*)((&bps[cnt_net_drv]._x_))+1));
N
N//		if(cntrl_stat==2000) can1_out(cnt_net_drv,cnt_net_drv,GETTM,bps[cnt_net_drv]._flags_tu,*((char*)(&UOUT)),*((char*)((&UOUT))+1),(char)(cntrl_stat),(char)((cntrl_stat)>>8)/*,*((char*)(&cntrl_stat)),*((char*)((&cntrl_stat))+1)*/);
N
N//		else can1_out(cnt_net_drv,cnt_net_drv,GETTM,bps[cnt_net_drv]._flags_tu,*((char*)(&UOUT)),*((char*)((&UOUT))+1),(char)(cntrl_stat+bps[cnt_net_drv]._x_),(char)((cntrl_stat+bps[cnt_net_drv]._x_)>>8)/*,*((char*)(&cntrl_stat)),*((char*)((&cntrl_stat))+1)*/);
N
N     	}
N	if(cnt_net_drv<=max_net_slot)
N	     {
N//	     if(bps[cnt_net_drv]._cnt<CNT_SRC_MAX)
N//   	 		{    
N//   	 		bps[cnt_net_drv]._cnt++;
N //  	 		if( (bps[cnt_net_drv]._cnt>=CNT_SRC_MAX) && (!net_av) && (!(bps[cnt_net_drv]._av&0x08)) && (cnt_net_drv<NUMIST) ) 
N //  	 			{
N //  	 			avar_bps_hndl(cnt_net_drv,3,1);
N //  	 			}
N//   	 		}
N//		else bps[cnt_net_drv]._cnt=CNT_SRC_MAX;
N						
N//		if((bps[cnt_net_drv]._cnt>=3)&&(bps[cnt_net_drv]._cnt_old<3))bps[cnt_net_drv]._cnt_more2++;
N//		bps[cnt_net_drv]._cnt_old=bps[cnt_net_drv]._cnt;
N	     }
N	}
N
Nelse if(cnt_net_drv==-1)
N	{
N     //if(!bCAN_OFF)can1_out(0xff,0xff,MEM_KF,*((char*)(&UMAX)),*((char*)((&UMAX))+1),*((char*)(&DU)),*((char*)((&DU))+1),0);
N     } 
N     
Nelse if(cnt_net_drv==-2)
N	{
N	//UAVT=4567;
N     //if(!bCAN_OFF)can1_out(0xff,0xff,MEM_KF1,*((char*)(&UAVT)),*((char*)((&UAVT))+1),(char)(TMAX),(char)(TSIGN),(char)TZAS);
N     //byps._cnt++;
N	} 
Nelse if(cnt_net_drv==-3)
N	{                 
N	//if(!bCAN_OFF) can1_out(GETTM_IBATMETER,GETTM_IBATMETER,0,0,0,0,0,0);
N	ibat_metr_cnt++;
N	}
N	
N	
N//else if(cnt_net_drv==15)
N	//{
N     //if(!bCAN_OFF)can1_out(0xff,0xff,MEM_KF1,*((char*)(&TMAX)),*((char*)((&TMAX))+1),*((char*)(&TSIGN)),*((char*)((&TSIGN))+1),(char)TZAS);
N     //}
N
N
N}
N
N//-----------------------------------------------
N
N//-----------------------------------------------
Nvoid parol_init(void)
N{
Nparol[0]=0;
Nparol[1]=0;
Nparol[2]=0;
Nsub_ind=0;
Xa_ind . s_i=0;
N}
N
N//-----------------------------------------------
Nvoid bitmap_hndl(void)
N{
Nshort x,ii,i;
Nunsigned int ptr_bitmap;
N//static char ptr_cnt1,ptr_cnt2,ptr_cnt3,ptr_cnt4;
N
Nfor(ii=0;ii<488;ii++)
N	{
N	lcd_bitmap[ii]=0x00;
N	}
N
N
N	{
N	for(i=0;i<4;i++)
N		{
N		ptr_bitmap=122*(unsigned)i;
N		for(x=(20*i);x<((20*i)+20);x++)
N	 		{
N			lcd_bitmap[ptr_bitmap++]=caracter[(unsigned)lcd_buffer[x]*6];
N			lcd_bitmap[ptr_bitmap++]=caracter[((unsigned)lcd_buffer[x]*6)+1];
N			lcd_bitmap[ptr_bitmap++]=caracter[((unsigned)lcd_buffer[x]*6)+2];
N			lcd_bitmap[ptr_bitmap++]=caracter[((unsigned)lcd_buffer[x]*6)+3];
N			lcd_bitmap[ptr_bitmap++]=caracter[((unsigned)lcd_buffer[x]*6)+4];
N			lcd_bitmap[ptr_bitmap++]=caracter[((unsigned)lcd_buffer[x]*6)+5];
N			} 
N		}
N	}	
N}
N
N//-----------------------------------------------
Nvoid ind_hndl(void)
N{			  
N//const char* ptr;
Nconst char* ptrs[60];
N/*const char* sub_ptrs[50]; */
N//static char sub_cnt,sub_cnt1;
N//char /*i,*/sub_cnt_max;
N//char ii_;				  
N//static char /*ii_cnt,*/cnt_ind_bat;
Nlong tempL;
N
N	   
N//sub_cnt_max=5;
N//i=0;
N/*	      
Nif(spc_stat==spcVZ)
N	{
N	sub_ptrs[i++]=		" Выравн.заряд  X:0x ";
N	sub_cnt_max++;
N	}
Nif(spc_stat==spcKE)
N	{
N	if(spc_bat==0)		sub_ptrs[i++]=		"Контроль емк. бат №1";
N	else if(spc_bat==1)	sub_ptrs[i++]=		"Контроль емк. бат №2";
N	sub_cnt_max++;
N	}*/	
N
N
N/*
Nif(avar_stat&0x0002)
N	{
N	sub_ptrs[i++]=	" Авария батареи №1  ";
N	sub_cnt_max++;	
N	}
N
Nif(avar_stat&0x0004)
N	{
N	sub_ptrs[i++]=	" Авария батареи №2  ";
N	sub_cnt_max++;	
N	}*/
N/*
Nif(ips_bat_av_stat)
N	{
N	sub_ptrs[i++]=	"  Авария батареи    ";
N	sub_cnt_max++;	
N	}
N
Nif(uout_av)
N	{
N	sub_ptrs[i++]=	"   Авария Uвых!!!   ";
N	sub_cnt_max++;	
N	}
N
N
N
N
Nif(overloadAvar)
N	{
N	sub_ptrs[i++]=	" Перегрузка по току!";
N	sub_cnt_max++;	
N	}
N
Nif(sysTAvar)
N	{
N	sub_ptrs[i++]=	" Перегрев системы!  ";
N	sub_cnt_max++;	
N	}
N
Nif(uOutAvar==1)
N	{
N	sub_ptrs[i++]=	"   Завышено Uвых.!  ";
N	sub_cnt_max++;	
N	}
N
Nif(uOutAvar==2)
N	{
N	sub_ptrs[i++]=	"   Занижено Uвых.!  ";
N	sub_cnt_max++;	
N	}
N
Nif(uInAvar==1)
N	{
N	sub_ptrs[i++]=	"   Завышено Uвх.!   ";
N	sub_cnt_max++;	
N	}
N
Nif(uInAvar==2)
N	{
N	sub_ptrs[i++]=	"   Занижено Uвх.!   ";
N	sub_cnt_max++;	
N	}
N
Ncnt_of_slave=NUMIST+NUMINV;
N
N
N//cnt_of_wrks=0;
N//for(i=0;i<NUMIST;i++)
N //    {
N//     if(bps[i]._state==bsWRK)cnt_of_wrks++;
N  //   }
N
N
Nsub_cnt1++;	
Nif(sub_cnt1>=20)
N	{
N	sub_cnt1=0;
N	sub_cnt++;
N	if(sub_cnt>=sub_cnt_max)
N		{
N		sub_cnt=0;
N		}
N	} */
N
N
N
N
N
N
N/*else */if(ind==iMn)
X if(a_ind . i==iMn)
N	{
N	ptrs[0]	=			" 0%:0^:0& 0</>  /0{ ";
N	ptrs[1]=			"       мА     .  В  ";	
N	ptrs[2]=			" Полная проверка    ";
N	ptrs[3]=			" Установка времени  ";
N	ptrs[4]=			" Контроль интерфейса";
N    ptrs[5]=			" Контроль оптронов  ";
N	ptrs[6]=			" Датчик воздуха     ";
N	ptrs[7]=			" Датчик воды        ";	
N	ptrs[8]=			" Пробная смс        ";
N	ptrs[9]=			" Тест выключения    ";
N	ptrs[10]=			" Заводские установки";						
N	
N	
N
N	if(sub_ind-index_set>1)index_set=sub_ind-1;
X	if(a_ind . s_i-a_ind . i_s>1)a_ind . i_s=a_ind . s_i-1;
N	else if (sub_ind<index_set)index_set=sub_ind;
X	else if (a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	
N	bgnd_par(ptrs[0],ptrs[1],ptrs[index_set+2],ptrs[index_set+3]);
X	bgnd_par(ptrs[0],ptrs[1],ptrs[a_ind . i_s+2],ptrs[a_ind . i_s+3]);
N 	
N	int2lcd(LPC_RTC->HOUR,'%',0);
X	int2lcd(((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->HOUR,'%',0);
N	int2lcd(LPC_RTC->MIN,'^',0);
X	int2lcd(((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->MIN,'^',0);
N	int2lcd(LPC_RTC->SEC,'&',0);
X	int2lcd(((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->SEC,'&',0);
N	int2lcd(LPC_RTC->DOM,'<',0);
X	int2lcd(((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->DOM,'<',0);
N	int2lcd(LPC_RTC->YEAR,'{',0); 
X	int2lcd(((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->YEAR,'{',0); 
N	sub_bgnd(sm_mont[LPC_RTC->MONTH],'>',0);
X	sub_bgnd(sm_mont[((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->MONTH],'>',0);
N
N 	if(bFL2)
N 	     {
N 	     lcd_buffer[find(':')]=' ';
N 	     lcd_buffer[find(':')]=' ';
N 	     lcd_buffer[find(':')]=' ';
N 	     }
N
N	pointer_set(2);	
N	tempL=(long)ad7705_res1-32600L;
N	if(tempL<0)tempL=0;
N	tempL*=10;
N	tempL/=255;
N
N	int2lcdyx(tempL,1,6,0);
N	int2lcdyx((adc_buff_[10]*10)/62,1,16,2);
N
N	//int2lcdyx(ad7705_buff_[1],1,17,0);
N	/*
N	int2lcdyx(rele_in_stat[2][0],1,9,0);
N	int2lcdyx(rele_in_stat[2][1],1,11,0);
N	int2lcdyx(rele_in_stat[2][2],1,13,0);
N	int2lcdyx(rele_in_stat[1][0],2,9,0);
N	int2lcdyx(rele_in_stat[1][1],2,11,0);
N	int2lcdyx(rele_in_stat[1][2],2,13,0);
N	int2lcdyx(rele_in_stat[0][0],3,9,0);
N	int2lcdyx(rele_in_stat[0][1],3,11,0);
N	int2lcdyx(rele_in_stat[0][2],3,13,0);	*/		
N	}
N
Nelse if(ind==iInterf_kontr)
Xelse if(a_ind . i==iInterf_kontr)
N	{
N	bgnd_par(	" ПРОВЕРКА ИНДИКАЦИИ ",
N				"      КНОПОК        ",
N				"      БИППЕРА       ",
N				" Выход              "); 
N	pointer_set(3);
N	} 
N
N
Nelse if(ind==iOptr_kontr)
Xelse if(a_ind . i==iOptr_kontr)
N	{
N	const char* ptr[12];
N 
N	simax=10;
N
N	ptr[0]=			" Оптр3     !    @#$ ";
N	ptr[1]=			" Оптр2     %    ^&* ";
N	ptr[2]=			" Оптр1     (    )-= ";
N	ptr[3]=			sm_exit;
N
N
N		{
N		bgnd_par(		" КОНТРОЛЬ ОПТРОНОВ  ",
N					ptr[index_set],
X					ptr[a_ind . i_s],
N					ptr[index_set+1],
X					ptr[a_ind . i_s+1],
N					ptr[index_set+2]);
X					ptr[a_ind . i_s+2]);
N
N		if(sub_ind-index_set>2)index_set=sub_ind-2;
X		if(a_ind . s_i-a_ind . i_s>2)a_ind . i_s=a_ind . s_i-2;
N		else if (sub_ind<index_set)index_set=sub_ind;
X		else if (a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N
N		pointer_set(1);
N		
N		}
N	
N	if(optr_stat[2]==osON)	sub_bgnd("ВКЛ.",'!',-3);
N	else 					sub_bgnd("ВЫКЛ.",'!',-4);
N	if(optr_stat[1]==osON)	sub_bgnd("ВКЛ.",'%',-3);
N	else 					sub_bgnd("ВЫКЛ.",'%',-4);
N	if(optr_stat[0]==osON)	sub_bgnd("ВКЛ.",'(',-3);
N	else 					sub_bgnd("ВЫКЛ.",'(',-4);
N
N	int2lcd(rele_in_stat[2][0],'@',0);
N	int2lcd(rele_in_stat[2][1],'#',0);
N	int2lcd(rele_in_stat[2][2],'$',0);
N	int2lcd(rele_in_stat[1][0],'^',0);
N	int2lcd(rele_in_stat[1][1],'&',0);
N	int2lcd(rele_in_stat[1][2],'*',0);
N	int2lcd(rele_in_stat[0][0],')',0);
N	int2lcd(rele_in_stat[0][1],'-',0);
N	int2lcd(rele_in_stat[0][2],'=',0);
N    }
N
N 
Nelse if(ind==iWater_sensor_kontr)
Xelse if(a_ind . i==iWater_sensor_kontr)
N	{
N	bgnd_par(	" НА ЛЕВОМ ИНДИКАТОРЕ",
N				"    ТЕМПЕРАТУРА     ",
N				"    ДАТЧИКА ВОДЫ    ",
N				" Выход              "); 
N	pointer_set(3);
N	} 	   
N	 	  
N
Nelse if(ind==iAir_sensor_kontr)
Xelse if(a_ind . i==iAir_sensor_kontr)
N	{
N	bgnd_par(	" НА ЛЕВОМ ИНДИКАТОРЕ",
N				"    ТЕМПЕРАТУРА     ",
N				"  ДАТЧИКА ВОЗДУХА   ",
N				" Выход              "); 
N	pointer_set(3);
N	} 	 
N
Nelse if(ind==iProbesms)
Xelse if(a_ind . i==iProbesms)
N	{
N	bgnd_par(	"     ОТПРАВКА       ",
N				"     ПРОБНОЙ        ",
N				"       СМС          ",
N				" Выход              "); 
N	pointer_set(3);
N	}
N
Nif(ind==iPowerdown)
Xif(a_ind . i==iPowerdown)
N	{
N	bgnd_par(	"  ПРОВЕРКА РЕАКЦИИ  ",
N				"   НА ПРОПАДАНИЕ    ",
N				"       СЕТИ         ",
N				" Выход              "); 
N	pointer_set(3);
N	}
Nif(ind==iPowerdown_ret)
Xif(a_ind . i==iPowerdown_ret)
N	{
N	bgnd_par(	" ОБРАТИТЬ ВНИМАНИЕ  ",
N				"      НА ХОД        ",
N				"       ЧАСОВ        ",
N				"                    "); 
N
N	}
N
Nif(ind==iDefset)
Xif(a_ind . i==iDefset)
N	{
N	bgnd_par(	"       ЗАПИСЬ       ",
N				"      ЗАВОДСКИХ     ",
N				"      УСТАНОВОК     ",
N				"                    "); 
N
N	}
N
Nelse if(ind==iAvt)
Xelse if(a_ind . i==iAvt)
N	{
N     ptrs[0]=  		"  АВТОМАТЫ НАГРУЗОК ";
N	ptrs[1]=  		" Автомат №1       ! ";
N	ptrs[2]=  		" Автомат №2       @ ";
N	ptrs[3]=  		" Автомат №3       # ";
N	ptrs[4]=  		" Автомат №4       $ ";
N	ptrs[5]=  		" Автомат №5       % ";
N	ptrs[6]=  		" Автомат №6       ^ ";
N	ptrs[7]=  		" Автомат №7       & ";
N	ptrs[8]=  		" Автомат №8       * ";
N	ptrs[9]=  		" Автомат №9       ( ";
N	ptrs[10]=  		" Автомат №10      ) ";
N	ptrs[11]=  		" Автомат №11      + ";
N	ptrs[12]=  		" Автомат №12      = ";
N
N	ptrs[1+NUMAVT]=  	" Выход              ";
N	ptrs[2+NUMAVT]=  	"                    ";
N	ptrs[3+NUMAVT]=  	"                    ";
N
N	bgnd_par(		ptrs[0],
N				ptrs[index_set+1],
X				ptrs[a_ind . i_s+1],
N				ptrs[index_set+2],
X				ptrs[a_ind . i_s+2],
N				ptrs[index_set+3]);
X				ptrs[a_ind . i_s+3]);
N
N	if(sub_ind-index_set>2)index_set=sub_ind-2;
X	if(a_ind . s_i-a_ind . i_s>2)a_ind . i_s=a_ind . s_i-2;
N	else if (sub_ind<index_set)index_set=sub_ind;
X	else if (a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	pointer_set(1);
N
N	//int2lcdyx(eb2_data_short[6],0,6,0);
N/*
N	if(avt_stat[0]==avtON)	sub_bgnd("ВКЛ.",'!',-3);
N	else 				sub_bgnd("ВЫКЛ.",'!',-4);
N	if(avt_stat[1]==avtON)	sub_bgnd("ВКЛ.",'@',-3);
N	else 				sub_bgnd("ВЫКЛ.",'@',-4);
N	if(avt_stat[2]==avtON)	sub_bgnd("ВКЛ.",'#',-3);
N	else 				sub_bgnd("ВЫКЛ.",'#',-4);
N	if(avt_stat[3]==avtON)	sub_bgnd("ВКЛ.",'$',-3);
N	else 				sub_bgnd("ВЫКЛ.",'$',-4);
N	if(avt_stat[4]==avtON)	sub_bgnd("ВКЛ.",'%',-3);
N	else 				sub_bgnd("ВЫКЛ.",'%',-4);
N	if(avt_stat[5]==avtON)	sub_bgnd("ВКЛ.",'^',-3);
N	else 				sub_bgnd("ВЫКЛ.",'^',-4);
N	if(avt_stat[6]==avtON)	sub_bgnd("ВКЛ.",'&',-3);
N	else 				sub_bgnd("ВЫКЛ.",'&',-4);
N	if(avt_stat[7]==avtON)	sub_bgnd("ВКЛ.",'*',-3);
N	else 				sub_bgnd("ВЫКЛ.",'*',-4);
N	if(avt_stat[8]==avtON)	sub_bgnd("ВКЛ.",'(',-3);
N	else 				sub_bgnd("ВЫКЛ.",'(',-4);
N	if(avt_stat[9]==avtON)	sub_bgnd("ВКЛ.",')',-3);
N	else 				sub_bgnd("ВЫКЛ.",')',-4);
N	if(avt_stat[10]==avtON)	sub_bgnd("ВКЛ.",'+',-3);
N	else 				sub_bgnd("ВЫКЛ.",'+',-4); 
N	if(avt_stat[11]==avtON)	sub_bgnd("ВКЛ.",'=',-3);
N	else 				sub_bgnd("ВЫКЛ.",'=',-4);	*/
N     //int2lcd(Uvv[1],'$',0);
N     //int2lcd(Uvv[2],'$',0);
N
N     //long2lcd_mmm(power_summary,'%',2);
N     //int2lcd(power_current,'^',0);
N
N     //int2lcdyx(adc_buff_ext_[0],0,4,0);
N     //int2lcdyx(adc_buff_ext_[1],0,10,0);
N     //int2lcdyx(adc_buff_ext_[2],0,16,0);
N     }
N
N
Nelse if(ind==iBatLogVz)
Xelse if(a_ind . i==iBatLogVz)
N	{
N	if(av_j_si_max==0)
N		{
N		bgnd_par(	"ВЫРАВНИВАЮЩИЕ ЗАРЯДЫ",
N				"     БАТАРЕИ N!     ",
N				" Журнал пуст        ",
N				sm_exit);
N		sub_ind=0;
X		a_ind . s_i=0;
N		index_set=0;
X		a_ind . i_s=0;
N		pointer_set(3);
N		} 
N	else if(av_j_si_max==1)
N		{
N		bgnd_par(	"ВЫРАВНИВАЮЩИЕ ЗАРЯДЫ",
N				"     БАТАРЕИ N!     ",
N				" (                  ",
N				sm_exit);
N		index_set=0;
X		a_ind . i_s=0;
N		pointer_set(2);
N		}	
N	else
N		{
N		if(sub_ind<index_set) index_set=sub_ind;
X		if(a_ind . s_i<a_ind . i_s) a_ind . i_s=a_ind . s_i;
N		else if((sub_ind-index_set)>1) index_set=sub_ind-1;
X		else if((a_ind . s_i-a_ind . i_s)>1) a_ind . i_s=a_ind . s_i-1;
N		if(index_set==(av_j_si_max-1)) 
X		if(a_ind . i_s==(av_j_si_max-1)) 
N			{
N			bgnd_par(	"ВЫРАВНИВАЮЩИЕ ЗАРЯДЫ",
N					"     БАТАРЕИ N!     ",
N					" (                  ",
N					sm_exit);
N			}
N
N		else bgnd_par(	"ВЫРАВНИВАЮЩИЕ ЗАРЯДЫ",
N					"     БАТАРЕИ N!     ",
N					" (                  ",
N					" [                  "); 
N		pointer_set(2);			        
N		}
N   	int2lcd(sub_ind1+1,'!',0);
X   	int2lcd(a_ind . s_i1+1,'!',0);
N 	event_data2ind(content[index_set],'(');
X 	event_data2ind(content[a_ind . i_s],'(');
N 	event_data2ind(content[index_set+1],'[');
X 	event_data2ind(content[a_ind . i_s+1],'[');
N	
N	}
N   
Nelse if(ind==iBatLogWrk)
Xelse if(a_ind . i==iBatLogWrk)
N	{
N	if(av_j_si_max==0)
N		{
N		bgnd_par(	"      РАЗРЯДЫ       ",
N				"     БАТАРЕИ N!     ",
N				" Журнал пуст        ",
N				sm_exit);
N		sub_ind=0;
X		a_ind . s_i=0;
N		index_set=0;
X		a_ind . i_s=0;
N		pointer_set(3);
N		} 
N	else if(av_j_si_max==1)
N		{
N		bgnd_par(	"      РАЗРЯДЫ       ",
N				"     БАТАРЕИ N!     ",
N				" (                  ",
N				sm_exit);
N		index_set=0;
X		a_ind . i_s=0;
N		pointer_set(2);
N		}	
N
N	else
N		{
N		if(sub_ind<index_set) index_set=sub_ind;
X		if(a_ind . s_i<a_ind . i_s) a_ind . i_s=a_ind . s_i;
N		else if((sub_ind-index_set)>1) index_set=sub_ind-1;
X		else if((a_ind . s_i-a_ind . i_s)>1) a_ind . i_s=a_ind . s_i-1;
N		if(index_set==(av_j_si_max-1))
X		if(a_ind . i_s==(av_j_si_max-1))
N			{
N			bgnd_par(	"      РАЗРЯДЫ       ",
N					"     БАТАРЕИ N!     ",
N					" (                  ",
N					sm_exit);
N			}
N		else bgnd_par(	"      РАЗРЯДЫ       ",
N					"     БАТАРЕИ N!     ",
N					" (                  ",
N					" [                  ");
N
N		pointer_set(2);
N		}
N
N   	int2lcd(sub_ind1+1,'!',0);
X   	int2lcd(a_ind . s_i1+1,'!',0);
N 	event_data2ind(content[index_set],'(');
X 	event_data2ind(content[a_ind . i_s],'(');
N 	event_data2ind(content[index_set+1],'[');
X 	event_data2ind(content[a_ind . i_s+1],'[');
N
N	
N
N	} 
N	
Nelse if((ind==iSet_prl)||(ind==iK_prl)
Xelse if((a_ind . i==iSet_prl)||(a_ind . i==iK_prl)
N	||(ind==iAusw_prl)||(ind==iPrltst))
X	||(a_ind . i==iAusw_prl)||(a_ind . i==iPrltst))
N	{
N	bgnd_par("  Введите  пароль   ",sm_,sm_,sm_);
N	int2lcdyx(parol[0],1,8,0);
N     int2lcdyx(parol[1],1,9,0);
N     int2lcdyx(parol[2],1,10,0);
N     lcd_buffer[48+sub_ind]='¤';
X     lcd_buffer[48+a_ind . s_i]='¤';
N	}	
N		
Nelse if(ind==iPrl_bat_in_out)
Xelse if(a_ind . i==iPrl_bat_in_out)
N	{
N	if(BAT_IS_ON[sub_ind1]==bisON)ptrs[0]="Для выведения бат.-и";
X	if(BAT_IS_ON[a_ind . s_i1]==bisON)ptrs[0]="Для выведения бат.-и";
N	else  ptrs[0]="Для введения батареи";
N	bgnd_par(ptrs[0],"  наберите пароль   ",sm_,sm_);
N	
N     int2lcdyx(parol[0],2,8,0);
N     int2lcdyx(parol[1],2,9,0);
N     int2lcdyx(parol[2],2,10,0);
N     lcd_buffer[68+sub_ind]='¤';	
X     lcd_buffer[68+a_ind . s_i]='¤';	
N	}
N
Nelse if(ind==iPrl_bat_in_sel)
Xelse if(a_ind . i==iPrl_bat_in_sel)
N	{
N	
N	bgnd_par(	"Для введения батареи",
N			"   выбеите ее тип   ",
N			" Свинцово-кислотная ",
N			" GYFP4875T          ");
N	
N	pointer_set(2);
N	}
N
N
N
N
Nelse if(ind==iSet_T)
Xelse if(a_ind . i==iSet_T)
N	{
N	static char phase_cnt;
N	if(++phase_cnt>=15)
N	     {
N	     phase_cnt=0;
N	     if(++phase>=3)phase=0;
N	     }
N	ptrs[0]=sm_time;
N	ptrs[1]=sm_;
N	if(phase==0)ptrs[2]="     <> - выбор     ";
N     if(phase==1)ptrs[2]="   ^v - установка   ";
N     if(phase==2)ptrs[2]="     ¤  - выход     ";
N	
N	bgnd_par(" УСТАНОВКА  ВРЕМЕНИ ",ptrs[0],ptrs[1],ptrs[2]);
N     if(sub_ind==0)lcd_buffer[42]='^';
X     if(a_ind . s_i==0)lcd_buffer[42]='^';
N     else if(sub_ind==1)lcd_buffer[45]='^';
X     else if(a_ind . s_i==1)lcd_buffer[45]='^';
N     else if(sub_ind==2)lcd_buffer[48]='^';
X     else if(a_ind . s_i==2)lcd_buffer[48]='^';
N     else if(sub_ind==3)lcd_buffer[51]='^';
X     else if(a_ind . s_i==3)lcd_buffer[51]='^';
N     else if(sub_ind==4)lcd_buffer[55]='^';
X     else if(a_ind . s_i==4)lcd_buffer[55]='^';
N     else if(sub_ind==5)lcd_buffer[59]='^';
X     else if(a_ind . s_i==5)lcd_buffer[59]='^';
N  
N 	//int2lcd(LPC_RTC->SEC,'&',0);
N 	int2lcd(LPC_RTC->MIN,'^',0);
X 	int2lcd(((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->MIN,'^',0);
N 	int2lcd(LPC_RTC->HOUR,'%',0);
X 	int2lcd(((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->HOUR,'%',0);
N 	
N 	int2lcd(LPC_RTC->DOM,'<',0);
X 	int2lcd(((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->DOM,'<',0);
N 	sub_bgnd(sm_mont[LPC_RTC->MONTH],'>',0);
X 	sub_bgnd(sm_mont[((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->MONTH],'>',0);
N 	int2lcd(LPC_RTC->YEAR,'{',0);
X 	int2lcd(((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->YEAR,'{',0);
N 	if(bFL2)
N 	     {
N 	     lcd_buffer[find(':')]=' ';
N 	     //lcd_buffer[find(':')]=' ';
N 	     }
N	
N	sub_bgnd(sm_dow[LPC_RTC->DOW],'&',-1);
X	sub_bgnd(sm_dow[((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->DOW],'&',-1);
N	//if(LPC_RTC->DOW==0)
N	//int2lcdyx(LPC_RTC->DOW,2,5,0);
N	//int2lcdyx(LPC_RTC->DOY,2,10,0);	 
N	int2lcdyx(sub_ind,0,2,0);	   
X	int2lcdyx(a_ind . s_i,0,2,0);	   
N	}  
N
Nelse if((ind==iSet_T_ret)||(ind==iAir_sensor_kontr_ret)||(ind==iWater_sensor_kontr_ret)||(ind==iInterf_kontr_ret))
Xelse if((a_ind . i==iSet_T_ret)||(a_ind . i==iAir_sensor_kontr_ret)||(a_ind . i==iWater_sensor_kontr_ret)||(a_ind . i==iInterf_kontr_ret))
N	{
N	bgnd_par(sm_,sm_,sm_,sm_);	 
N		   
N	}  
N
Nelse if(ind==iK)
Xelse if(a_ind . i==iK)
N	{
N	char i;
N	i=0;
N	
N	ptrs[i++]=" Сеть               ";
N	if(NUMBAT)
N     ptrs[i++]=" Батареи            ";
N	if(NUMIST)
N	ptrs[i++]=" БПС                ";
N	if(NUMINV)
N     ptrs[i++]=" Инверторы          ";
N	ptrs[i++]=" Нагрузка           ";
N     ptrs[i++]=" Внешние датчики    ";
N     ptrs[i++]=" Силовые вводы      ";
N     ptrs[i++]=" Выход              ";
N     ptrs[i++]="                    ";
N     ptrs[i++]="                    ";
N
N	if((sub_ind-index_set)>2)index_set=sub_ind-2;
X	if((a_ind . s_i-a_ind . i_s)>2)a_ind . i_s=a_ind . s_i-2;
N	else if(sub_ind<index_set)index_set=sub_ind;
X	else if(a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	bgnd_par("     КАЛИБРОВКА     ",
N			ptrs[index_set],
X			ptrs[a_ind . i_s],
N			ptrs[index_set+1],
X			ptrs[a_ind . i_s+1],
N			ptrs[index_set+2]);
X			ptrs[a_ind . i_s+2]);
N
N	pointer_set(1);	 
N	}    	
N
N
Nelse if(ind==iK_220_IPS_TERMOKOMPENSAT)
Xelse if(a_ind . i==iK_220_IPS_TERMOKOMPENSAT)
N	{
N	char i;
N	i=0;
N	
N	ptrs[i++]=" Сеть               ";
N	if(NUMBAT)
N     ptrs[i++]=" Батареи            ";
N	if(NUMIST)
N	ptrs[i++]=" БПС                ";
N	ptrs[i++]=" Выходные параметры ";
N     if(NUMDT)
N     ptrs[i++]=" Внешние датчики    ";
N     ptrs[i++]=" Выход              ";
N     ptrs[i++]="                    ";
N     ptrs[i++]="                    ";
N
N	if((sub_ind-index_set)>2)index_set=sub_ind-2;
X	if((a_ind . s_i-a_ind . i_s)>2)a_ind . i_s=a_ind . s_i-2;
N	else if(sub_ind<index_set)index_set=sub_ind;
X	else if(a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	bgnd_par("     КАЛИБРОВКА     ",
N			ptrs[index_set],
X			ptrs[a_ind . i_s],
N			ptrs[index_set+1],
X			ptrs[a_ind . i_s+1],
N			ptrs[index_set+2]);
X			ptrs[a_ind . i_s+2]);
N
N	pointer_set(1);	 
N	}   
N
Nelse if(ind==iK_VD)
Xelse if(a_ind . i==iK_VD)
N	{
N	char i;
N	i=0;
N	
N	ptrs[i++]=" Uвых.         !В   ";
N	ptrs[i++]=" Iвых.         @А   ";
N	if(NUMIST)
N	ptrs[i++]=" БПС                ";
N	ptrs[i++]=" Uв.д.         #В   ";
N    ptrs[i++]=" Tсистемы  =   ^°C  ";;
N    ptrs[i++]=" Выход              ";
N    ptrs[i++]="                    ";
N    ptrs[i++]="                    ";
N
N	if((sub_ind-index_set)>2)index_set=sub_ind-2;
X	if((a_ind . s_i-a_ind . i_s)>2)a_ind . i_s=a_ind . s_i-2;
N	else if(sub_ind<index_set)index_set=sub_ind;
X	else if(a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	bgnd_par("     КАЛИБРОВКА     ",
N			ptrs[index_set],
X			ptrs[a_ind . i_s],
N			ptrs[index_set+1],
X			ptrs[a_ind . i_s+1],
N			ptrs[index_set+2]);
X			ptrs[a_ind . i_s+2]);
N
N	pointer_set(1);
N
N	int2lcd(out_U,'!',1);
N	int2lcd(out_I,'@',0);
N	int2lcd(vd_U,'#',1);
N	int2lcd(sys_T,'^',0);
N	
N	//int2lcdyx(adc_buff_[0],0,4,0);
N    //int2lcdyx(adc_buff_[1],0,9,0);	
N	
N	if((sub_ind==0)||(sub_ind==3))mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_SET,1000,10);
X	if((a_ind . s_i==0)||(a_ind . s_i==3))mess_send(225,229,1000,10);
N	
N	//int2lcdyx(adc_buff_[6],0,4,0);
N	//int2lcdyx(Ktext[0],0,9,0);	 
N	}   
N
N
Nelse if(ind==iK_220_IPS_TERMOKOMPENSAT_IB)
Xelse if(a_ind . i==iK_220_IPS_TERMOKOMPENSAT_IB)
N	{
N	char i;
N	i=0;
N	
N	ptrs[i++]=" Сеть               ";
N    ptrs[i++]=" Батарея            ";
N	if(NUMIST)
N	ptrs[i++]=" БПС                ";
N	ptrs[i++]=" Выходные параметры ";
N    if(NUMDT)
N    ptrs[i++]=" Внешние датчики    ";
N    ptrs[i++]=" Выход              ";
N    ptrs[i++]="                    ";
N    ptrs[i++]="                    ";
N
N	if((sub_ind-index_set)>2)index_set=sub_ind-2;
X	if((a_ind . s_i-a_ind . i_s)>2)a_ind . i_s=a_ind . s_i-2;
N	else if(sub_ind<index_set)index_set=sub_ind;
X	else if(a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	bgnd_par("     КАЛИБРОВКА     ",
N			ptrs[index_set],
X			ptrs[a_ind . i_s],
N			ptrs[index_set+1],
X			ptrs[a_ind . i_s+1],
N			ptrs[index_set+2]);
X			ptrs[a_ind . i_s+2]);
N
N	pointer_set(1);	 
N	}   
N
N
Nelse if(ind==iK_TELECORE)
Xelse if(a_ind . i==iK_TELECORE)
N	{
N	char i;
N	i=0;
N	
N	ptrs[i++]=	" Сеть               ";
N	if(NUMBAT_TELECORE)
N    ptrs[i++]=	" Батареи            ";
N	if(NUMIST)
N	ptrs[i++]=	" БПС                ";
N	ptrs[i++]=	" Нагрузка           ";
N    if(NUMDT)
N    ptrs[i++]=	" Внешние датчики    ";
N    ptrs[i++]=" Выход              ";
N    ptrs[i++]="                    ";
N    ptrs[i++]="                    ";
N
N	if((sub_ind-index_set)>2)index_set=sub_ind-2;
X	if((a_ind . s_i-a_ind . i_s)>2)a_ind . i_s=a_ind . s_i-2;
N	else if(sub_ind<index_set)index_set=sub_ind;
X	else if(a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	bgnd_par("     КАЛИБРОВКА     ",
N			ptrs[index_set],
X			ptrs[a_ind . i_s],
N			ptrs[index_set+1],
X			ptrs[a_ind . i_s+1],
N			ptrs[index_set+2]);
X			ptrs[a_ind . i_s+2]);
N
N	pointer_set(1);	 
N	}    	
N
Nelse if(ind==iK_net)
Xelse if(a_ind . i==iK_net)
N	{
N	ptrs[0]=" U =     @В         ";
N     ptrs[1]=" Выход              ";
N	ptrs[2]="                    ";
N	
N	if((sub_ind-index_set)>2)index_set=sub_ind-2;
X	if((a_ind . s_i-a_ind . i_s)>2)a_ind . i_s=a_ind . s_i-2;
N	else if(sub_ind<index_set)index_set=sub_ind;
X	else if(a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	bgnd_par("   КАЛИБРОВКА СЕТИ  ",ptrs[index_set],ptrs[index_set+1],ptrs[index_set+2]);
X	bgnd_par("   КАЛИБРОВКА СЕТИ  ",ptrs[a_ind . i_s],ptrs[a_ind . i_s+1],ptrs[a_ind . i_s+2]);
N
N	pointer_set(1);	
N	int2lcd(net_U,'@',0);
N	//int2lcdyx(net_buff_,3,10,0);
N	
N	//int2lcdyx(Kunet,3,16,0);
N     }
N
N
Nelse if(ind==iK_net3)
Xelse if(a_ind . i==iK_net3)
N	{
N
N	ptrs[0]=  		" UфA           !В   ";
N    ptrs[1]=  		" UфB           @В   ";
N    ptrs[2]=  	    " UфC           #В   ";
N	ptrs[3]=  	    " Выход              ";
N
N
N	bgnd_par(		"   КАЛИБРОВКА СЕТИ  ",
N					ptrs[index_set],
X					ptrs[a_ind . i_s],
N					ptrs[index_set+1],
X					ptrs[a_ind . i_s+1],
N					ptrs[index_set+2]);
X					ptrs[a_ind . i_s+2]);
N
N	if(sub_ind-index_set>2)index_set=sub_ind-2;
X	if(a_ind . s_i-a_ind . i_s>2)a_ind . i_s=a_ind . s_i-2;
N	else if (sub_ind<index_set)index_set=sub_ind;
X	else if (a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	pointer_set(1);
N
N    int2lcd(net_Ua,'!',0);
N	int2lcd(net_Ub,'@',0);
N	int2lcd(net_Uc,'#',0);
N
N	/*int2lcdyx(KunetC,0,19,0);
N	int2lcdyx(adc_buff_[10],0,13,0);
N	int2lcdyx(KunetB,0,8,0);
N	int2lcdyx(adc_buff_[3],0,4,0);*/
N
N    }
N
N
Nelse if(ind==iK_load)
Xelse if(a_ind . i==iK_load)
N	{
N	ptrs[0]=" U =     @В         ";
N     ptrs[1]=" Выход              ";
N	ptrs[2]="                    ";
N	
N	if((sub_ind-index_set)>2)index_set=sub_ind-2;
X	if((a_ind . s_i-a_ind . i_s)>2)a_ind . i_s=a_ind . s_i-2;
N	else if(sub_ind<index_set)index_set=sub_ind;
X	else if(a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	bgnd_par(		" КАЛИБРОВКА НАГРУЗКИ",
N				ptrs[index_set],
X				ptrs[a_ind . i_s],
N				ptrs[index_set+1],
X				ptrs[a_ind . i_s+1],
N				ptrs[index_set+2]);
X				ptrs[a_ind . i_s+2]);
N
N	pointer_set(1);
N	if((load_U)>1000)int2lcd(load_U/10,'@',0);	
N	else int2lcd(load_U,'@',1);
N     }
N
Nelse if(ind==iK_t_ext)
Xelse if(a_ind . i==iK_t_ext)
N	{
N	ptrs[0]=  	" tвнеш.возд.    !°С ";
N     ptrs[1]=  	" tотсек ЭПУ     @°С ";
N     ptrs[2]=  	" tотсек MSAN    #°С ";
N     ptrs[3]=	     " Выход              ";
N	ptrs[4]=	     "                    ";
N	ptrs[5]=	     "                    ";
N	
N	if((sub_ind-index_set)>1)index_set=sub_ind-1;
X	if((a_ind . s_i-a_ind . i_s)>1)a_ind . i_s=a_ind . s_i-1;
N	else if(sub_ind<index_set)index_set=sub_ind;
X	else if(a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	bgnd_par(		" КАЛИБРОВКА ВНЕШНИХ ",
N				" ДАТЧИКОВ ТЕМПЕРАТУР",
N				ptrs[index_set],
X				ptrs[a_ind . i_s],
N				ptrs[index_set+1]);
X				ptrs[a_ind . i_s+1]);
N
N	pointer_set(2);	
N	if(ND_EXT[0])sub_bgnd("неиспр.",'!',-3);
N     else int2lcd_mmm(t_ext[0],'!',0);
N
N	if(ND_EXT[1])sub_bgnd("неиспр.",'@',-3);
N     else int2lcd_mmm(t_ext[1],'@',0);
N
N	if(ND_EXT[2])sub_bgnd("неиспр.",'#',-3);
N     else int2lcd_mmm(t_ext[2],'#',0);
N     }
N
Nelse if(ind==iK_t_ext_6U)
Xelse if(a_ind . i==iK_t_ext_6U)
N	{
N	ptrs[0]=  		" t1             !°С ";
N    ptrs[1]=  		" t2             @°С ";
N    ptrs[2]=  		" t3             #°С ";
N    ptrs[NUMDT]=	" Выход              ";
N	ptrs[NUMDT+1]=  "                    ";
N	ptrs[NUMDT+2]=  "                    ";
N	
N	if((sub_ind-index_set)>1)index_set=sub_ind-1;
X	if((a_ind . s_i-a_ind . i_s)>1)a_ind . i_s=a_ind . s_i-1;
N	else if(sub_ind<index_set)index_set=sub_ind;
X	else if(a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	bgnd_par(		" КАЛИБРОВКА ВНЕШНИХ ",
N				" ДАТЧИКОВ ТЕМПЕРАТУР",
N				ptrs[index_set],
X				ptrs[a_ind . i_s],
N				ptrs[index_set+1]);
X				ptrs[a_ind . i_s+1]);
N
N	pointer_set(2);	
N	if(ND_EXT[0])sub_bgnd("неиспр.",'!',-3);
N     else int2lcd_mmm(t_ext[0],'!',0);
N
N	if(ND_EXT[1])sub_bgnd("неиспр.",'@',-3);
N     else int2lcd_mmm(t_ext[1],'@',0);
N
N	if(ND_EXT[2])sub_bgnd("неиспр.",'#',-3);
N     else int2lcd_mmm(t_ext[2],'#',0);
N	//int2lcdyx(u_necc,3,18,0);
N     }
N     
Nelse if(ind==iK_bat_sel)
Xelse if(a_ind . i==iK_bat_sel)
N	{
N	ptrs[0]=						" Батарея N1         ";
N     ptrs[1]=						" Батарея N2         ";
N     if(BAT_IS_ON[0]!=bisON)ptrs[0]=	" Батарея N2         ";
N	ptrs[0+NUMBAT]=				" Выход              ";
N	ptrs[1+NUMBAT]=				"                    ";
N	ptrs[2+NUMBAT]=				"                    ";
N
N	if((sub_ind-index_set)>2)index_set=sub_ind-2;
X	if((a_ind . s_i-a_ind . i_s)>2)a_ind . i_s=a_ind . s_i-2;
N	else if(sub_ind<index_set)index_set=sub_ind;
X	else if(a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	bgnd_par(" КАЛИБРОВКА БАТАРЕЙ ",ptrs[index_set],ptrs[index_set+1],ptrs[index_set+2]);
X	bgnd_par(" КАЛИБРОВКА БАТАРЕЙ ",ptrs[a_ind . i_s],ptrs[a_ind . i_s+1],ptrs[a_ind . i_s+2]);
N	pointer_set(1);
N	
N     }     
N
N
N
Nelse if(ind==iK_power_net3)
Xelse if(a_ind . i==iK_power_net3)
N	{
N     ptrs[0]=  		" Ввод ф.A    !В     ";
N	ptrs[1]=  		" Ввод ф.B    @В     ";
N	ptrs[2]=  		" Ввод ф.C    #В     ";
N     ptrs[3]=  	     " ПЭС  ф.A    &В     ";
N     ptrs[4]=  	     " ПЭС  ф.B    *В     ";
N     ptrs[5]=  	     " ПЭС  ф.C    (В     ";		            
N     ptrs[6]=" Выход              ";
N	ptrs[7]="                    ";
N	
N	if((sub_ind-index_set)>1)index_set=sub_ind-1;
X	if((a_ind . s_i-a_ind . i_s)>1)a_ind . i_s=a_ind . s_i-1;
N	else if(sub_ind<index_set)index_set=sub_ind;
X	else if(a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	bgnd_par( "      КАЛИБРОВКА    ",
N               "   СИЛОВЫХ ВВОДОВ   ",
N               ptrs[index_set],
X               ptrs[a_ind . i_s],
N               ptrs[index_set+1]);
X               ptrs[a_ind . i_s+1]);
N
N	pointer_set(2);	
N	int2lcd(Uvv_eb2[0],'!',0);
N	int2lcd(Uvv_eb2[1],'@',0);
N	int2lcd(Uvv_eb2[2],'#',0);
N	int2lcd(Upes_eb2[0],'&',0);
N	int2lcd(Upes_eb2[1],'*',0);
N	int2lcd(Upes_eb2[2],'(',0);
N	//int2lcdyx(net_buff_,3,10,0);
N	
N	//int2lcdyx(Kunet,3,16,0);
N     }
N
N
N			
Nif(ind==iDeb)
Xif(a_ind . i==iDeb)
N     {
N     if(sub_ind==0)
X     if(a_ind . s_i==0)
N     	{
N
N
N        bgnd_par("*0000*000000*       ",
N     	         "                    ",
N     	         "                    ",
N     	         "      ********      ");
N
N		int2lcdyx(SOFT_NUM,0,4,0);
X		int2lcdyx(1051,0,4,0);
N		long2lcdyx_mmm(SOFT_DATE,0,11,0);
X		long2lcdyx_mmm(21112UL,0,11,0);
N	
N		int2lcdyx(numOfForvardBps_minCnt,1,5,0);
N		int2lcdyx(numOfForvardBps_hourCnt,1,10,0);
N		int2lcdyx(numOfForvardBps,1,15,0);
N	
N		int2lcdyx(numOfForvardBps_minCnt,2,4,0);
N		int2lcdyx(numOfForvardBps_hourCnt,2,9,0);
N
N      
N
N     	}     
N
N    	else if(sub_ind==1) 
X    	else if(a_ind . s_i==1) 
N     	{
N     	bgnd_par("Б                   ",
N     	         "                    ",
N     	         "                    ",
N     	         "                    ");
N
N		//int2lcdyx(bAVG,0,0,0);
N		//int2lcdyx(LPC_CAN1->GSR,0,6,0);
N		//int2lcdyx((LPC_CAN1->GSR)>>16,0,16,0);
N		//int2lcdyx(avg,0,19,0);
N
N				//int2lcdyx((((LPC_CAN1->GSR)&(0xff000000))>>24),0,19,0);
N		//int2lcdyx((((LPC_CAN1->GSR)&(0x00ff0000))>>16),0,15,0);
N
N /*         int2lcdyx(bat[0]._Ubm,1,7,0); 	int2lcdyx(bat[0]._av,1,10,0);
N		int2lcdyx(bat[0]._dUbm,2,7,0);
N		int2lcdyx(bat[0]._cnt_as,3,7,0);
N		
N 
N		int2lcdyx(bat[1]._Ub,0,14,0);
N          int2lcdyx(bat[1]._Ubm,1,14,0);	int2lcdyx(bat[1]._av,1,17,0);
N		int2lcdyx(bat[1]._dUbm,2,14,0);
N		int2lcdyx(bat[1]._cnt_as,3,14,0);*/
N
N		int2lcdyx(sub_ind1+0,1,0,0);
X		int2lcdyx(a_ind . s_i1+0,1,0,0);
N		int2lcdyx(sub_ind1+1,2,0,0);
X		int2lcdyx(a_ind . s_i1+1,2,0,0);
N		int2lcdyx(sub_ind1+2,3,0,0);
X		int2lcdyx(a_ind . s_i1+2,3,0,0);
N		
N		
N/*		int2lcdyx(bps[sub_ind1  ]._cnt,1,2,0);
N		int2lcdyx(bps[sub_ind1+1]._cnt,2,2,0);
N		int2lcdyx(bps[sub_ind1+2]._cnt,3,2,0);*/		
N		
N	/*	int2lcdyx(bps[sub_ind1  ]._ist_blok_cnt,1,5,0);
N		int2lcdyx(bps[sub_ind1+1]._ist_blok_cnt,2,5,0);
N		int2lcdyx(bps[sub_ind1+2]._ist_blok_cnt,3,5,0);*/			
N		
N	/*	char2lcdhyx(bps[sub_ind1  ]._flags_tu,1,8);
N		char2lcdhyx(bps[sub_ind1+1]._flags_tu,2,8);
N		char2lcdhyx(bps[sub_ind1+2]._flags_tu,3,8);
N
N		int2lcdyx(bps[sub_ind1  ]._vol_u,1,12,0);
N		int2lcdyx(bps[sub_ind1+1]._vol_u,2,12,0);
N		int2lcdyx(bps[sub_ind1+2]._vol_u,3,12,0);		
N
N
N		char2lcdhyx(bps[sub_ind1]._flags_tm,1,15);
N		char2lcdhyx(bps[sub_ind1+1]._flags_tm,2,15);
N		char2lcdhyx(bps[sub_ind1+2]._flags_tm,3,15);	
N		*/
N
N	/*
N		char2lcdhyx(bps[sub_ind1]._rotor>>8,1,15);
N		char2lcdhyx(bps[sub_ind1+1]._rotor>>8,2,15);
N		char2lcdhyx(bps[sub_ind1+2]._rotor>>8,3,15);		
N		*/
N		
N
N
N
N 		}
N
N 
N
N    else if(sub_ind==2)
X    else if(a_ind . s_i==2)
N     	{
N     	bgnd_par(	"F                   ",
N     		    	"                    ",
N     		    	"                    ",
N     		    	"                    ");
N
N
N		int2lcdyx(uout_av,1,5,0);
N		int2lcdyx(USIGN,2,5,0); 
N
N		int2lcdyx(bSILENT,3,5,0);
N
N		
N		
N		int2lcdyx(U_OUT_KONTR_MAX,0,19,0);
N		int2lcdyx(load_U,1,19,0);
N		int2lcdyx(U_OUT_KONTR_MIN,2,19,0);
N		//int2lcdyx(U_OUT_KONTR_DELAY,3,19,0);
N		int2lcdyx(outVoltContrHndlCnt,3,19,0);
N
N		long2lcdhyx(0x12345678UL,1,14);
N//		long2lcdhyx(avar_stat,2,14);
N//		long2lcdhyx(avar_ind_stat,3,14);
N		}  
N
N	else if(sub_ind==3)
X	else if(a_ind . s_i==3)
N     	{
N     	bgnd_par("КЕ                  ",
N     	         "                    ",
N     	         "                   ^",
N     	         "                   &");
N
N/*	int2lcdyx(spc_stat,0,5,0);
N	int2lcdyx(__ee_spc_stat,0,9,0);
N	int2lcdyx(lc640_read_int(EE_SPC_STAT),0,13,0);
N
N	int2lcdyx(spc_bat,1,5,0);
N	int2lcdyx(__ee_spc_bat,1,9,0);
N	int2lcdyx(lc640_read_int(EE_SPC_BAT),1,13,0);
N
N	int2lcdyx(bat_u_old_cnt,0,19,0);
N	
N	
N	int2lcdyx(bat[0]._zar_cnt_ke,2,5,0);
N	int2lcdyx(lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),2,10,0);	
N	int2lcdyx(bat[0]._u_old[0],2,14,0);
N	int2lcd_mmm(bat[0]._Ib,'^',2);
N
N	int2lcdyx(bat[1]._zar_cnt_ke,3,5,0);
N	int2lcdyx(lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[1]),3,10,0);
N	int2lcdyx(bat[1]._Ub,3,14,0);
N	int2lcd_mmm(bat[1]._Ib,'&',2);	
N
N	int2lcdyx(spc_phase,1,15,0);
N	int2lcdyx(__ee_spc_phase,1,17,0);
N	int2lcdyx(lc640_read_int(EE_SPC_PHASE),1,19,0);	*/
N
N/*	int2lcdyx(speedChIsOn,0,4,0);
N	int2lcdyx(speedChTimeCnt,1,4,0);
N	int2lcdyx(speedChrgBlckStat,2,4,0);
N	int2lcdyx(speedChrgBlckSrc,3,4,0);
N
N	int2lcdyx(speedChrgBlckSrc,0,8,0);
N	int2lcdyx(speedChrgBlckLog,1,8,0); */
N	
N	
N		
N
N/*	    		int2lcdyx(adc_net_buff_cnt,0,4,0);
N
N		    	int2lcdyx((short)(main_power_buffer[0]>>12),0,19,0);
N			int2lcdyx((short)(main_power_buffer[1]>>12),1,19,0);
N			int2lcdyx((short)(main_power_buffer[2]>>12),2,19,0);
N			int2lcdyx((short)(main_power_buffer[3]>>12),3,19,0);
N
N		    	int2lcdyx((net_buff_),2,5,0); */
N
N
N		   
N		    
N
N
N/*		int2lcdyx(load_U,0,4,0);
N		int2lcdyx(load_I,1,4,0);
N		lcd_buffer[44]='a';
N		int2lcd_mmm((bat[0]._Ib)/10,'a',1);
N		lcd_buffer[64]='a';
N		int2lcd_mmm((bat[1]._Ib)/10,'a',1);
N
N 		int2lcdyx(u_necc,0,8,0);
N
N		
N		
N		lcd_buffer[14]='.';
N		lcd_buffer[34]='.';
N		int2lcdyx(Isumm,0,15,1);		
N		int2lcdyx(Isumm_,1,15,1);
N
N
N		int2lcdyx(cntrl_stat,0,19,0);
N		int2lcdyx(num_necc,1,19,0);
N		
N		
N		  
N//		int2lcdyx(cntrl_stat,0,15,0);
N		 
N		//int2lcdyx(cntrl_plazma,1,3,0);
N		//lcd_buffer[30]='a';
N		int2lcd_mmm(Ibmax,'a',0);
N		int2lcdyx(IZMAX,1,14,0);
N
N		lcd_buffer[65]='a';
N		int2lcd_mmm(bat[0]._Ib,'a',0);
N
N		lcd_buffer[70]='a';
N		int2lcd_mmm(bat[1]._Ib,'a',0); 
N
N		lcd_buffer[75]='a';
N		int2lcd_mmm(Ibmax,'a',0); 
N
N	//	int2lcdyx(IMAX,2,3,0);
N		
N		
N
N	//	int2lcdyx(IZMAX,3,19,0);
N
N		//int2lcdyx(num_necc_Imax,3,6,0);
N		//int2lcdyx(num_necc_Imin,3,12,0);
N
N
N //    	lcd_buffer[4]='a';            
N //    	int2lcd_mmm(Ibat,'a',1);   int2lcdyx(cntrl_stat,0,9,0);          int2lcdyx(hour_apv_cnt,0,13,0);                             char2lcdhyx(St_[0],0,19);  
N //    	int2lcdyx(Ubat,1,4,0);     int2lcdyx(main_apv_cnt,1,9,0);        int2lcdyx(lc640_read_int(bps1_AVAR_PTR),1,13,0);            char2lcdhyx(St_[1],1,19);
N //    	int2lcdyx(Us[0],2,4,0);  int2lcdyx(apv_cnt_1,2,9,0);           int2lcdyx(lc640_read_int(SRC1_AVAR_CNT),2,13,0);                                     int2lcdhyx(av_stat,2,19);
N //    	int2lcdyx(Us[1],3,4,0);  int2lcdyx(reset_apv_cnt,3,9,0);                                            int2lcdyx(plazma,3,19,0);
N     	//int2lcd(plazma,'(',0);
N
N     	//int2lcd(Us[0],'#',1);
N     	//int2lcd(Us[1],'$',1);
N     	//int2lcd(Is[0],'%',1);
N     	//int2lcd(Is[1],'^',1);
N    // 	int2lcd(bat[0]._Ub,'<',1);
N    // 	int2lcd_mmm(bat[0]._Ib,'>',2);
N //    	char2lcdhyx(St_[0],3,13);
N //    	char2lcdhyx(St_[1],3,19);
N //    	char2lcdhyx(St,3,5);  */
N		}
N
N   else if(sub_ind==4)
X   else if(a_ind . s_i==4)
N     	{
N     	bgnd_par(	"LB                  ",
N     		    	"                    ",
N     		    	"      !   #         ",
N     		    	"      @   $         ");
N
N
N     	int2lcdyx(NUMBAT_TELECORE,0,1,0);
N
N		
N		int2lcdyx(plazma_cntrl_stat,0,19,0);
N		
N//		int2lcdyx(Ubpsmax,1,3,0);
N		int2lcdyx(load_U,1,19,0);
N			
N///		int2lcdyx(lakb[0]._balanced_event_code/*_tot_bat_volt*/,2,2,0);
N//	   	int2lcdyx(lakb[1]._balanced_event_code/*_tot_bat_volt*/,3,2,0);
N		
N//	 	int2lcd_mmm(lakb[0]._ch_curr/10,'!',0);
N//		int2lcd_mmm(lakb[1]._ch_curr/10,'@',0);		
N		
N
N//		int2lcdyx(TELECORE2017_ULINECC,2,19,0);
N//	   	int2lcdyx(TELECORE2017_ULINECC_,3,19,0);
N
N		//int2lcdyx(lakb[0]._communicationFullErrorStat,2,19,0);
N	   	//int2lcdyx(lakb[1]._communicationFullErrorStat,3,19,0);
N
N		int2lcdyx(IMAX,0,13,0);
N		
N
N
N
N
N		//int2lcdyx(load_I,2,17,0); 
N		//int2lcdyx(Isumm,3,17,0);
N
N		//int2lcdyx(lakb[0]._s_o_c_percent,2,17,0); 
N		//int2lcdyx(lakb[1]._s_o_c_percent,3,17,0);
N
N
N		
N
N
N
N
N		
N		//int2lcdyx(u_necc,1,15,0);
N		
N
N		//int2lcdyx(plazma_ztt[0],1,13,0);lakb[i]._communicationFullErrorStat
N		//int2lcdyx(plazma_ztt[1],1,17,0);
N 		//int2lcdyx(zTTBatteryHndlCmnd/*zTTBatteryHndlPhase*/,0,5,0);
N
N		//int2lcdyx(zTTButteryCnter,0,7,0);
N
N		//int2lcdyx(numOfPacks,0,9,0);
N
N		//int2lcdyx(numOfTemperCells,0,12,0);
N		//t2lcdyx(cntrl_stat_blck_cnt,0,6,0);
N		 
N		//int2lcdyx(ch_cnt0,0,13,0);
N		//int2lcdyx(ch_cnt1,0,16,0);
N		//int2lcdyx(bat[0]._Ib,0,9,0);
N		//int2lcdyx(bat[1]._Ib,0,15,0);
N		}
N/*	else if(sub_ind==4)
N     	{
N     	bgnd_par(" АВАРИИ             ",
N     	         "                    ",
N     	         "                    ",
N     	         "                    ");
N
N		int2lcdyx(main_10Hz_cnt,0,7,0);
N		int2lcdyx(bat[0]._av,0,10,0);
N		int2lcdyx(bat[1]._av,0,12,0);
N		char2lcdhyx(rele_stat,0,19);
N
N 		long2lcdhyx(avar_stat,1,7);
N		long2lcdhyx(avar_stat_old,2,7);
N		long2lcdhyx(avar_ind_stat,3,7);
N
N		long2lcdhyx(avar_stat_new,2,19);
N		long2lcdhyx(avar_stat_offed,3,19);
N
N
N
N		}*/
N 
N    else if(sub_ind==5)
X    else if(a_ind . s_i==5)
N     	{
N     	bgnd_par(	"*                   ",
N     		    	"                    ",
N     		    	"                    ",
N     		    	"                    ");
N
N		int2lcdyx(adc_buff_[0],0,4,0);
N		int2lcdyx(adc_buff_[1],1,4,0);
N		int2lcdyx(adc_buff_[2],2,4,0);
N		int2lcdyx(adc_buff_[3],3,4,0);
N		int2lcdyx(adc_buff_[4],0,9,0);
N		int2lcdyx(adc_buff_[5],1,9,0);
N		int2lcdyx(adc_buff_[6],2,9,0);
N		int2lcdyx(adc_buff_[7],3,9,0);
N		int2lcdyx(adc_buff_[8],0,14,0);
N		int2lcdyx(adc_buff_[9],1,14,0);
N		int2lcdyx(adc_buff_[10],2,14,0);
N		int2lcdyx(adc_buff_[11],3,14,0);
N		int2lcdyx(adc_buff_[12],0,19,0);
N		int2lcdyx(adc_buff_[13],1,19,0);
N		int2lcdyx(adc_buff_[14],2,19,0);
N		int2lcdyx(adc_buff_[15],3,19,0);
N
N
N
N	/*	int2lcdyx(main_kb_cnt,0,3,0);
N		int2lcdyx(cntrl_stat,1,3,0);
N		int2lcdyx(ibat_ips,2,3,0);
N		int2lcdyx(ibat_ips_,3,3,0);
N
N		int2lcdyx(kb_cnt_1lev,0,19,0);
N		int2lcdyx(kb_cnt_2lev,1,19,0);
N		int2lcdyx(kb_full_ver,2,19,0);
N
N		int2lcdyx(Ibmax,0,16,0);
N		int2lcdyx(IZMAX_,1,16,0);
N		int2lcdyx(cntrl_hndl_plazma,2,16,0); */
N
N		
N    	}  		  		
N
N
N  else if(sub_ind==6)
X  else if(a_ind . s_i==6)
N     	{
N     	bgnd_par(	"6                   ",
N     		    	"    !     $         ",
N     		    	"    @     %         ",
N     		    	"            ^       ");
N#ifdef UKU_TELECORE2017     		    
S/*		int2lcd_mmm(bat[0]._Ib,'!',2);
S		int2lcd_mmm(bat[1]._Ib,'@',2);
S		int2lcd_mmm(bps[0]._Ii,'$',1);
S		int2lcd_mmm(bps[1]._Ii,'%',1);
S		int2lcd_mmm(bps[2]._Ii,'^',1); */
S
S		int2lcd_mmm(t_ext[0],'!',0);
S		int2lcd_mmm(t_ext[1],'@',0);
S		int2lcd_mmm(t_box_warm,'$',0);
S		int2lcd_mmm(t_box_vent,'%',0);
S		//int2lcdyx(load_I,3,7,0);
S		//int2lcdyx(t_box_vent,2,7,0);
S
S		int2lcdyx(warm_stat_k,1,19,0);
S		int2lcdyx(vent_stat_k,2,19,0);
S		
S
S		int2lcdyx(TELECORE2017_KLIMAT_WARM_ON_temp,3,3,0);
S		int2lcdyx(TELECORE2017_KLIMAT_WARM_ON,3,7,0);
S		int2lcdyx(TELECORE2017_KLIMAT_WARM_OFF,3,11,0);
S		int2lcdyx(TELECORE2017_INT_VENT_PWM,3,15,0);
S		int2lcdyx(TELECORE2017_EXT_VENT_PWM,3,19,0);
S		
S		
S		
S		//int2lcdyx(li_bat._Tb,3,3,0);
S		
S		
S
S
S		int2lcdyx(t_box_warm_on_cnt,1,17,0);
S		int2lcdyx(t_box_vent_on_cnt,2,17,0);
S//			//int2lcdyx(t_box_vent_on_cnt,0,3,0);
S	//int2lcdyx(t_box_warm_on_cnt,0,7,0);
S//		int2lcdyx(vent_stat_k,2,15,0);
S
S		
S		int2lcdyx(ND_EXT[0],0,9,0);
S		int2lcdyx(ND_EXT[1],0,13,0);
S		//int2lcdyx(TELECORE2017_KLIMAT_VENT_ON20,0,16,0);	 
S		int2lcdyx(lakb[0]._zar_percent,0,19,0);	 
N#endif
N    	}
N
N
N   else if(sub_ind==7)
X   else if(a_ind . s_i==7)
N     	{
N     	bgnd_par("7                   ",
N     		    "                    ",
N     		    "                    ",
N     		    "                    ");
N     		    
N		int2lcdyx(adc_buff_[sk_buff_TELECORE2015[0]],0,19,0);
N		int2lcdyx(adc_buff_[sk_buff_TELECORE2015[1]],1,19,0);
N		int2lcdyx(adc_buff_[sk_buff_TELECORE2015[2]],2,19,0);
N		int2lcdyx(adc_buff_[sk_buff_TELECORE2015[3]],3,19,0);
N		int2lcdyx(sk_cnt[0],0,14,0);
N		int2lcdyx(sk_cnt[1],1,14,0);
N		int2lcdyx(sk_cnt[2],2,14,0);
N		int2lcdyx(sk_cnt[3],3,14,0);
N		int2lcdyx(sk_stat[0],0,10,0);
N		int2lcdyx(sk_stat[1],1,10,0);
N		int2lcdyx(sk_stat[2],2,10,0);
N		int2lcdyx(sk_stat[3],3,10,0);
N
N    		}
N    else if(sub_ind==8)
X    else if(a_ind . s_i==8)
N     	{
N     	bgnd_par("                    ",
N     		    "                    ",
N     		    "                    ",
N     		    "                    ");
N     	int2lcdyx(ibt._T[0],0,2,0);
N		int2lcdyx(ibt._T[1],1,2,0);
N     	int2lcdyx(ibt._T[2],2,2,0);
N		int2lcdyx(ibt._T[3],3,2,0);
N		
N     	int2lcdyx(ibt._nd[0],0,4,0);
N		int2lcdyx(ibt._nd[1],1,4,0);
N     	int2lcdyx(ibt._nd[2],2,4,0);
N		int2lcdyx(ibt._nd[3],3,4,0);	    
N
N     	int2lcdyx(ibt._T_dispers[0],0,7,0);
N		int2lcdyx(ibt._T_dispers[1],1,7,0);
N     	int2lcdyx(ibt._T_dispers[2],2,7,0);
N		int2lcdyx(ibt._T_dispers[3],3,7,0);
N			    
N		int2lcdyx(ibt._avg1,0,19,0);
N		int2lcdyx(ibt._max_dispers_num,1,19,0);
N		int2lcdyx(t_box,3,19,0);
N     	}		     	
N
N    else if(sub_ind==10)
X    else if(a_ind . s_i==10)
N     	{
N     	bgnd_par("LB                  ",
N     		    "                    ",
N     		    "                    ",
N     		    "                    ");
N
N     	int2lcdyx(sub_ind1+1,0,3,0);
X     	int2lcdyx(a_ind . s_i1+1,0,3,0);
N
N		//int2lcdyx(lakb[sub_ind1]._bRS485ERR,3,16,0);
N		//int2lcdyx(lakb[sub_ind1]._rs485_cnt,3,19,0); 
N		
N     	}	
N
N    else if(sub_ind==11)
X    else if(a_ind . s_i==11)
N     	{
N     	bgnd_par("LB                  ",
N     		    "                    ",
N     		    "                    ",
N     		    "                    ");
N
N     	int2lcdyx(sub_ind,0,1,0);
X     	int2lcdyx(a_ind . s_i,0,1,0);
N		
N		int2lcdyx(u_necc,0,5,0);
N
N		int2lcdyx(load_U,0,11,0);
N//int2lcdyx(ccc_plazma[2],3,12,0);
N		//int2lcdyx(ccc_plazma[3],1,16,0);  
N		//int2lcdyx(ccc_plazma[4],2,16,0);  
N		//int2lcdyx(ccc_plazma[5],3,16,0); 
N
N		int2lcdyx(li_bat._canErrorCnt,2,5,0);
N		int2lcdyx(li_bat._canError,2,8,0);
N		int2lcdyx(li_bat._485ErrorCnt,3,5,0);
N		int2lcdyx(li_bat._485Error,3,8,0);
N			
N		/*int2lcdyx(lakb[sub_ind1]._cnt,0,6,0);
N
N		int2lcdyx(lakb[sub_ind1]._max_cell_temp,0,14,0);
N		int2lcdyx(lakb[sub_ind1]._min_cell_temp,0,19,0);
N
N		int2lcdyx(lakb[sub_ind1]._max_cell_volt,1,4,0);
N		int2lcdyx(lakb[sub_ind1]._min_cell_volt,1,9,0);
N		int2lcdyx(lakb[sub_ind1]._tot_bat_volt,1,14,0);
N		int2lcdyx(lakb[sub_ind1]._s_o_h,1,19,0);
N
N		int2lcdyx(lakb[sub_ind1]._ch_curr,2,4,0);
N		int2lcdyx(lakb[sub_ind1]._dsch_curr,2,9,0);
N		int2lcdyx(lakb[sub_ind1]._rat_cap,2,14,0);
N		int2lcdyx(lakb[sub_ind1]._s_o_c,2,19,0);
N
N		int2lcdyx(lakb[sub_ind1]._c_c_l_v,3,4,0);
N		int2lcdyx(lakb[sub_ind1]._r_b_t,3,9,0);
N		int2lcdyx(lakb[sub_ind1]._b_p_ser_num,3,14,0);
N		int2lcdyx(lakb[sub_ind1]._bRS485ERR,3,16,0);
N		 */
N		
N     	}	
N    else if(sub_ind==12)
X    else if(a_ind . s_i==12)
N     	{
N     	bgnd_par(	"ica                 ",
N     		    	"                    ",
N     		    	"                    ",
N     		    	"                    ");
N		int2lcdyx(ica_my_current,1,4,0);
N     	int2lcdyx(ica_your_current,2,4,0);
N     	int2lcdyx(ica_timer_cnt,1,14,0);
N
N
N		int2lcdyx(ica_plazma[0],0,15,0);
N     	int2lcdyx(ica_plazma[1],1,15,0);
N     	int2lcdyx(ica_plazma[2],2,15,0);
N     	int2lcdyx(ica_plazma[3],3,15,0);
N     	int2lcdyx(ica_plazma[4],0,19,0);
N		int2lcdyx(ica_plazma[5],1,19,0);
N     	int2lcdyx(ica_plazma[6],2,19,0);
N     	int2lcdyx(ica_plazma[7],3,19,0);
N
N 
N		int2lcdyx(ica_u_necc+50,0,10,0);
N		int2lcdyx(u_necc,1,10,0);
N
N		int2lcdyx(bps_U,2,10,0);
N
N
N     	//int2lcdyx(ica_plazma[8],3,15,0);
N     	//int2lcdyx(ica_plazma[9],3,19,0); */
N 
N		
N     	}	     			
N     }
N
N
N
N
N
N
N	
Nelse if(ind==iAvt_set_sel)
Xelse if(a_ind . i==iAvt_set_sel)
N	{
N	ptrs[0]=						" БПС N1             ";
N     ptrs[1]=						" БПС N2             ";
N     ptrs[2]=						" БПС N3             ";
N	ptrs[3]=						" БПС N4             ";
N     ptrs[4]=						" БПС N5             ";
N     ptrs[5]=						" БПС N6             ";
N	ptrs[6]=						" БПС N7             ";
N     ptrs[7]=						" БПС N8             ";
N     ptrs[8]=						" БПС N9             ";
N	ptrs[9]=						" БПС N10            ";
N     ptrs[10]=						" БПС N11            ";
N     ptrs[11]=						" БПС N12            ";               
N	ptrs[NUMIST]=					" Выход              ";
N	ptrs[1+NUMIST]=				"                    ";
N	ptrs[2+NUMIST]=				"                    ";
N
N
N	if((sub_ind-index_set)>1)index_set=sub_ind-1;
X	if((a_ind . s_i-a_ind . i_s)>1)a_ind . i_s=a_ind . s_i-1;
N	else if(sub_ind<index_set)index_set=sub_ind;
X	else if(a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	bgnd_par(				"УСТАНОВКА НАПРЯЖЕНИЯ",
N						" АВТОНОМНОЙ РАБОТЫ  ",
N						ptrs[index_set],
X						ptrs[a_ind . i_s],
N						ptrs[index_set+1]);
X						ptrs[a_ind . i_s+1]);
N	pointer_set(2);
N
N	}		 
N
Nelse if(ind==iAvt_set)
Xelse if(a_ind . i==iAvt_set)
N	{
N	ptrs[0]=" Uавтон =   $В      ";
N	if(bFL_)
N		{
N		ptrs[1]=" установите Uавтон  ";
N     	ptrs[2]="  нажатием љ или њ  ";
N     	}
N     else 
N     	{
N		ptrs[1]=" удерживайте ¤ для  ";
N     	ptrs[2]="    запоминания     ";     	
N     	}	
N
N     ptrs[3]=sm_exit;
N     ptrs[4]=sm_;
N     ptrs[5]=sm_;     	     	    
N	
N
N     if((sub_ind==0)||(sub_ind==1)||(sub_ind==2))index_set=0;
X     if((a_ind . s_i==0)||(a_ind . s_i==1)||(a_ind . s_i==2))a_ind . i_s=0;
N	else index_set=3;
X	else a_ind . i_s=3;
N	
N	bgnd_par("       БПС N!      ",ptrs[index_set],ptrs[index_set+1],ptrs[index_set+2]);
X	bgnd_par("       БПС N!      ",ptrs[a_ind . i_s],ptrs[a_ind . i_s+1],ptrs[a_ind . i_s+2]);
N
N	pointer_set(1);	
N	int2lcd(sub_ind1+1,'!',0);
X	int2lcd(a_ind . s_i1+1,'!',0);
N	int2lcd(U_AVT,'$',1);
N	 
N	
N     if(sub_ind==0)
X     if(a_ind . s_i==0)
N		{
N        mess_send(MESS2BPS_HNDL,PARAM_BPS_MASK_ON_OFF_AFTER_2SEC,(1<<sub_ind1),10);
X        mess_send(205,208,(1<<a_ind . s_i1),10);
N        mess_send(MESS2BAT_HNDL,PARAM_BAT_ALL_OFF_AFTER_2SEC,0,40);
X        mess_send(200,201,0,40);
N        mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
X        mess_send(190,191,U_AVT,10);
N	    mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
X	    mess_send(225,230,0,10);
N
N        }
N
N 	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
X 	if(mess_find( (215)) && (mess_data[0]==217) )
N		{
N		sub_ind=3;
X		a_ind . s_i=3;
N		show_mess(	"     Установка      ",
N	          		"    напряжения      ",
N	          		" автономной работы  ",
N	          		"    произведена     ",3000);
N		
N		}
N	//int2lcdyx(sub_ind,0,4,0);		      
N	 }
Nelse if(ind==iOut_volt_contr)
Xelse if(a_ind . i==iOut_volt_contr)
N	{
N	ptrs[0]=" Uвыхmax         !В ";
N    ptrs[1]=" Uвыхmin         @В ";
N    ptrs[2]=" Tздрж.ав.       #с.";     	
N    ptrs[3]=sm_exit;
N    ptrs[4]=sm_;
N    ptrs[5]=sm_;     	     	    
N	
N
N	if((sub_ind-index_set)>1)index_set=sub_ind-1;
X	if((a_ind . s_i-a_ind . i_s)>1)a_ind . i_s=a_ind . s_i-1;
N	else if(sub_ind<index_set)index_set=sub_ind;
X	else if(a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	
N	bgnd_par(	"КОНТРОЛЬ ВЫХОДНОГО ",
N				"    НАПРЯЖЕНИЯ     ",
N				ptrs[index_set],
X				ptrs[a_ind . i_s],
N				ptrs[index_set+1]);
X				ptrs[a_ind . i_s+1]);
N
N	pointer_set(2);	
N	int2lcd(U_OUT_KONTR_MAX,'!',1);
N	int2lcd(U_OUT_KONTR_MIN,'@',1);
N	int2lcd(U_OUT_KONTR_DELAY,'#',0);
N	}
Nelse if(ind==iDop_rele_set)
Xelse if(a_ind . i==iDop_rele_set)
N	{
N	if(DOP_RELE_FUNC==0)
N		{
N		ptrs[0]=	" Индикация          ";
N		ptrs[1]=	" ускоренного заряда ";
N		}
N	else /*if(DOP_RELE_FUNC==0)*/
N		{
N		ptrs[0]=	" Индикация          ";
N		ptrs[1]=	" разряженной батареи";
N		}
N	ptrs[2]=		" Выход              ";
N	ptrs[3]=		"                    ";
N
N
N	if((sub_ind-index_set)>1)index_set=sub_ind;
X	if((a_ind . s_i-a_ind . i_s)>1)a_ind . i_s=a_ind . s_i;
N	else if(sub_ind<index_set)index_set=sub_ind;
X	else if(a_ind . s_i<a_ind . i_s)a_ind . i_s=a_ind . s_i;
N	bgnd_par(			"ДОПОПЛНИТЕЛЬНОЕ РЕЛЕ",
N						"  ФУНКЦИОНАЛЬНОСТЬ  ",
N						ptrs[index_set],
X						ptrs[a_ind . i_s],
N						ptrs[index_set+1]);
X						ptrs[a_ind . i_s+1]);
N	pointer_set(2);
N
N	//int2lcdyx(sub_ind,0,6,0);
N	//int2lcdyx(index_set,0,9,0);
N	
N	}
N
Nelse if (ind==iIps_Curr_Avg_Set)
Xelse if (a_ind . i==iIps_Curr_Avg_Set)
N	{ 
N	if(ICA_EN==0)
N		{
N		ptrs[0]=		" Выключено          ";
N		simax=1;
N		}
N	else 
N		{
N		ptrs[0]=		" Включено           ";
N		if(ICA_CH==0)
N			{
N			ptrs[1]=	" КАНАЛ  MODBUS-RTU  ";
N			ptrs[2]=	" АДРЕС ВЕДОМОГО   ! ";
N			simax=3;
N			}
N		else
N			{
N			ptrs[1]=	" КАНАЛ   MODBUS-TCP ";
N			ptrs[2]=	" IP 00@.00#.00$.00% ";
N			ptrs[3]=	" АДРЕС ВЕДОМОГО   ^ ";
N			simax=4;
N			}
N		} 
N	ptrs[simax]=		" Выход              ";
N	
N	if(sub_ind<index_set) index_set=sub_ind;
X	if(a_ind . s_i<a_ind . i_s) a_ind . i_s=a_ind . s_i;
N	else if((sub_ind-index_set)>1) index_set=sub_ind-1;	
X	else if((a_ind . s_i-a_ind . i_s)>1) a_ind . i_s=a_ind . s_i-1;	
N	bgnd_par(	" ВЫРАВНИВАНИЕ ТОКОВ ",
N				"        ИПС         ",
N				ptrs[index_set],
X				ptrs[a_ind . i_s],
N				ptrs[index_set+1]);
X				ptrs[a_ind . i_s+1]);
N	
N	pointer_set(2);
N	int2lcd(ICA_MODBUS_ADDRESS,'!',0);
N	if((sub_ind==2)&&(sub_ind1==0)&&bFL2)sub_bgnd("   ",'@',-2);
X	if((a_ind . s_i==2)&&(a_ind . s_i1==0)&&bFL2)sub_bgnd("   ",'@',-2);
N	else int2lcd(ICA_MODBUS_TCP_IP1,'@',0);
N	if((sub_ind==2)&&(sub_ind1==1)&&bFL2)sub_bgnd("   ",'#',-2);
X	if((a_ind . s_i==2)&&(a_ind . s_i1==1)&&bFL2)sub_bgnd("   ",'#',-2);
N	else int2lcd(ICA_MODBUS_TCP_IP2,'#',0);
N	if((sub_ind==2)&&(sub_ind1==2)&&bFL2)sub_bgnd("   ",'$',-2);
X	if((a_ind . s_i==2)&&(a_ind . s_i1==2)&&bFL2)sub_bgnd("   ",'$',-2);
N	else int2lcd(ICA_MODBUS_TCP_IP3,'$',0);
N	if((sub_ind==2)&&(sub_ind1==3)&&bFL2)sub_bgnd("   ",'%',-2);
X	if((a_ind . s_i==2)&&(a_ind . s_i1==3)&&bFL2)sub_bgnd("   ",'%',-2);
N	else int2lcd(ICA_MODBUS_TCP_IP4,'%',0);
N	int2lcd(ICA_MODBUS_TCP_UNIT_ID,'^',0);	
N     
N 	} 
N
N/*
Nconst char sm7[]	={" Источник N2        "}; //
Nconst char sm8[]	={" Нагрузка           "}; //
Nconst char sm9[]	={" Сеть               "}; //
Nconst char sm10[]	={" Спецфункции        "}; // 
Nconst char sm11[]	={" Журнал аварий      "}; //
Nconst char sm12[]	=" Батарейный журнал  "}; //
Nconst cha		=" Паспорт            "}; //
N*/
N
N
N//char2lcdhyx(bat_rel_stat[0],0,10);
N//char2lcdhyx(bat_rel_stat[1],0,15);
N//int2lcdyx(u_necc,0,19,0);
N//int2lcdyx(cntrl_stat,0,5,0); 	   mess_cnt[i]
N
N//char2lcdhyx(bat_rel_stat[0],0,5);
N//char2lcdhyx(bat_rel_stat[1],0,10);
N//int2lcdyx(mess_cnt[1],0,2,0);
N//int2lcdyx(GET_REG(IOPIN1,21,1),0,5,0); 
N//int2lcdyx(samokalibr_cnt,0,10,0);
N//char2lcdhyx(rele_stat,0,19);
N//char2lcdhyx(mess_cnt[1],0,16); 
N
N//int2lcdyx(ad7705_res1,0,8,0);
N//int2lcdyx(ad7705_res2,0,16,0); 
N//	int2lcdyx(bat[0]._cnt_to_block,0,1,0);
N//	int2lcdyx(bat[1]._cnt_to_block,0,3,0);
N//	int2lcdyx(bat[0]._rel_stat,0,5,0);
N/*	int2lcdyx(ind,0,3,0); 
N	int2lcdyx(sub_ind,0,6,0);
N	int2lcdyx(index_set,0,9,0);
N	int2lcdyx(ptr_ind,0,14,0);
N	;*/
N/*int2lcdyx(ind,0,19,0);
Nint2lcdyx(retindsec,0,15,0);
Nint2lcdyx(retcnt,0,11,0);
Nint2lcdyx(retcntsec,0,7,0);	*/
N//int2lcdyx(bps[0]._vol_i,0,15,0);
N//int2lcdyx(cntrl_stat,0,19,0); 
N//int2lcdyx(bps[0]._Uin,0,4,0);
N}							    
N
N
N#define BUT0	16
N#define BUT1	17
N#define BUT2	18
N#define BUT3	19
N#define BUT4	20   
N#define BUT_MASK (1UL<<BUT0)|(1UL<<BUT1)|(1UL<<BUT2)|(1UL<<BUT3)|(1UL<<BUT4)
N
N#define BUT_ON 4
N#define BUT_ONL 20 
N
N#define butLUR_  101
N#define butU   253
N#define butU_  125
N#define butD   251
N#define butD_  123
N#define butL   247
N#define butL_  119
N#define butR   239
N#define butR_  111
N#define butE   254
N#define butE_  126
N#define butEL_  118
N#define butUD  249
N#define butUD_  121
N#define butLR   231
N#define butLR_   103
N#define butED_  122
N#define butDR_  107
N#define butDL_  115
N
N#define BUT_ON 4
N#define BUT_ONL 20 
N//-----------------------------------------------
Nvoid but_drv(void)
N{
Nchar i;
NLPC_GPIO1->FIODIR|=(1<<21);
X((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00020) )->FIODIR|=(1<<21);
NLPC_GPIO1->FIOPIN&=~(1<<21);
X((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00020) )->FIOPIN&=~(1<<21);
NLPC_GPIO1->FIODIR&=~((1<<22)|(1<<23)|(1<<24)|(1<<25)|(1<<26));
X((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00020) )->FIODIR&=~((1<<22)|(1<<23)|(1<<24)|(1<<25)|(1<<26));
NLPC_PINCON->PINMODE3&=~((1<<12)|(1<<13)|(1<<14)|(1<<15)|(1<<16)|(1<<17)|(1<<18)|(1<<19)|(1<<20)|(1<<21));
X((LPC_PINCON_TypeDef *) ((0x40000000UL) + 0x2C000) )->PINMODE3&=~((1<<12)|(1<<13)|(1<<14)|(1<<15)|(1<<16)|(1<<17)|(1<<18)|(1<<19)|(1<<20)|(1<<21));
N
NLPC_GPIO2->FIODIR|=(1<<8);
X((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00040) )->FIODIR|=(1<<8);
NLPC_GPIO2->FIOPIN&=~(1<<8);
X((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00040) )->FIOPIN&=~(1<<8);
Nfor(i=0;i<200;i++)
N{
N__nop();
N__nop();
N__nop();
N__nop();
N__nop();
N__nop();
N__nop();
N__nop();
N}
N
N			LPC_GPIO2->FIODIR|=(1<<8);
X			((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00040) )->FIODIR|=(1<<8);
N			LPC_GPIO2->FIOPIN|=(1<<8);
X			((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00040) )->FIOPIN|=(1<<8);
N
Nbut_n=((LPC_GPIO1->FIOPIN|(~((1<<22)|(1<<23)|(1<<24)|(1<<25)|(1<<26))))>>22)/*&0x0000001f*/;
Xbut_n=((((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00020) )->FIOPIN|(~((1<<22)|(1<<23)|(1<<24)|(1<<25)|(1<<26))))>>22) ;
N
N
N
Nif((but_n==1023UL)||(but_n!=but_s))
N 	{
N	speed=0;
N 
N   	if (((but0_cnt>=BUT_ON)||(but1_cnt!=0))&&(!l_but))
X   	if (((but0_cnt>=4)||(but1_cnt!=0))&&(!l_but))
N  		{
N   	     n_but=1;
N          but=but_s;
N
N          }
N   	if (but1_cnt>=but_onL_temp)
N  		{
N   	     n_but=1;
N 
N          but=but_s&0x7f;
N          }
N    	l_but=0;
N   	but_onL_temp=BUT_ONL;
X   	but_onL_temp=20;
N    	but0_cnt=0;
N  	but1_cnt=0;          
N     goto but_drv_out;
N  	}
Nelse if(but_n==but_s)
N 	{
N  	but0_cnt++;
N  	if(but0_cnt>=BUT_ON)
X  	if(but0_cnt>=4)
N  		{
N   		but0_cnt=0;
N   		but1_cnt++;
N   		if(but1_cnt>=but_onL_temp)
N   			{              
N    			but=but_s&0x7f;
N    			but1_cnt=0;
N    			n_but=1;
N    			     
N    			l_but=1;
N			if(speed)
N				{
N    				but_onL_temp=but_onL_temp>>1;
N        			if(but_onL_temp<=2) but_onL_temp=2;
N				}    
N   			}
N  		}
N 	}
Nbut_drv_out: 
Nbut_s=but_n; 
N   
N}
N
N//-----------------------------------------------
Nvoid but_an(void)
N{
Nsigned short temp_SS;
N//signed short /*deep,i,cap,*/ptr;
N//char av_head[4];
Nif(!n_but)return;
N/*else  					
N	{
N	plazma_but_an++;
N	goto but_an_end;
N	}*/
Nav_beep=0x0000;
Nav_rele=0x0000;
Nmnemo_cnt=MNEMO_TIME;
Nips_bat_av_stat=0;
N//bat_ips._av&=~1;
N
Nif((main_1Hz_cnt<10)&&((but==butU)||(but==butU_)||(but==butD)||(but==butD_)||(but==butL)||(but==butL_)||(but==butR)||(but==butR_)||(but==butE)||(but==butE_)))
Xif((main_1Hz_cnt<10)&&((but==253)||(but==125)||(but==251)||(but==123)||(but==247)||(but==119)||(but==239)||(but==111)||(but==254)||(but==126)))
N	{
N	__ee_spc_stat=spcOFF;
N	spc_stat=spcOFF;
N	}
Nif(but==butUD)
Xif(but==249)
N     {
N     if(ind!=iDeb)
X     if(a_ind . i!=iDeb)
N          {
N		c_ind=a_ind;
N		tree_up(iDeb,5,0,0);
N		
N          }
N     else 
N          {
N		tree_down(0,0);
N          }
N		
N		     
N     }
Nelse if(but==butLR)
Xelse if(but==231)
N	{
N	bSILENT=1;
N	beep_init(0x00000000,'S');
N	}
Nelse if(but==butUD_)
Xelse if(but==121)
N     {
N	//avar_bat_as_hndl(0,1);
N	}
N
Nelse if(but==butED_)
Xelse if(but==122)
N     {
N	if(!bCAN_OFF)bCAN_OFF=1;
N	else bCAN_OFF=0;
N	speed=0;
N	}
N
Nelse if(ind==iDeb)
Xelse if(a_ind . i==iDeb)
N	{
N	if(but==butR)
X	if(but==239)
N		{
N		sub_ind++;
X		a_ind . s_i++;
N		index_set=0;
X		a_ind . i_s=0;
N		gran_ring_char(&sub_ind,0,12);
X		gran_ring_char(&a_ind . s_i,0,12);
N		}
N	else if(but==butL)
X	else if(but==247)
N		{
N		sub_ind--;
X		a_ind . s_i--;
N		index_set=0;
X		a_ind . i_s=0;
N		gran_ring_char(&sub_ind,0,12);
X		gran_ring_char(&a_ind . s_i,0,12);
N		}
N		
N	else if(sub_ind==1)
X	else if(a_ind . s_i==1)
N		{
N		if(but==butU)
X		if(but==253)
N	     	{
N	     	sub_ind1--;
X	     	a_ind . s_i1--;
N	     	gran_char(&sub_ind1,0,30);
X	     	gran_char(&a_ind . s_i1,0,30);
N	     	}
N		if(but==butD)
X		if(but==251)
N	     	{
N	     	sub_ind1++;
X	     	a_ind . s_i1++;
N	     	gran_char(&sub_ind1,0,30);
X	     	gran_char(&a_ind . s_i1,0,30);
N	     	}
N	     
N		if(but==butE)
X		if(but==254)
N	     	{
N	     	/*SET_REG(C2GSR,3,24,8);
N			C2MOD=0;
N			 bOUT_FREE2=1;*/
N
N			 // CAN interface 1, use IRQVec7, at 125kbit
N//can2_init(7,8,CANBitrate250k_60MHz);
N
N// Receive message with ID 102h on CAN 1
N//FullCAN_SetFilter(2,0x18e);
N			 }
N
N		if(but==butE)
X		if(but==254)
N	     	{
N			//lc640_write_int(EE_BAT1_ZAR_CNT,10);
N			ind_pointer=0;
N			ind=(i_enum)0;
X			a_ind . i=(i_enum)0;
N			sub_ind=0;
X			a_ind . s_i=0;
N			sub_ind1=0;
X			a_ind . s_i1=0;
N			sub_ind2=0;
X			a_ind . s_i2=0;
N			index_set=0;
X			a_ind . i_s=0;
N			}
N	     
N			
N		} 
N
N	 else if(sub_ind==5)
X	 else if(a_ind . s_i==5)
N	 	{
N		if(but==butE_)	numOfForvardBps_init();
X		if(but==126)	numOfForvardBps_init();
N		}
N				
N	 else if(sub_ind==5)
X	 else if(a_ind . s_i==5)
N	 	{
N		if(but==butE_)
X		if(but==126)
N		{
N		//can1_init(BITRATE62_5K6_25MHZ);
N		//FullCAN_SetFilter(0,0x18e);
N		LPC_CAN1->MOD&=~(1<<0);
X		((LPC_CAN_TypeDef *) ((0x40000000UL) + 0x44000) )->MOD&=~(1<<0);
N		}
N		}
N
N	else if(sub_ind==1)
X	else if(a_ind . s_i==1)
N		{
N		if(but==butU)
X		if(but==253)
N	     	{
N	     	sub_ind1--;
X	     	a_ind . s_i1--;
N	     	gran_char(&sub_ind1,0,1);
X	     	gran_char(&a_ind . s_i1,0,1);
N	     	}
N		if(but==butD)
X		if(but==251)
N	     	{
N	     	sub_ind1++;
X	     	a_ind . s_i1++;
N	     	gran_char(&sub_ind1,0,1);
X	     	gran_char(&a_ind . s_i1,0,1);
N	     	}
N		}		
N		
N		
N			
N     else if(but==butU)
X     else if(but==253)
N	     {
N	     index_set--;
X	     a_ind . i_s--;
N	     gran_char(&index_set,0,4);
X	     gran_char(&a_ind . i_s,0,4);
N	     //lc640_write_int(ptr_ki_src[0],lc640_read_int(ptr_ki_src[0])+10);
N	     }	
N     else if(but==butD)
X     else if(but==251)
N	     {
N	     index_set++;
X	     a_ind . i_s++;
N	     gran_char(&index_set,0,4); 
X	     gran_char(&a_ind . i_s,0,4); 
N	     //lc640_write_int(ptr_ki_src[0],lc640_read_int(ptr_ki_src[0])-10);
N	     }	
N     else if(but==butE)
X     else if(but==254)
N         	{
N          //a=b[--ptr_ind];
N          //can1_out(1,2,3,4,5,6,7,8);
N          }   
N          
N     else if(but==butE_)
X     else if(but==126)
N         	{
N          //a=b[--ptr_ind];
N//          can1_out_adr(TXBUFF,3);
N          }                      				
N	}
N
Nelse if(ind==iMn)
Xelse if(a_ind . i==iMn)
N	{
N	if(but==butD)
X	if(but==251)
N		{
N		sub_ind++;
X		a_ind . s_i++;
N		gran_char(&sub_ind,0,8);
X		gran_char(&a_ind . s_i,0,8);
N		}
N		
N	else if(but==butU)
X	else if(but==253)
N		{
N		sub_ind--;
X		a_ind . s_i--;
N		gran_char(&sub_ind,0,8);
X		gran_char(&a_ind . s_i,0,8);
N		}	
N
N	else if(but==butR)
X	else if(but==239)
N		{
N		//ind=iMn;
N		sub_ind=0;
X		a_ind . s_i=0;
N
N		}
N	else if(but==butL)
X	else if(but==247)
N		{
N		//ind=iMn;
N		sub_ind=0;
X		a_ind . s_i=0;
N
N		}
N	else if(but==butD_)
X	else if(but==123)
N		{
N		sub_ind=0;
X		a_ind . s_i=0;
N		}
N
N	else if(but==butLR_)
X	else if(but==103)
N		{
N		if(klbr_en)klbr_en=0;
N		else klbr_en=1;
N		}
N				
N	else if(but==butE)
X	else if(but==254)
N		{
N		if(sub_ind==0) 
X		if(a_ind . s_i==0) 
N			{
N			}
N		else if(sub_ind==1)
X		else if(a_ind . s_i==1)
N			{
N			tree_up(iSet_T,0,0,0);
N			//tree_up(iSet_T_ret,0,0,0);
N			//ret_ind(20,-1);
N			}
N		else if(sub_ind==2)
X		else if(a_ind . s_i==2)
N			{
N			tree_up(iInterf_kontr,0,0,0);
N			}
N		else if(sub_ind==3)
X		else if(a_ind . s_i==3)
N			{
N			tree_up(iOptr_kontr,0,0,0);
N			}
N
N		else if(sub_ind==4)
X		else if(a_ind . s_i==4)
N			{
N			tree_up(iAir_sensor_kontr,0,0,0);
N			}
N		else if(sub_ind==5)
X		else if(a_ind . s_i==5)
N			{
N			tree_up(iWater_sensor_kontr,0,0,0);
N			}
N		else if(sub_ind==6)
X		else if(a_ind . s_i==6)
N			{
N			tree_up(iProbesms,0,0,0);
N			}
N		else if(sub_ind==7)
X		else if(a_ind . s_i==7)
N			{
N			tree_up(iPowerdown,0,0,0);
N			}
N		else if(sub_ind==8)
X		else if(a_ind . s_i==8)
N			{
N			tree_up(iDefset,0,0,0);
N			ret_ind(20,0);
N			}
N
N 		}
N
N    }
N
Nelse if(ind==iInterf_kontr)
Xelse if(a_ind . i==iInterf_kontr)
N	{
N	if (but==butE)
X	if (but==254)
N	    {
N		tree_up(iInterf_kontr_ret,0,0,0);
W "main.c" 3320 14 integer conversion resulted in a change of sign
N		ret_ind(10,-1);
N	    }
N	}
N
Nelse if(ind==iOptr_kontr)
Xelse if(a_ind . i==iOptr_kontr)
N	{
N	ret(1000);
N	if (but==butU)
X	if (but==253)
N		{      
N		sub_ind--;
X		a_ind . s_i--;
N		gran_char(&sub_ind,0,3);
X		gran_char(&a_ind . s_i,0,3);
N		}
N		
N	else if (but==butD)
X	else if (but==251)
N		{
N		sub_ind++;
X		a_ind . s_i++;
N		gran_char(&sub_ind,0,3);
X		gran_char(&a_ind . s_i,0,3);
N		}
N	else if(sub_ind==0)
X	else if(a_ind . s_i==0)
N	     {
N	     if(optr_stat[2]==osOFF)optr_stat[2]=osON;
N		 else optr_stat[2]=osOFF; 
N	     }
N	else if(sub_ind==1)
X	else if(a_ind . s_i==1)
N	     {
N	     if(optr_stat[1]==osOFF)optr_stat[1]=osON;
N		 else optr_stat[1]=osOFF; 
N	     }
N	else if(sub_ind==2)
X	else if(a_ind . s_i==2)
N	     {
N	     if(optr_stat[0]==osOFF)optr_stat[0]=osON;
N		 else optr_stat[0]=osOFF; 
N	     }
N	else if((sub_ind==3)&&(but==butE))
X	else if((a_ind . s_i==3)&&(but==254))
N	     {
N	     tree_down(0,0);
N	     ret(0);
N	     }
N	}
N
N
Nelse if(ind==iWater_sensor_kontr)
Xelse if(a_ind . i==iWater_sensor_kontr)
N	{
N	if (but==butE)
X	if (but==254)
N	    {
N		tree_up(iWater_sensor_kontr_ret,0,0,0);
W "main.c" 3366 14 integer conversion resulted in a change of sign
N		ret_ind(10,-1);
N	    }
N	}
N
Nelse if(ind==iAir_sensor_kontr)
Xelse if(a_ind . i==iAir_sensor_kontr)
N	{
N	if (but==butE)
X	if (but==254)
N	    {
N		tree_up(iAir_sensor_kontr_ret,0,0,0);
W "main.c" 3375 14 integer conversion resulted in a change of sign
N		ret_ind(10,-1);
N	    }
N	}
Nelse if(ind==iProbesms)
Xelse if(a_ind . i==iProbesms)
N	{
N	if (but==butE) tree_down(0,0);
X	if (but==254) tree_down(0,0);
N    }
Nelse if(ind==iPowerdown)
Xelse if(a_ind . i==iPowerdown)
N	{
N	if (but==butE)
X	if (but==254)
N	    {
N		tree_up(iPowerdown_ret,0,0,0);
W "main.c" 3387 14 integer conversion resulted in a change of sign
N		ret_ind(20,-1);
N	    }
N	}
N
Nelse if(ind==iSet_T)
Xelse if(a_ind . i==iSet_T)
N	{
N	signed char temp;
N	if((but==butR)&&(sub_ind>=0)&&(sub_ind<=5))
X	if((but==239)&&(a_ind . s_i>=0)&&(a_ind . s_i<=5))
N		{
N		sub_ind++;
X		a_ind . s_i++;
N		gran_char(&sub_ind,0,5);
X		gran_char(&a_ind . s_i,0,5);
N		}
N	else if((but==butL)&&(sub_ind>=0)&&(sub_ind<=5))
X	else if((but==247)&&(a_ind . s_i>=0)&&(a_ind . s_i<=5))
N		{
N		sub_ind--;
X		a_ind . s_i--;
N		gran_char(&sub_ind,0,5);
X		gran_char(&a_ind . s_i,0,5);
N		}
N	else if(but==butE)
X	else if(but==254)
N		{
N		tree_up(iSet_T_ret,0,0,0);
W "main.c" 3407 14 integer conversion resulted in a change of sign
N		ret_ind(10,-1);
N		//tree_down(0,0);
N		}
N	else if(but==butLR_)
X	else if(but==103)
N		{
N		if((sub_ind>=0)&&(sub_ind<=5))sub_ind=10;
X		if((a_ind . s_i>=0)&&(a_ind . s_i<=5))a_ind . s_i=10;
N		else sub_ind=0;
X		else a_ind . s_i=0;
N		speed=0;
N		}			
N	else if(sub_ind==0)
X	else if(a_ind . s_i==0)
N	     {			    
N	     temp=LPC_RTC->HOUR;
X	     temp=((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->HOUR;
N	     if((but==butU)||(but==butU_))
X	     if((but==253)||(but==125))
N	          {
N	          temp++;
N	          gran_ring_char(&temp,0,23);
N	          LPC_RTC->HOUR=temp;
X	          ((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->HOUR=temp;
N	          }
N          else if((but==butD)||(but==butD_))
X          else if((but==251)||(but==123))
N	          {
N	          temp--;
N	          gran_ring_char(&temp,0,23);
N	          LPC_RTC->HOUR=temp;
X	          ((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->HOUR=temp;
N	          }	
N	     speed=1;               
N	     }
N     else if(sub_ind==1)
X     else if(a_ind . s_i==1)
N	     {
N	     temp=LPC_RTC->MIN;
X	     temp=((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->MIN;
N	     if((but==butU)||(but==butU_))
X	     if((but==253)||(but==125))
N	          {
N	          temp++;
N	          gran_ring_char(&temp,0,59);
N	          LPC_RTC->MIN=temp;
X	          ((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->MIN=temp;
N	          }
N          else if((but==butD)||(but==butD_))
X          else if((but==251)||(but==123))
N	          {
N	          temp--;
N	          gran_ring_char(&temp,0,59);
N	          LPC_RTC->MIN=temp;
X	          ((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->MIN=temp;
N	          }	
N	     speed=1;               
N	     }
N /*    else if(sub_ind==2)
N	     {				  
N	     temp=LPC_RTC->SEC;
N	     if((but==butU)||(but==butU_))
N	          {
N	          temp=0;
N	          gran_ring_char(&temp,0,59);
N	          LPC_RTC->SEC=temp;
N	          }
N          else if((but==butD)||(but==butD_))
N	          {
N	          temp=0;
N	          gran_ring_char(&temp,0,59);
N	          LPC_RTC->SEC=temp;
N	          }	
N	     speed=1;               
N	     } */
N
N     else if(sub_ind==2)
X     else if(a_ind . s_i==2)
N	     {
N	     temp=LPC_RTC->DOM;
X	     temp=((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->DOM;
N	     if((but==butU)||(but==butU_))
X	     if((but==253)||(but==125))
N	          {
N	          temp++;
N	          gran_ring_char(&temp,1,31);
N	          LPC_RTC->DOM=temp;
X	          ((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->DOM=temp;
N	          }
N          else if((but==butD)||(but==butD_))
X          else if((but==251)||(but==123))
N	          {
N	          temp--;
N	          gran_ring_char(&temp,1,31);
N	          LPC_RTC->DOM=temp;
X	          ((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->DOM=temp;
N	          }	
N	     speed=1;               
N	     }
N     else if(sub_ind==3)
X     else if(a_ind . s_i==3)
N	     {
N	     temp=LPC_RTC->MONTH;
X	     temp=((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->MONTH;
N	     if((but==butU)||(but==butU_))
X	     if((but==253)||(but==125))
N	          {
N	          temp++;
N	          gran_ring_char(&temp,1,12);
N	          LPC_RTC->MONTH=temp;
X	          ((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->MONTH=temp;
N	          }
N          else if((but==butD)||(but==butD_))
X          else if((but==251)||(but==123))
N	          {
N	          temp--;
N	          gran_ring_char(&temp,1,12);
N	          LPC_RTC->MONTH=temp;
X	          ((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->MONTH=temp;
N	          }	
N	     speed=1;               
N	     }	  
N     else if(sub_ind==4)
X     else if(a_ind . s_i==4)
N	     {
N	     temp=LPC_RTC->YEAR;
X	     temp=((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->YEAR;
N	     if((but==butU)||(but==butU_))
X	     if((but==253)||(but==125))
N	          {
N	          temp++;
N	          gran_ring_char(&temp,0,99);
N	          LPC_RTC->YEAR=temp;
X	          ((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->YEAR=temp;
N	          }
N          else if((but==butD)||(but==butD_))
X          else if((but==251)||(but==123))
N	          {
N	          temp--;
N	          gran_ring_char(&temp,0,99);
N	          LPC_RTC->YEAR=temp;
X	          ((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->YEAR=temp;
N	          }	
N	     speed=1;               
N	     }		 
N	else if(sub_ind==5)
X	else if(a_ind . s_i==5)
N	     {
N	     temp=LPC_RTC->DOW;
X	     temp=((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->DOW;
N	     if((but==butU)||(but==butU_))
X	     if((but==253)||(but==125))
N	          {
N	          temp++;
N	          gran_ring_char(&temp,0,6);
N	          LPC_RTC->DOW=temp;
X	          ((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->DOW=temp;
N	          }
N          else if((but==butD)||(but==butD_))
X          else if((but==251)||(but==123))
N	          {
N	          temp--;
N	          gran_ring_char(&temp,0,6);
N	          LPC_RTC->DOW=temp;
X	          ((LPC_RTC_TypeDef *) ((0x40000000UL) + 0x24000) )->DOW=temp;
N	          }	
N	     speed=1;               
N	     }	       
N	}  
N
N    
N
N
N
N
N
N
Nelse if(ind==iTst_bps)
Xelse if(a_ind . i==iTst_bps)
N	{
N	ret(1000);
N	if(but==butD)
X	if(but==251)
N		{
N		sub_ind++;
X		a_ind . s_i++;
N		gran_char(&sub_ind,0,3);
X		gran_char(&a_ind . s_i,0,3);
N		tst_state[5]=tst1;
N		tst_state[6]=tstOFF;
N		
N		if(sub_ind==2)
X		if(a_ind . s_i==2)
N			{
N			sub_ind=3;
X			a_ind . s_i=3;
N			//index_set=2;
N			}
N
N		}
N
N	else if(but==butU)
X	else if(but==253)
N		{
N		sub_ind--;
X		a_ind . s_i--;
N		gran_char(&sub_ind,0,3);
X		gran_char(&a_ind . s_i,0,3);
N		tst_state[5]=tst1;
N		tst_state[6]=tstOFF;
N		
N		if(sub_ind==2)
X		if(a_ind . s_i==2)
N			{
N			sub_ind=1;
X			a_ind . s_i=1;
N			//index_set=2;
N			}
N		}
N
N	else if(sub_ind==0)
X	else if(a_ind . s_i==0)
N		{
N		if(but==butR)
X		if(but==239)
N			{
N			if(tst_state[5]==tstOFF)tst_state[5]=tst1;
N			//else if(tst_state[5]==tst1)tst_state[5]=tst2;
N			else tst_state[5]=tstOFF;
N			}
N		else if(but==butL)
X		else if(but==247)
N			{
N			if(tst_state[5]==tstOFF)tst_state[5]=tst1;
N			//else if(tst_state[5]==tst1)tst_state[5]=tstOFF;
N			else tst_state[5]=tstOFF;
N			}
N		}
N	else if(sub_ind==1)
X	else if(a_ind . s_i==1)
N		{
N		if((but==butE)||(but==butR))
X		if((but==254)||(but==239))
N			{
N			if(tst_state[6]==tstOFF) tst_state[6]=tst1;
N			//else if(tst_state[6]==tst1) tst_state[6]=tst2;
N			else tst_state[6]=tstOFF;
N			}
N		else if(but==butL)
X		else if(but==247)
N			{
N			if(tst_state[6]==tstOFF) tst_state[6]=tst1;
N			//else if(tst_state[6]==tstOFF) tst_state[6]=tst2;
N			else tst_state[6]=tstOFF;
N			}
N		}		
N		
N	else if(sub_ind==3)
X	else if(a_ind . s_i==3)
N		{
N		if(but==butE)
X		if(but==254)
N			{
N			tree_down(0,0);
N			ret(0);
N			}
N		}	
N	}
N
Nelse if(ind==iKlimat)
Xelse if(a_ind . i==iKlimat)
N	{
N	ret(1000);
N	if(but==butD)
X	if(but==251)
N		{
N		sub_ind++;
X		a_ind . s_i++;
N		gran_char(&sub_ind,0,7);
X		gran_char(&a_ind . s_i,0,7);
N	
N		}
N
N	else if(but==butU)
X	else if(but==253)
N		{
N		sub_ind--;
X		a_ind . s_i--;
N		gran_char(&sub_ind,0,7);
X		gran_char(&a_ind . s_i,0,7);
N		
N		}
N	else if(sub_ind==0)
X	else if(a_ind . s_i==0)
N	     {
N	     if(but==butR)TBOXMAX++;
X	     if(but==239)TBOXMAX++;
N	     else if(but==butR_)TBOXMAX+=2;
X	     else if(but==111)TBOXMAX+=2;
N	     else if(but==butL)TBOXMAX--;
X	     else if(but==247)TBOXMAX--;
N	     else if(but==butL_)TBOXMAX-=2;
X	     else if(but==119)TBOXMAX-=2;
N	     gran(&TBOXMAX,50,80);
N	     lc640_write_int(EE_TBOXMAX,TBOXMAX);
X	     lc640_write_int(0x10+100+92,TBOXMAX);
N	     speed=1;
N	     }
N
N	else if(sub_ind==1)
X	else if(a_ind . s_i==1)
N	     {
N	     if(but==butR)TBOXVENTMAX++;
X	     if(but==239)TBOXVENTMAX++;
N	     else if(but==butR_)TBOXVENTMAX+=2;
X	     else if(but==111)TBOXVENTMAX+=2;
N	     else if(but==butL)TBOXVENTMAX--;
X	     else if(but==247)TBOXVENTMAX--;
N	     else if(but==butL_)TBOXVENTMAX-=2;
X	     else if(but==119)TBOXVENTMAX-=2;
N	     gran(&TBOXVENTMAX,49,81);
N	     lc640_write_int(EE_TBOXVENTMAX,TBOXVENTMAX);
X	     lc640_write_int(0x10+100+96,TBOXVENTMAX);
N	     speed=1;
N	     }
N
N	else if(sub_ind==2)
X	else if(a_ind . s_i==2)
N	     {
N	     if(but==butR)TBOXREG++;
X	     if(but==239)TBOXREG++;
N	     else if(but==butR_)TBOXREG+=2;
X	     else if(but==111)TBOXREG+=2;
N	     else if(but==butL)TBOXREG--;
X	     else if(but==247)TBOXREG--;
N	     else if(but==butL_)TBOXREG-=2;
X	     else if(but==119)TBOXREG-=2;
N	     gran(&TBOXREG,5,30);
N	     lc640_write_int(EE_TBOXREG,TBOXREG);
X	     lc640_write_int(0x10+100+94,TBOXREG);
N	     speed=1;
N	     }
N
N	else if(sub_ind==3)
X	else if(a_ind . s_i==3)
N	     {
N	     if(but==butR)TLOADDISABLE++;
X	     if(but==239)TLOADDISABLE++;
N	     else if(but==butR_)TLOADDISABLE+=2;
X	     else if(but==111)TLOADDISABLE+=2;
N	     else if(but==butL)TLOADDISABLE--;
X	     else if(but==247)TLOADDISABLE--;
N	     else if(but==butL_)TLOADDISABLE-=2;
X	     else if(but==119)TLOADDISABLE-=2;
N	     gran(&TLOADDISABLE,49,81);
N	     lc640_write_int(EE_TLOADDISABLE,TLOADDISABLE);
X	     lc640_write_int(0x10+100+98,TLOADDISABLE);
N	     speed=1;
N	     }
N
N	else if(sub_ind==4)
X	else if(a_ind . s_i==4)
N	     {
N	     if(but==butR)TLOADENABLE++;
X	     if(but==239)TLOADENABLE++;
N	     else if(but==butR_)TLOADENABLE+=2;
X	     else if(but==111)TLOADENABLE+=2;
N	     else if(but==butL)TLOADENABLE--;
X	     else if(but==247)TLOADENABLE--;
N	     else if(but==butL_)TLOADENABLE-=2;
X	     else if(but==119)TLOADENABLE-=2;
N	     gran(&TLOADENABLE,44,TLOADDISABLE-5);
N	     lc640_write_int(EE_TLOADENABLE,TLOADENABLE);
X	     lc640_write_int(0x10+100+100,TLOADENABLE);
N	     speed=1;
N	     }
N
N	else if(sub_ind==5)
X	else if(a_ind . s_i==5)
N	     {
N	     if(but==butR)TBATDISABLE++;
X	     if(but==239)TBATDISABLE++;
N	     else if(but==butR_)TBATDISABLE+=2;
X	     else if(but==111)TBATDISABLE+=2;
N	     else if(but==butL)TBATDISABLE--;
X	     else if(but==247)TBATDISABLE--;
N	     else if(but==butL_)TBATDISABLE-=2;
X	     else if(but==119)TBATDISABLE-=2;
N	     gran(&TBATDISABLE,49,91);
N	     lc640_write_int(EE_TBATDISABLE,TBATDISABLE);
X	     lc640_write_int(0x10+100+102,TBATDISABLE);
N	     speed=1;
N	     }
N
N	else if(sub_ind==6)
X	else if(a_ind . s_i==6)
N	     {
N	     if(but==butR)TBATENABLE++;
X	     if(but==239)TBATENABLE++;
N	     else if(but==butR_)TBATENABLE+=2;
X	     else if(but==111)TBATENABLE+=2;
N	     else if(but==butL)TBATENABLE--;
X	     else if(but==247)TBATENABLE--;
N	     else if(but==butL_)TBATENABLE-=2;
X	     else if(but==119)TBATENABLE-=2;
N	     gran(&TBATENABLE,44,TBATDISABLE-5);
N	     lc640_write_int(EE_TBATENABLE,TBATENABLE);
X	     lc640_write_int(0x10+100+104,TBATENABLE);
N	     speed=1;
N	     }
N	else if(sub_ind==7)
X	else if(a_ind . s_i==7)
N		{
N		if(but==butE)
X		if(but==254)
N			{
N			tree_down(0,0);
N			ret(0);
N			}
N		}
N	}
N
Nelse if(ind==iKlimat_kontur)
Xelse if(a_ind . i==iKlimat_kontur)
N	{
N	ret(1000);
N	if(but==butD)
X	if(but==251)
N		{
N		sub_ind++;
X		a_ind . s_i++;
N		gran_char(&sub_ind,0,9);
X		gran_char(&a_ind . s_i,0,9);
N	
N		}
N
N	else if(but==butU)
X	else if(but==253)
N		{
N		sub_ind--;
X		a_ind . s_i--;
N		gran_char(&sub_ind,0,9);
X		gran_char(&a_ind . s_i,0,9);
N		
N		}
N	else if(sub_ind==0)
X	else if(a_ind . s_i==0)
N	     {
N	     if(but==butR)TBOXMAX++;
X	     if(but==239)TBOXMAX++;
N	     else if(but==butR_)TBOXMAX+=2;
X	     else if(but==111)TBOXMAX+=2;
N	     else if(but==butL)TBOXMAX--;
X	     else if(but==247)TBOXMAX--;
N	     else if(but==butL_)TBOXMAX-=2;
X	     else if(but==119)TBOXMAX-=2;
N	     gran(&TBOXMAX,50,80);
N	     lc640_write_int(EE_TBOXMAX,TBOXMAX);
X	     lc640_write_int(0x10+100+92,TBOXMAX);
N	     speed=1;
N	     }
N
N/*	else if(sub_ind==1)
N	     {
N	     if(but==butR)TBOXVENTON++;
N	     else if(but==butR_)TBOXVENTON+=2;
N	     else if(but==butL)TBOXVENTON--;
N	     else if(but==butL_)TBOXVENTON-=2;
N	     gran(&TBOXVENTON,TBOXVENTOFF+2,150);
N	     lc640_write_int(EE_TBOXVENTON,TBOXVENTON);
N	     speed=1;
N	     }
N
N	else if(sub_ind==2)
N	     {
N	     if(but==butR)TBOXVENTOFF++;
N	     else if(but==butR_)TBOXVENTOFF+=2;
N	     else if(but==butL)TBOXVENTOFF--;
N	     else if(but==butL_)TBOXVENTOFF-=2;
N	     gran(&TBOXVENTOFF,TBOXWARMOFF+2,TBOXVENTON-2);
N	     lc640_write_int(EE_TBOXVENTOFF,TBOXVENTOFF);
N	     speed=1;
N	     }  */
N	else if(sub_ind==1)
X	else if(a_ind . s_i==1)
N	     {
N	     if(but==butR)TBOXVENTMAX++;
X	     if(but==239)TBOXVENTMAX++;
N	     else if(but==butR_)TBOXVENTMAX+=2;
X	     else if(but==111)TBOXVENTMAX+=2;
N	     else if(but==butL)TBOXVENTMAX--;
X	     else if(but==247)TBOXVENTMAX--;
N	     else if(but==butL_)TBOXVENTMAX-=2;
X	     else if(but==119)TBOXVENTMAX-=2;
N	     gran(&TBOXVENTMAX,49,81);
N	     lc640_write_int(EE_TBOXVENTMAX,TBOXVENTMAX);
X	     lc640_write_int(0x10+100+96,TBOXVENTMAX);
N	     speed=1;
N	     }
N
N	else if(sub_ind==2)
X	else if(a_ind . s_i==2)
N	     {
N	     if(but==butR)TBOXREG++;
X	     if(but==239)TBOXREG++;
N	     else if(but==butR_)TBOXREG+=2;
X	     else if(but==111)TBOXREG+=2;
N	     else if(but==butL)TBOXREG--;
X	     else if(but==247)TBOXREG--;
N	     else if(but==butL_)TBOXREG-=2;
X	     else if(but==119)TBOXREG-=2;
N	     //gran(&TBOXREG,5,30);
N		gran(&TBOXREG,0,50);
N	     lc640_write_int(EE_TBOXREG,TBOXREG);
X	     lc640_write_int(0x10+100+94,TBOXREG);
N	     speed=1;
N	     }
N
N
N	else if(sub_ind==3)
X	else if(a_ind . s_i==3)
N	     {
N	     if(but==butR)TBOXWARMON++;
X	     if(but==239)TBOXWARMON++;
N	     else if(but==butR_)TBOXWARMON+=2;
X	     else if(but==111)TBOXWARMON+=2;
N	     else if(but==butL)TBOXWARMON--;
X	     else if(but==247)TBOXWARMON--;
N	     else if(but==butL_)TBOXWARMON-=2;
X	     else if(but==119)TBOXWARMON-=2;
N	     //gran(&TBOXWARMON,-20,20);
N		gran(&TBOXWARMON,-50,50);
N	     lc640_write_int(EE_TBOXWARMON,TBOXWARMON);
X	     lc640_write_int(0x10+100+132,TBOXWARMON);
N	     speed=1;
N	     }
N
N	else if(sub_ind==4)
X	else if(a_ind . s_i==4)
N	     {
N	     if(but==butR)TBOXWARMOFF++;
X	     if(but==239)TBOXWARMOFF++;
N	     else if(but==butR_)TBOXWARMOFF+=2;
X	     else if(but==111)TBOXWARMOFF+=2;
N	     else if(but==butL)TBOXWARMOFF--;
X	     else if(but==247)TBOXWARMOFF--;
N	     else if(but==butL_)TBOXWARMOFF-=2;
X	     else if(but==119)TBOXWARMOFF-=2;
N	     //gran(&TBOXWARMOFF,-20,20);
N		gran(&TBOXWARMOFF,-50,50);
N	     lc640_write_int(EE_TBOXWARMOFF,TBOXWARMOFF);
X	     lc640_write_int(0x10+100+134,TBOXWARMOFF);
N	     speed=1;
N	     }
N
N	else if(sub_ind==5)
X	else if(a_ind . s_i==5)
N	     {
N	     if(but==butR)TLOADDISABLE++;
X	     if(but==239)TLOADDISABLE++;
N	     else if(but==butR_)TLOADDISABLE+=2;
X	     else if(but==111)TLOADDISABLE+=2;
N	     else if(but==butL)TLOADDISABLE--;
X	     else if(but==247)TLOADDISABLE--;
N	     else if(but==butL_)TLOADDISABLE-=2;
X	     else if(but==119)TLOADDISABLE-=2;
N	     gran(&TLOADDISABLE,49,81);
N	     lc640_write_int(EE_TLOADDISABLE,TLOADDISABLE);
X	     lc640_write_int(0x10+100+98,TLOADDISABLE);
N	     speed=1;
N	     }
N
N	else if(sub_ind==6)
X	else if(a_ind . s_i==6)
N	     {
N	     if(but==butR)TLOADENABLE++;
X	     if(but==239)TLOADENABLE++;
N	     else if(but==butR_)TLOADENABLE+=2;
X	     else if(but==111)TLOADENABLE+=2;
N	     else if(but==butL)TLOADENABLE--;
X	     else if(but==247)TLOADENABLE--;
N	     else if(but==butL_)TLOADENABLE-=2;
X	     else if(but==119)TLOADENABLE-=2;
N	     gran(&TLOADENABLE,44,TLOADDISABLE-5);
N	     lc640_write_int(EE_TLOADENABLE,TLOADENABLE);
X	     lc640_write_int(0x10+100+100,TLOADENABLE);
N	     speed=1;
N	     }
N
N	else if(sub_ind==7)
X	else if(a_ind . s_i==7)
N	     {
N	     if(but==butR)TBATDISABLE++;
X	     if(but==239)TBATDISABLE++;
N	     else if(but==butR_)TBATDISABLE+=2;
X	     else if(but==111)TBATDISABLE+=2;
N	     else if(but==butL)TBATDISABLE--;
X	     else if(but==247)TBATDISABLE--;
N	     else if(but==butL_)TBATDISABLE-=2;
X	     else if(but==119)TBATDISABLE-=2;
N	     gran(&TBATDISABLE,49,91);
N	     lc640_write_int(EE_TBATDISABLE,TBATDISABLE);
X	     lc640_write_int(0x10+100+102,TBATDISABLE);
N	     speed=1;
N	     }
N
N	else if(sub_ind==8)
X	else if(a_ind . s_i==8)
N	     {
N	     if(but==butR)TBATENABLE++;
X	     if(but==239)TBATENABLE++;
N	     else if(but==butR_)TBATENABLE+=2;
X	     else if(but==111)TBATENABLE+=2;
N	     else if(but==butL)TBATENABLE--;
X	     else if(but==247)TBATENABLE--;
N	     else if(but==butL_)TBATENABLE-=2;
X	     else if(but==119)TBATENABLE-=2;
N	     gran(&TBATENABLE,44,TBATDISABLE-5);
N	     lc640_write_int(EE_TBATENABLE,TBATENABLE);
X	     lc640_write_int(0x10+100+104,TBATENABLE);
N	     speed=1;
N	     }
N	else if(sub_ind==9)
X	else if(a_ind . s_i==9)
N		{
N		if(but==butE)
X		if(but==254)
N			{
N			tree_down(0,0);
N			ret(0);
N			}
N		}
N	}
N#ifdef UKU_TELECORE2015
S else if(ind==iKlimat_TELECORE)
S	{
S	ret(1000);
S	if(but==butD)
S		{
S		sub_ind++;
S		if(sub_ind==1)
S			{
S			sub_ind++;
S			index_set=1;
S			}
S		gran_char(&sub_ind,0,11);
S		if(sub_ind==3)sub_ind++;
S		gran_char(&sub_ind,0,11);	
S		}
S
S	else if(but==butU)
S		{
S		sub_ind--;
S		if(sub_ind==1)sub_ind--;
S		gran_char(&sub_ind,0,11);
S		if(sub_ind==3)sub_ind--;
S		gran_char(&sub_ind,0,11);
S		
S		}
S	else if(sub_ind==0)
S	     {
S	     if(but==butR)TELECORE2015_KLIMAT_WARM_SIGNAL++;
S	     else if(but==butR_)TELECORE2015_KLIMAT_WARM_SIGNAL++;
S	     else if(but==butL)TELECORE2015_KLIMAT_WARM_SIGNAL--;
S	     else if(but==butL_)TELECORE2015_KLIMAT_WARM_SIGNAL--;
S	     gran_ring(&TELECORE2015_KLIMAT_WARM_SIGNAL,0,1);
S	     lc640_write_int(EE_TELECORE2015_KLIMAT_WARM_SIGNAL,TELECORE2015_KLIMAT_WARM_SIGNAL);
S	     speed=1;
S	     }
S	else if(sub_ind==2)
S	     {
S	     if(but==butR)TELECORE2015_KLIMAT_VENT_SIGNAL++;
S	     else if(but==butR_)TELECORE2015_KLIMAT_VENT_SIGNAL++;
S	     else if(but==butL)TELECORE2015_KLIMAT_VENT_SIGNAL--;
S	     else if(but==butL_)TELECORE2015_KLIMAT_VENT_SIGNAL--;
S	     gran_ring(&TELECORE2015_KLIMAT_VENT_SIGNAL,0,1);
S	     lc640_write_int(EE_TELECORE2015_KLIMAT_VENT_SIGNAL,TELECORE2015_KLIMAT_VENT_SIGNAL);
S	     speed=1;
S	     }
S	else if(sub_ind==4)
S	     {
S	     if(but==butR)TELECORE2015_KLIMAT_WARM_ON++;
S	     else if(but==butR_)TELECORE2015_KLIMAT_WARM_ON+=2;
S	     else if(but==butL)TELECORE2015_KLIMAT_WARM_ON--;
S	     else if(but==butL_)TELECORE2015_KLIMAT_WARM_ON-=2;
S	     gran(&TELECORE2015_KLIMAT_WARM_ON,-20,50);
S	     lc640_write_int(EE_TELECORE2015_KLIMAT_WARM_ON,TELECORE2015_KLIMAT_WARM_ON);
S	     speed=1;
S	     }
S
S	else if(sub_ind==5)
S	     {
S	     if(but==butR)TELECORE2015_KLIMAT_WARM_OFF++;
S	     else if(but==butR_)TELECORE2015_KLIMAT_WARM_OFF+=2;
S	     else if(but==butL)TELECORE2015_KLIMAT_WARM_OFF--;
S	     else if(but==butL_)TELECORE2015_KLIMAT_WARM_OFF-=2;
S	     gran(&TELECORE2015_KLIMAT_WARM_OFF,-20,50);
S	     lc640_write_int(EE_TELECORE2015_KLIMAT_WARM_OFF,TELECORE2015_KLIMAT_WARM_OFF);
S	     speed=1;
S	     }
S
S
S	else if(sub_ind==6)
S	     {
S	     if(but==butR)TELECORE2015_KLIMAT_CAP++;
S	     else if(but==butR_)TELECORE2015_KLIMAT_CAP+=2;
S	     else if(but==butL)TELECORE2015_KLIMAT_CAP--;
S	     else if(but==butL_)TELECORE2015_KLIMAT_CAP-=2;
S	     //gran(&TBOXWARMON,-20,20);
S		gran(&TELECORE2015_KLIMAT_CAP,5,95);
S	     lc640_write_int(EE_TELECORE2015_KLIMAT_CAP,TELECORE2015_KLIMAT_CAP);
S	     speed=1;
S	     }
S
S	else if(sub_ind==7)
S	     {
S	     if(but==butR)TELECORE2015_KLIMAT_VENT_ON++;
S	     else if(but==butR_)TELECORE2015_KLIMAT_VENT_ON+=2;
S	     else if(but==butL)TELECORE2015_KLIMAT_VENT_ON--;
S	     else if(but==butL_)TELECORE2015_KLIMAT_VENT_ON-=2;
S	     gran(&TELECORE2015_KLIMAT_VENT_ON,0,80);
S		gran(&TELECORE2015_KLIMAT_VENT_ON,TELECORE2015_KLIMAT_VENT_OFF,80);
S	     lc640_write_int(EE_TELECORE2015_KLIMAT_VENT_ON,TELECORE2015_KLIMAT_VENT_ON);
S	     speed=1;
S	     }
S
S	else if(sub_ind==8)
S	     {
S	     if(but==butR)TELECORE2015_KLIMAT_VENT_OFF++;
S	     else if(but==butR_)TELECORE2015_KLIMAT_VENT_OFF+=2;
S	     else if(but==butL)TELECORE2015_KLIMAT_VENT_OFF--;
S	     else if(but==butL_)TELECORE2015_KLIMAT_VENT_OFF-=2;
S	     gran(&TELECORE2015_KLIMAT_VENT_OFF,0,80);
S		gran(&TELECORE2015_KLIMAT_VENT_OFF,0,TELECORE2015_KLIMAT_VENT_OFF);
S	     lc640_write_int(EE_TELECORE2015_KLIMAT_VENT_OFF,TELECORE2015_KLIMAT_VENT_OFF);
S	     speed=1;
S	     }
S	else if(sub_ind==9)
S	     {
S	     if(but==butR)TELECORE2015_KLIMAT_VVENT_ON++;
S	     else if(but==butR_)TELECORE2015_KLIMAT_VVENT_ON+=2;
S	     else if(but==butL)TELECORE2015_KLIMAT_VVENT_ON--;
S	     else if(but==butL_)TELECORE2015_KLIMAT_VVENT_ON-=2;
S	     gran(&TELECORE2015_KLIMAT_VVENT_ON,0,80);
S		gran(&TELECORE2015_KLIMAT_VVENT_ON,TELECORE2015_KLIMAT_VVENT_OFF,80);
S	     lc640_write_int(EE_TELECORE2015_KLIMAT_VVENT_ON,TELECORE2015_KLIMAT_VVENT_ON);
S	     speed=1;
S	     }
S
S	else if(sub_ind==10)
S	     {
S	     if(but==butR)TELECORE2015_KLIMAT_VVENT_OFF++;
S	     else if(but==butR_)TELECORE2015_KLIMAT_VVENT_OFF+=2;
S	     else if(but==butL)TELECORE2015_KLIMAT_VVENT_OFF--;
S	     else if(but==butL_)TELECORE2015_KLIMAT_VVENT_OFF-=2;
S	     gran(&TELECORE2015_KLIMAT_VVENT_OFF,0,80);
S		gran(&TELECORE2015_KLIMAT_VVENT_OFF,0,TELECORE2015_KLIMAT_VVENT_OFF);
S	     lc640_write_int(EE_TELECORE2015_KLIMAT_VVENT_OFF,TELECORE2015_KLIMAT_VVENT_OFF);
S	     speed=1;
S	     }
S
S
S	else if(sub_ind==11)
S		{
S		if(but==butE)
S			{
S			tree_down(0,0);
S			ret(0);
S			}
S		}
S	}
N#endif
N#ifdef UKU_TELECORE2017
S else if(ind==iKlimat_TELECORE)
S	{
S	ret(1000);
S	if(but==butD)
S		{
S		sub_ind++;
S		if(sub_ind==1)
S			{
S			sub_ind++;
S			index_set=1;
S			}
S		gran_char(&sub_ind,0,17);
S		if(sub_ind==3)sub_ind++;
S		gran_char(&sub_ind,0,17);	
S		}
S
S	else if(but==butU)
S		{
S		sub_ind--;
S		if(sub_ind==1)sub_ind--;
S		gran_char(&sub_ind,0,17);
S 		}
S	else if(but==butLR_)
S		{
S		lc640_write_int(EE_TELECORE2017_KLIMAT_WARM_SIGNAL,0);
S		lc640_write_int(EE_TELECORE2017_KLIMAT_VENT_SIGNAL,1);
S		lc640_write_int(EE_TELECORE2017_KLIMAT_WARM_ON,10);
S		lc640_write_int(EE_TELECORE2017_KLIMAT_WARM_OFF,30);
S		lc640_write_int(EE_TELECORE2017_KLIMAT_CAP,30);
S		//lc640_write_int(EE_TELECORE2017_KLIMAT_VENT_ON0,30);
S	    lc640_write_int(EE_TELECORE2017_KLIMAT_VENT_ON20,40);
S	    lc640_write_int(EE_TELECORE2017_KLIMAT_VENT_ON40,50);
S	    lc640_write_int(EE_TELECORE2017_KLIMAT_VENT_ON60,60);
S	    lc640_write_int(EE_TELECORE2017_KLIMAT_VENT_ON80,70);
S	    lc640_write_int(EE_TELECORE2017_KLIMAT_VENT_ON100,80);
S	    //lc640_write_int(EE_TELECORE2017_KLIMAT_DVENT_ON0,10);
S	    lc640_write_int(EE_TELECORE2017_KLIMAT_DVENT_ON20,20);
S	    lc640_write_int(EE_TELECORE2017_KLIMAT_DVENT_ON40,30);
S	    lc640_write_int(EE_TELECORE2017_KLIMAT_DVENT_ON60,40);
S	    lc640_write_int(EE_TELECORE2017_KLIMAT_DVENT_ON80,50);
S	    lc640_write_int(EE_TELECORE2017_KLIMAT_DVENT_ON100,60);
S 		}
S
S	else if(sub_ind==0)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_WARM_SIGNAL++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_WARM_SIGNAL++;
S	     else if(but==butL)TELECORE2017_KLIMAT_WARM_SIGNAL--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_WARM_SIGNAL--;
S	     gran_ring(&TELECORE2017_KLIMAT_WARM_SIGNAL,0,1);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_WARM_SIGNAL,TELECORE2017_KLIMAT_WARM_SIGNAL);
S	     speed=1;
S	     }
S	else if(sub_ind==2)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_VENT_SIGNAL++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_VENT_SIGNAL++;
S	     else if(but==butL)TELECORE2017_KLIMAT_VENT_SIGNAL--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_VENT_SIGNAL--;
S	     gran_ring(&TELECORE2017_KLIMAT_VENT_SIGNAL,0,1);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_VENT_SIGNAL,TELECORE2017_KLIMAT_VENT_SIGNAL);
S	     speed=1;
S	     }
S	else if(sub_ind==4)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_WARM_ON++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_WARM_ON+=2;
S	     else if(but==butL)TELECORE2017_KLIMAT_WARM_ON--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_WARM_ON-=2;
S	     gran(&TELECORE2017_KLIMAT_WARM_ON,-20,50);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_WARM_ON,TELECORE2017_KLIMAT_WARM_ON);
S	     speed=1;
S	     }
S
S	else if(sub_ind==5)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_WARM_OFF++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_WARM_OFF+=2;
S	     else if(but==butL)TELECORE2017_KLIMAT_WARM_OFF--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_WARM_OFF-=2;
S	     gran(&TELECORE2017_KLIMAT_WARM_OFF,-20,50);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_WARM_OFF,TELECORE2017_KLIMAT_WARM_OFF);
S	     speed=1;
S	     }
S
S
S	else if(sub_ind==6)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_CAP++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_CAP+=2;
S	     else if(but==butL)TELECORE2017_KLIMAT_CAP--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_CAP-=2;
S	     gran(&TELECORE2017_KLIMAT_CAP,5,95);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_CAP,TELECORE2017_KLIMAT_CAP);
S	     speed=1;
S	     }
S
S/*	else if(sub_ind==7)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_VENT_ON0++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_VENT_ON0+=2;
S	     else if(but==butL)TELECORE2017_KLIMAT_VENT_ON0--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_VENT_ON0-=2;
S		 gran(&TELECORE2017_KLIMAT_VENT_ON0,0,TELECORE2017_KLIMAT_VENT_ON20);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_VENT_ON0,TELECORE2017_KLIMAT_VENT_ON0);
S	     speed=1;
S	     }*/
S
S
S	else if(sub_ind==7)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_VENT_ON100++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_VENT_ON100+=2;
S	     else if(but==butL)TELECORE2017_KLIMAT_VENT_ON100--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_VENT_ON100-=2;
S		 gran(&TELECORE2017_KLIMAT_VENT_ON100,TELECORE2017_KLIMAT_VENT_ON80,100);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_VENT_ON100,TELECORE2017_KLIMAT_VENT_ON100);
S	     speed=1;
S	     }
S	else if(sub_ind==8)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_VENT_ON80++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_VENT_ON80+=2;
S	     else if(but==butL)TELECORE2017_KLIMAT_VENT_ON80--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_VENT_ON80-=2;
S		 gran(&TELECORE2017_KLIMAT_VENT_ON80,TELECORE2017_KLIMAT_VENT_ON60,TELECORE2017_KLIMAT_VENT_ON100);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_VENT_ON80,TELECORE2017_KLIMAT_VENT_ON80);
S	     speed=1;
S	     }
S
S
S	else if(sub_ind==9)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_VENT_ON60++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_VENT_ON60+=2;
S	     else if(but==butL)TELECORE2017_KLIMAT_VENT_ON60--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_VENT_ON60-=2;
S		 gran(&TELECORE2017_KLIMAT_VENT_ON60,TELECORE2017_KLIMAT_VENT_ON40,TELECORE2017_KLIMAT_VENT_ON80);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_VENT_ON60,TELECORE2017_KLIMAT_VENT_ON60);
S	     speed=1;
S	     }
S
S	else if(sub_ind==10)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_VENT_ON40++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_VENT_ON40+=2;
S	     else if(but==butL)TELECORE2017_KLIMAT_VENT_ON40--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_VENT_ON40-=2;
S		 gran(&TELECORE2017_KLIMAT_VENT_ON40,TELECORE2017_KLIMAT_VENT_ON20,TELECORE2017_KLIMAT_VENT_ON60);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_VENT_ON40,TELECORE2017_KLIMAT_VENT_ON40);
S	     speed=1;
S	     }
S
S	else if(sub_ind==11)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_VENT_ON20++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_VENT_ON20+=2;
S	     else if(but==butL)TELECORE2017_KLIMAT_VENT_ON20--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_VENT_ON20-=2;
S		 gran(&TELECORE2017_KLIMAT_VENT_ON20,0,TELECORE2017_KLIMAT_VENT_ON40);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_VENT_ON20,TELECORE2017_KLIMAT_VENT_ON20);
S	     speed=1;
S	     }
S
S/*	else if(sub_ind==12)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_DVENT_ON0++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_DVENT_ON0+=2;
S	     else if(but==butL)TELECORE2017_KLIMAT_DVENT_ON0--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_DVENT_ON0-=2;
S		 gran(&TELECORE2017_KLIMAT_DVENT_ON0,0,TELECORE2017_KLIMAT_DVENT_ON20);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_DVENT_ON0,TELECORE2017_KLIMAT_DVENT_ON0);
S	     speed=1;
S	     }*/
S
S	else if(sub_ind==12)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_DVENT_ON100++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_DVENT_ON100+=2;
S	     else if(but==butL)TELECORE2017_KLIMAT_DVENT_ON100--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_DVENT_ON100-=2;
S		 gran(&TELECORE2017_KLIMAT_DVENT_ON100,TELECORE2017_KLIMAT_DVENT_ON80,100);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_DVENT_ON100,TELECORE2017_KLIMAT_DVENT_ON100);
S	     speed=1;
S	     }
S
S	else if(sub_ind==13)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_DVENT_ON80++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_DVENT_ON80+=2;
S	     else if(but==butL)TELECORE2017_KLIMAT_DVENT_ON80--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_DVENT_ON80-=2;
S		 gran(&TELECORE2017_KLIMAT_DVENT_ON80,TELECORE2017_KLIMAT_DVENT_ON60,TELECORE2017_KLIMAT_DVENT_ON100);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_DVENT_ON80,TELECORE2017_KLIMAT_DVENT_ON80);
S	     speed=1;
S	     }
S
S	else if(sub_ind==14)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_DVENT_ON60++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_DVENT_ON60+=2;
S	     else if(but==butL)TELECORE2017_KLIMAT_DVENT_ON60--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_DVENT_ON60-=2;
S		 gran(&TELECORE2017_KLIMAT_DVENT_ON60,TELECORE2017_KLIMAT_DVENT_ON40,TELECORE2017_KLIMAT_DVENT_ON80);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_DVENT_ON60,TELECORE2017_KLIMAT_DVENT_ON60);
S	     speed=1;
S	     }
S
S	else if(sub_ind==15)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_DVENT_ON40++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_DVENT_ON40+=2;
S	     else if(but==butL)TELECORE2017_KLIMAT_DVENT_ON40--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_DVENT_ON40-=2;
S		 gran(&TELECORE2017_KLIMAT_DVENT_ON40,TELECORE2017_KLIMAT_DVENT_ON20,TELECORE2017_KLIMAT_DVENT_ON60);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_DVENT_ON40,TELECORE2017_KLIMAT_DVENT_ON40);
S	     speed=1;
S	     }
S
S	else if(sub_ind==16)
S	     {
S	     if(but==butR)TELECORE2017_KLIMAT_DVENT_ON20++;
S	     else if(but==butR_)TELECORE2017_KLIMAT_DVENT_ON20+=2;
S	     else if(but==butL)TELECORE2017_KLIMAT_DVENT_ON20--;
S	     else if(but==butL_)TELECORE2017_KLIMAT_DVENT_ON20-=2;
S		 gran(&TELECORE2017_KLIMAT_DVENT_ON20,0,TELECORE2017_KLIMAT_DVENT_ON40);
S	     lc640_write_int(EE_TELECORE2017_KLIMAT_DVENT_ON20,TELECORE2017_KLIMAT_DVENT_ON20);
S	     speed=1;
S	     }
S
S	else if(sub_ind==17)
S		{
S		if(but==butE)
S			{
S			tree_down(0,0);
S			ret(0);
S			}
S		}
S	}
N#endif
Nelse if(ind==iNpn_set)
Xelse if(a_ind . i==iNpn_set)
N	{
N	ret(1000);
N	if(but==butD)
X	if(but==251)
N		{
N		sub_ind++;
X		a_ind . s_i++;
N		gran_char(&sub_ind,0,simax);
X		gran_char(&a_ind . s_i,0,simax);
N	
N		}
N
N	else if(but==butU)
X	else if(but==253)
N		{
N		sub_ind--;
X		a_ind . s_i--;
N		gran_char(&sub_ind,0,simax);
X		gran_char(&a_ind . s_i,0,simax);
N		
N		}
N	else if(sub_ind==0)
X	else if(a_ind . s_i==0)
N	    {
N	    if(NPN_OUT==npnoRELEVENT)NPN_OUT=npnoRELEAVBAT2;
N		else if(NPN_OUT==npnoRELEAVBAT2)NPN_OUT=npnoOFF;
N		else NPN_OUT=npnoRELEVENT;
N	    lc640_write_int(EE_NPN_OUT,NPN_OUT);
X	    lc640_write_int(0x10+100+116,NPN_OUT);
N	    
N	    }
N	else if(sub_ind==1)
X	else if(a_ind . s_i==1)
N	    {
N		if(NPN_OUT==npnoOFF)
N			{
N			if(but==butE)			
X			if(but==254)			
N				{
N				tree_down(0,0);
N				ret(0);
N				}
N			}
N		else
N			{
N			/*if(NPN_SIGN==npnsAVNET)NPN_SIGN=npnsULOAD;
N			else NPN_SIGN=npnsAVNET;
N			lc640_write_int(EE_NPN_SIGN,NPN_SIGN);*/
N
N			if(but==butR)UONPN++;
X			if(but==239)UONPN++;
N	     	else if(but==butR_)UONPN+=2;
X	     	else if(but==111)UONPN+=2;
N	     	else if(but==butL)UONPN--;
X	     	else if(but==247)UONPN--;
N	     	else if(but==butL_)UONPN-=2;
X	     	else if(but==119)UONPN-=2;
N	     	gran(&UONPN,100,2500);
N	     	lc640_write_int(EE_UONPN,UONPN);
X	     	lc640_write_int(0x10+100+120,UONPN);
N	     	speed=1;
N
N			}
N		}
N	else if(sub_ind==2)
X	else if(a_ind . s_i==2)
N		{
N/*		if(NPN_SIGN==npnsULOAD)
N			{
N			if(but==butR)UONPN++;
N	     	else if(but==butR_)UONPN+=2;
N	     	else if(but==butL)UONPN--;
N	     	else if(but==butL_)UONPN-=2;
N	     	gran(&UONPN,100,2500);
N	     	lc640_write_int(EE_UONPN,UONPN);
N	     	speed=1;
N			}
N		else 
N			{
N			if(but==butR)TZNPN++;
N	     	else if(but==butR_)TZNPN+=2;
N	     	else if(but==butL)TZNPN--;
N	     	else if(but==butL_)TZNPN-=2;
N	     	gran(&TZNPN,10,60);
N	     	lc640_write_int(EE_TZNPN,TZNPN);
N	     	speed=1;
N			}*/
N
N			if(but==butR)UVNPN++;
X			if(but==239)UVNPN++;
N	     	else if(but==butR_)UVNPN+=2;
X	     	else if(but==111)UVNPN+=2;
N	     	else if(but==butL)UVNPN--;
X	     	else if(but==247)UVNPN--;
N	     	else if(but==butL_)UVNPN-=2;
X	     	else if(but==119)UVNPN-=2;
N	     	gran(&UVNPN,100,2500);
N	     	lc640_write_int(EE_UVNPN,UVNPN);
X	     	lc640_write_int(0x10+100+122,UVNPN);
N	     	speed=1;
N		}
N	else if(sub_ind==3)
X	else if(a_ind . s_i==3)
N		{
N/*		if(NPN_SIGN==npnsULOAD)
N			{
N			if(but==butR)UVNPN++;
N	     	else if(but==butR_)UVNPN+=2;
N	     	else if(but==butL)UVNPN--;
N	     	else if(but==butL_)UVNPN-=2;
N	     	gran(&UVNPN,100,2500);
N	     	lc640_write_int(EE_UVNPN,UVNPN);
N	     	speed=1;
N			}
N		else 
N			{
N			if(but==butE)			
N				{
N				tree_down(0,0);
N				ret(0);
N				}
N			}*/
N			if(but==butR)TZNPN++;
X			if(but==239)TZNPN++;
N	     	else if(but==butR_)TZNPN+=2;
X	     	else if(but==111)TZNPN+=2;
N	     	else if(but==butL)TZNPN--;
X	     	else if(but==247)TZNPN--;
N	     	else if(but==butL_)TZNPN-=2;
X	     	else if(but==119)TZNPN-=2;
N	     	gran(&TZNPN,10,60);
N	     	lc640_write_int(EE_TZNPN,TZNPN);
X	     	lc640_write_int(0x10+100+124,TZNPN);
N	     	speed=1;
N		}
N	else if(sub_ind==4)
X	else if(a_ind . s_i==4)
N		{
N/*		if(NPN_SIGN==npnsULOAD)
N			{
N			if(but==butR)TZNPN++;
N	     	else if(but==butR_)TZNPN+=2;
N	     	else if(but==butL)TZNPN--;
N	     	else if(but==butL_)TZNPN-=2;
N	     	gran(&TZNPN,10,60);
N	     	lc640_write_int(EE_TZNPN,TZNPN);
N	     	speed=1;
N			}*/
N			if(but==butE)			
X			if(but==254)			
N				{
N				tree_down(0,0);
N				ret(0);
N				}
N		}
N	else if(sub_ind==5)
X	else if(a_ind . s_i==5)
N		{
N		if(NPN_SIGN==npnsULOAD)
N			{
N			if(but==butE)			
X			if(but==254)			
N				{
N				tree_down(0,0);
N				ret(0);
N				}
N			}
N		}
N
N
N	}
Nelse if(ind==iBps_list)
Xelse if(a_ind . i==iBps_list)
N	{
N//	ret_ind(0,0,0);
N	if (but==butU)
X	if (but==253)
N		{      
N		sub_ind1--;
X		a_ind . s_i1--;
N		gran_char(&sub_ind1,0,NUMIST-2);
X		gran_char(&a_ind . s_i1,0,NUMIST-2);
N		}
N		
N	else if (but==butD)
X	else if (but==251)
N		{
N		sub_ind1++;
X		a_ind . s_i1++;
N		gran_char(&sub_ind1,0,NUMIST-2);
X		gran_char(&a_ind . s_i1,0,NUMIST-2);
N		}
N
N	else if (but==butD_)
X	else if (but==123)
N		{
N		sub_ind1=NUMIST-2;
X		a_ind . s_i1=NUMIST-2;
N		}
N				
N	else if(but==butR)
X	else if(but==239)
N		{
N		sub_ind++;
X		a_ind . s_i++;
N		gran_char(&sub_ind,0,3);
X		gran_char(&a_ind . s_i,0,3);
N		}
N				
N	else if(but==butL)
X	else if(but==247)
N		{
N		sub_ind--;
X		a_ind . s_i--;
N		gran_char(&sub_ind,0,3);
X		gran_char(&a_ind . s_i,0,3);
N		}
N	else if(but==butE)
X	else if(but==254)
N		{
N		tree_down(0,0);
N		}
N		
N	else if(but==butE_)
X	else if(but==126)
N		{
N		if(bAVG_BLOCK) bAVG_BLOCK=0;
N		else bAVG_BLOCK=1;
N		}						
N	}
Nelse if(ind==iAvt_set_sel)
Xelse if(a_ind . i==iAvt_set_sel)
N	{
N	ret(1000);
N	if (but==butU)
X	if (but==253)
N		{      
N		sub_ind--;
X		a_ind . s_i--;
N		gran_char(&sub_ind,0,NUMIST);
X		gran_char(&a_ind . s_i,0,NUMIST);
N		}
N		
N	else if (but==butD)
X	else if (but==251)
N		{
N		sub_ind++;
X		a_ind . s_i++;
N		gran_char(&sub_ind,0,NUMIST);
X		gran_char(&a_ind . s_i,0,NUMIST);
N		}
N	else if((sub_ind>=0)&&(sub_ind<NUMIST))
X	else if((a_ind . s_i>=0)&&(a_ind . s_i<NUMIST))
N		{
N		if(but==butE)
X		if(but==254)
N			{
N			tree_up(iAvt_set,0,0,sub_ind);
X			tree_up(iAvt_set,0,0,a_ind . s_i);
N			}
N		}
N	else if(sub_ind==NUMIST)
X	else if(a_ind . s_i==NUMIST)
N		{
N		if(but==butE)
X		if(but==254)
N			{
N			tree_down(0,0);
N			}	
N		}
N	}
N
Nelse if(ind==iOut_volt_contr)
Xelse if(a_ind . i==iOut_volt_contr)
N	{
N	ret(1000);
N	if(but==butD)
X	if(but==251)
N		{
N		sub_ind++;
X		a_ind . s_i++;
N		gran_char(&sub_ind,0,3);
X		gran_char(&a_ind . s_i,0,3);
N		}
N	else if(but==butU)
X	else if(but==253)
N		{
N		sub_ind--;
X		a_ind . s_i--;
N		gran_char(&sub_ind,0,3);
X		gran_char(&a_ind . s_i,0,3);
N		}
N	else if(but==butD_)
X	else if(but==123)
N		{
N		sub_ind=3;
X		a_ind . s_i=3;
N		}
N	else if(sub_ind==3)
X	else if(a_ind . s_i==3)
N		{
N		if(but==butE)
X		if(but==254)
N			{
N			tree_down(0,0);
N			ret(0);
N			}
N		}
N	else if(sub_ind==0)
X	else if(a_ind . s_i==0)
N		{
N		if(but==butR)U_OUT_KONTR_MAX++;
X		if(but==239)U_OUT_KONTR_MAX++;
N		else if(but==butR_)U_OUT_KONTR_MAX=(U_OUT_KONTR_MAX/5+1)*5;
X		else if(but==111)U_OUT_KONTR_MAX=(U_OUT_KONTR_MAX/5+1)*5;
N		else if(but==butL)U_OUT_KONTR_MAX--;
X		else if(but==247)U_OUT_KONTR_MAX--;
N		else if(but==butL_)U_OUT_KONTR_MAX=(U_OUT_KONTR_MAX/5-1)*5;
X		else if(but==119)U_OUT_KONTR_MAX=(U_OUT_KONTR_MAX/5-1)*5;
N		gran(&U_OUT_KONTR_MAX,10,3000);
N		lc640_write_int(EE_U_OUT_KONTR_MAX,U_OUT_KONTR_MAX);
X		lc640_write_int(0x10+100+182,U_OUT_KONTR_MAX);
N		speed=1;
N		}				
N
N	else if(sub_ind==1)
X	else if(a_ind . s_i==1)
N		{
N		if(but==butR)U_OUT_KONTR_MIN++;
X		if(but==239)U_OUT_KONTR_MIN++;
N		else if(but==butR_)U_OUT_KONTR_MIN=(U_OUT_KONTR_MIN/5+1)*5;
X		else if(but==111)U_OUT_KONTR_MIN=(U_OUT_KONTR_MIN/5+1)*5;
N		else if(but==butL)U_OUT_KONTR_MIN--;
X		else if(but==247)U_OUT_KONTR_MIN--;
N		else if(but==butL_)U_OUT_KONTR_MIN=(U_OUT_KONTR_MIN/5-1)*5;
X		else if(but==119)U_OUT_KONTR_MIN=(U_OUT_KONTR_MIN/5-1)*5;
N		gran(&U_OUT_KONTR_MIN,10,3000);
N		lc640_write_int(EE_U_OUT_KONTR_MIN,U_OUT_KONTR_MIN);
X		lc640_write_int(0x10+100+184,U_OUT_KONTR_MIN);
N		speed=1;
N		}				
N
N
N	else if(sub_ind==2)
X	else if(a_ind . s_i==2)
N		{
N		if(but==butR)U_OUT_KONTR_DELAY++;
X		if(but==239)U_OUT_KONTR_DELAY++;
N	    else if(but==butR_)U_OUT_KONTR_DELAY+=2;
X	    else if(but==111)U_OUT_KONTR_DELAY+=2;
N	    else if(but==butL)U_OUT_KONTR_DELAY--;
X	    else if(but==247)U_OUT_KONTR_DELAY--;
N	    else if(but==butL_)U_OUT_KONTR_DELAY-=2;
X	    else if(but==119)U_OUT_KONTR_DELAY-=2;
N	    gran(&U_OUT_KONTR_DELAY,5,100);
N	    lc640_write_int(EE_U_OUT_KONTR_DELAY,U_OUT_KONTR_DELAY);
X	    lc640_write_int(0x10+100+186,U_OUT_KONTR_DELAY);
N	    speed=1;
N		}				
N
N
N/*	
N	int2lcd(U_BAT_KONTR_MAX,'!',1);
N	int2lcd(U_BAT_KONTR_MIN,'@',1);
N	int2lcd(U_BAT_KONTR_DELAY,'#',0);
N	*/
N
N	}
N
Nelse if(ind==iDop_rele_set)
Xelse if(a_ind . i==iDop_rele_set)
N	{
N	ret(1000);
N	if(but==butD)
X	if(but==251)
N		{
N		sub_ind+=2;
X		a_ind . s_i+=2;
N		gran_char(&sub_ind,0,2);
X		gran_char(&a_ind . s_i,0,2);
N		}
N	else if(but==butU)
X	else if(but==253)
N		{
N		sub_ind-=2;
X		a_ind . s_i-=2;
N		gran_char(&sub_ind,0,2);
X		gran_char(&a_ind . s_i,0,2);
N		}
N	else if(but==butD_)
X	else if(but==123)
N		{
N		sub_ind=2;
X		a_ind . s_i=2;
N		}
N	else if(sub_ind==2)
X	else if(a_ind . s_i==2)
N		{
N		if(but==butE)
X		if(but==254)
N			{
N			tree_down(0,0);
N			ret(0);
N			}
N		}
N	else if(sub_ind==0)
X	else if(a_ind . s_i==0)
N		{
N		if((but==butR)||(but==butR_))DOP_RELE_FUNC++;
X		if((but==239)||(but==111))DOP_RELE_FUNC++;
N		if((but==butL)||(but==butL_))DOP_RELE_FUNC--;
X		if((but==247)||(but==119))DOP_RELE_FUNC--;
N		gran(&DOP_RELE_FUNC,0,1);
N		lc640_write_int(EE_DOP_RELE_FUNC,DOP_RELE_FUNC);
X		lc640_write_int(0x10+100+188,DOP_RELE_FUNC);
N		speed=1;
N		}				
N	}
N
Nelse if (ind==iIps_Curr_Avg_Set)
Xelse if (a_ind . i==iIps_Curr_Avg_Set)
N	{
N     ret(1000);
N	if(but==butD)
X	if(but==251)
N		{
N		sub_ind++;
X		a_ind . s_i++;
N		sub_ind1=0;
X		a_ind . s_i1=0;
N		gran_char(&sub_ind,0,simax);
X		gran_char(&a_ind . s_i,0,simax);
N		}
N	else if(but==butU)
X	else if(but==253)
N		{
N		sub_ind--;
X		a_ind . s_i--;
N		sub_ind1=0;
X		a_ind . s_i1=0;
N		gran_char(&sub_ind,0,simax);
X		gran_char(&a_ind . s_i,0,simax);
N		}
N	else if(but==butD_)
X	else if(but==123)
N		{
N		sub_ind=simax;
X		a_ind . s_i=simax;
N		}			
N	else if(sub_ind==simax)
X	else if(a_ind . s_i==simax)
N		{
N		if(but==butE)tree_down(0,0);
X		if(but==254)tree_down(0,0);
N		}
N
N	else if(sub_ind==0)
X	else if(a_ind . s_i==0)
N		{
N		if(but==butE)
X		if(but==254)
N			{
N			if(ICA_EN)ICA_EN=0;
N			else ICA_EN=1;
N			lc640_write_int(EE_ICA_EN,ICA_EN);
X			lc640_write_int(0x10+350+6,ICA_EN);
N			}
N		}
N	else if(ICA_EN)
N		{
N		if(sub_ind==1)
X		if(a_ind . s_i==1)
N			{
N			if(but==butE)
X			if(but==254)
N				{
N				if(ICA_CH)ICA_CH=0;
N				else ICA_CH=1;
N				lc640_write_int(EE_ICA_CH,ICA_CH);
X				lc640_write_int(0x10+350+4,ICA_CH);
N				}
N			}
N		else if(ICA_CH==0)
N			{
N			if(sub_ind==2)
X			if(a_ind . s_i==2)
N				{
N				if((but==butR)||(but==butR_))
X				if((but==239)||(but==111))
N					{
N					ICA_MODBUS_ADDRESS++;
N					gran(&ICA_MODBUS_ADDRESS,1,254);
N					lc640_write_int(EE_ICA_MODBUS_ADDRESS,ICA_MODBUS_ADDRESS);
X					lc640_write_int(0x10+350+8,ICA_MODBUS_ADDRESS);
N					speed=1;
N					}
N				if((but==butL)||(but==butL_))
X				if((but==247)||(but==119))
N					{
N					ICA_MODBUS_ADDRESS--;
N					gran(&ICA_MODBUS_ADDRESS,1,254);
N					lc640_write_int(EE_ICA_MODBUS_ADDRESS,ICA_MODBUS_ADDRESS);
X					lc640_write_int(0x10+350+8,ICA_MODBUS_ADDRESS);
N					speed=1;
N					}
N				}
N			}
N
N		else if(ICA_CH==1)
N			{
N			if(sub_ind==2)
X			if(a_ind . s_i==2)
N				{
N				if((but==butE)||(but==butE_))
X				if((but==254)||(but==126))
N					{
N					sub_ind1++;
X					a_ind . s_i1++;
N					gran_ring_char(&sub_ind1,0,3);
X					gran_ring_char(&a_ind . s_i1,0,3);
N					}
N				else if(sub_ind1==0)
X				else if(a_ind . s_i1==0)
N					{
N					if((but==butR)||(but==butR_))
X					if((but==239)||(but==111))
N						{
N						ICA_MODBUS_TCP_IP1++;
N						gran_ring(&ICA_MODBUS_TCP_IP1,0,255);
N						lc640_write_int(EE_ICA_MODBUS_TCP_IP1,ICA_MODBUS_TCP_IP1);
X						lc640_write_int(0x10+350+10,ICA_MODBUS_TCP_IP1);
N						speed=1;
N						}
N					if((but==butL)||(but==butL_))
X					if((but==247)||(but==119))
N						{
N						ICA_MODBUS_TCP_IP1--;
N						gran(&ICA_MODBUS_TCP_IP1,0,255);
N						lc640_write_int(EE_ICA_MODBUS_TCP_IP1,ICA_MODBUS_TCP_IP1);
X						lc640_write_int(0x10+350+10,ICA_MODBUS_TCP_IP1);
N						speed=1;
N						}
N					}
N				else if(sub_ind1==1)
X				else if(a_ind . s_i1==1)
N					{
N					if((but==butR)||(but==butR_))
X					if((but==239)||(but==111))
N						{
N						ICA_MODBUS_TCP_IP2++;
N						gran_ring(&ICA_MODBUS_TCP_IP2,0,255);
N						lc640_write_int(EE_ICA_MODBUS_TCP_IP2,ICA_MODBUS_TCP_IP2);
X						lc640_write_int(0x10+350+12,ICA_MODBUS_TCP_IP2);
N						speed=1;
N						}
N					if((but==butL)||(but==butL_))
X					if((but==247)||(but==119))
N						{
N						ICA_MODBUS_TCP_IP2--;
N						gran(&ICA_MODBUS_TCP_IP2,0,255);
N						lc640_write_int(EE_ICA_MODBUS_TCP_IP2,ICA_MODBUS_TCP_IP2);
X						lc640_write_int(0x10+350+12,ICA_MODBUS_TCP_IP2);
N						speed=1;
N						}
N					}
N				else if(sub_ind1==2)
X				else if(a_ind . s_i1==2)
N					{
N					if((but==butR)||(but==butR_))
X					if((but==239)||(but==111))
N						{
N						ICA_MODBUS_TCP_IP3++;
N						gran_ring(&ICA_MODBUS_TCP_IP3,0,255);
N						lc640_write_int(EE_ICA_MODBUS_TCP_IP3,ICA_MODBUS_TCP_IP3);
X						lc640_write_int(0x10+350+14,ICA_MODBUS_TCP_IP3);
N						speed=1;
N						}
N					if((but==butL)||(but==butL_))
X					if((but==247)||(but==119))
N						{
N						ICA_MODBUS_TCP_IP3--;
N						gran(&ICA_MODBUS_TCP_IP3,0,255);
N						lc640_write_int(EE_ICA_MODBUS_TCP_IP3,ICA_MODBUS_TCP_IP3);
X						lc640_write_int(0x10+350+14,ICA_MODBUS_TCP_IP3);
N						speed=1;
N						}
N					}
N				else if(sub_ind1==3)
X				else if(a_ind . s_i1==3)
N					{
N					if((but==butR)||(but==butR_))
X					if((but==239)||(but==111))
N						{
N						ICA_MODBUS_TCP_IP4++;
N						gran_ring(&ICA_MODBUS_TCP_IP4,0,255);
N						lc640_write_int(EE_ICA_MODBUS_TCP_IP4,ICA_MODBUS_TCP_IP4);
X						lc640_write_int(0x10+350+16,ICA_MODBUS_TCP_IP4);
N						speed=1;
N						}
N					if((but==butL)||(but==butL_))
X					if((but==247)||(but==119))
N						{
N						ICA_MODBUS_TCP_IP4--;
N						gran(&ICA_MODBUS_TCP_IP4,0,255);
N						lc640_write_int(EE_ICA_MODBUS_TCP_IP4,ICA_MODBUS_TCP_IP4);
X						lc640_write_int(0x10+350+16,ICA_MODBUS_TCP_IP4);
N						speed=1;
N						}
N					}
N				}
N			if(sub_ind==3)
X			if(a_ind . s_i==3)
N				{
N				if((but==butR)||(but==butR_))
X				if((but==239)||(but==111))
N					{
N					ICA_MODBUS_TCP_UNIT_ID++;
N					gran(&ICA_MODBUS_TCP_UNIT_ID,1,254);
N					lc640_write_int(EE_ICA_MODBUS_TCP_UNIT_ID,ICA_MODBUS_TCP_UNIT_ID);
X					lc640_write_int(0x10+350+18,ICA_MODBUS_TCP_UNIT_ID);
N					speed=1;
N					}
N				if((but==butL)||(but==butL_))
X				if((but==247)||(but==119))
N					{
N					ICA_MODBUS_TCP_UNIT_ID--;
N					gran(&ICA_MODBUS_TCP_UNIT_ID,1,254);
N					lc640_write_int(EE_ICA_MODBUS_TCP_UNIT_ID,ICA_MODBUS_TCP_UNIT_ID);
X					lc640_write_int(0x10+350+18,ICA_MODBUS_TCP_UNIT_ID);
N					speed=1;
N					}
N				}
N			}
N		}
N
N
N  	} 
N
N		
N//but_an_end:
Nn_but=0;
W "main.c" 3069 14 variable "temp_SS" was declared but never referenced
N}
N
N//-----------------------------------------------
Nvoid watchdog_enable (void) 
N{
NLPC_WDT->WDTC=2000000;
X((LPC_WDT_TypeDef *) ((0x40000000UL) + 0x00000) )->WDTC=2000000;
NLPC_WDT->WDCLKSEL=0;
X((LPC_WDT_TypeDef *) ((0x40000000UL) + 0x00000) )->WDCLKSEL=0;
NLPC_WDT->WDMOD=3;
X((LPC_WDT_TypeDef *) ((0x40000000UL) + 0x00000) )->WDMOD=3;
NLPC_WDT->WDFEED=0xaa;
X((LPC_WDT_TypeDef *) ((0x40000000UL) + 0x00000) )->WDFEED=0xaa;
NLPC_WDT->WDFEED=0x55;
X((LPC_WDT_TypeDef *) ((0x40000000UL) + 0x00000) )->WDFEED=0x55;
N}
N
N//-----------------------------------------------
Nvoid watchdog_reset (void) 
N{
NLPC_WDT->WDFEED=0xaa;
X((LPC_WDT_TypeDef *) ((0x40000000UL) + 0x00000) )->WDFEED=0xaa;
NLPC_WDT->WDFEED=0x55;
X((LPC_WDT_TypeDef *) ((0x40000000UL) + 0x00000) )->WDFEED=0x55;
N}
N
N
N//***********************************************
N//***********************************************
N//***********************************************
N//***********************************************
N//***********************************************
Nvoid SysTick_Handler (void) 	 /* SysTick Interrupt Handler (1ms)    */
N{
N//sys_plazma++;
Nb2000Hz=1;
N
Nif(bTPS)
N	{
N	LPC_GPIO1->FIODIR|=(1UL<<26);
X	((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00020) )->FIODIR|=(1UL<<26);
N	LPC_GPIO1->FIOPIN^=(1UL<<26);
X	((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00020) )->FIOPIN^=(1UL<<26);
N	}
N
Nif(++t0cnt4>=2)
N	{
Nt0cnt4=0;
Nb1000Hz=1;
N
N	bFF=(char)(GET_REG(LPC_GPIO0->FIOPIN, 27, 1));
X	bFF=(char)(( (((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIOPIN & ((0xffffffff>>(32-1))<<27)) >> 27));
N	if(bFF!=bFF_) hz_out++;
N	bFF_=bFF;
N
N
Nif(++t0cnt5>=20)
N     {
N     t0cnt5=0;
N     b50Hz=1;
N     }
N     
Nif(++t0cnt>=10)
N     {
N     t0cnt=0;
N     b100Hz=1;
N
N     hz_out_cnt++;
N     if(hz_out_cnt>=500)
N	     {	
N	     hz_out_cnt=0;
N	     net_F=hz_out;
N	     hz_out=0;
N	     }
N
N     if(++t0cnt0>=10)
N	     {
N	     t0cnt0=0;
N	     b10Hz=1;
N		beep_drv();
N		if(main_10Hz_cnt<10000) main_10Hz_cnt++;
N	     }
N
N     if(t0cnt0==5)
N	     {
N		//beep_drv();
N	     }
N
N     if(++t0cnt1>=20)
N	     {
N	     t0cnt1=0;
N	     b5Hz=1;
N		if(bFL5)bFL5=0;
N		else bFL5=1;     
N	     }
N
N     if(++t0cnt2>=50)
N	     {
N	     t0cnt2=0;
N	     b2Hz=1;
N		if(bFL2)bFL2=0;
N		else bFL2=1;
N
N	     }         
N
N     if(++t0cnt3>=100)
N	     {
N	     t0cnt3=0;
N	     b1Hz=1;
N		if(main_1Hz_cnt<10000) main_1Hz_cnt++;
N		if(bFL)bFL=0;
N		else bFL=1;
N
N		t0cntMin++;
N		if(t0cntMin>=60)
N			{
N			t0cntMin=0;
N			b1min=1;
N			}
N	     }
N     }
N
N	}
N
N
N
N
N//LPC_GPIO0->FIOCLR|=0x00000001;
N  return;          
N
N
N
N//LPC_GPIO0->FIOCLR|=0x00000001;
N}
N
N
N//***********************************************
N__irq void timer0_interrupt(void) 
N{	
N/*if(BPS1_spa_leave)T0EMR_bit.EM1=0; 
Nelse T0EMR_bit.EM1=1;
Nif(BPS2_spa_leave)T0EMR_bit.EM3=0; 
Nelse T0EMR_bit.EM3=1;
NT0IR = 0xff;*/
N}
N
N//===============================================
N//===============================================
N//===============================================
N//===============================================
Nint main (void) 
N{
Nchar ind_reset_cnt=0;
N//long i;
N//char mac_adr[6] = { 0x00,0x73,0x04,50,60,70 };
N
N//i=200000;
N//while(--i){};
N
NSystemInit();
N
NbTPS=1;
N
NSysTick->LOAD = (SystemFrequency / 2000) - 1;
X((SysTick_Type *) ((0xE000E000UL) + 0x0010UL))->LOAD = (SystemFrequency / 2000) - 1;
NSysTick->CTRL = 0x07;
X((SysTick_Type *) ((0xE000E000UL) + 0x0010UL))->CTRL = 0x07;
N
N//init_timer( 0,SystemFrequency/2000/4 - 1 ); // 1ms	
N//enable_timer( 0 );
N
N//rs232_data_out_1();
N
N
N
NSET_REG(LPC_GPIO0->FIODIR, 0, 27, 1);
X((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIODIR = ( (((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIODIR & ~((0xffffffff>>(32-1))<<27)) | (0 << 27) );
NSET_REG(LPC_GPIO2->FIODIR, 1, 7, 1);
X((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00040) )->FIODIR = ( (((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00040) )->FIODIR & ~((0xffffffff>>(32-1))<<7)) | (1 << 7) );
NSET_REG(LPC_GPIO2->FIODIR, 1, 8, 1);
X((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00040) )->FIODIR = ( (((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00040) )->FIODIR & ~((0xffffffff>>(32-1))<<8)) | (1 << 8) );
N//LPC_GPIO1->FIODIR  |= 1<<27;                
N	;
N//FIO1MASK = 0x00000000;	 
N//LPC_GPIO0->FIODIR  |= 1<<27;
N//LPC_GPIO0->FIOSET  |= 1<<27;
N
N///SET_REG(LPC_GPIO0->FIODIR,0,10,1); //вход частоты 
N#ifdef UKU2071x
N//SET_REG(LPC_GPIO3->FIODIR,1,SHIFT_REL_AV_NET,1);
N//SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);  // реле аварии сети под ток
N#else 
S//SET_REG(LPC_GPIO3->FIODIR,1,SHIFT_REL_AV_NET,1);
S//SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);  // реле аварии сети под ток
N#endif
N
N
N
Nad7705_reset();
Ndelay_ms(20);
X{long xx; xx=(unsigned long)20 * 12000UL; while(xx)xx--;};
N
Nad7705_write(0x21);
Nad7705_write(BIN8(1101)); 
Xad7705_write((((0x1101) | 0x1101>>3 | 0x1101>>6 | 0x1101>>9) & 0xf | ((0x1101) | 0x1101>>3 | 0x1101>>6 | 0x1101>>9)>>12 & 0xf0)); 
Nad7705_write(0x11);
Nad7705_write(0x44);
N
N
Nad7705_buff[0][1]=0x7fff;
Nad7705_buff[0][2]=0x7fff;
Nad7705_buff[0][3]=0x7fff;
Nad7705_buff[0][4]=0x7fff;
Nad7705_buff[0][5]=0x7fff;
Nad7705_buff[0][6]=0x7fff;
Nad7705_buff[0][7]=0x7fff;
Nad7705_buff[0][8]=0x7fff;
Nad7705_buff[0][9]=0x7fff;
Nad7705_buff[0][10]=0x7fff;
Nad7705_buff[0][11]=0x7fff;
Nad7705_buff[0][12]=0x7fff;
Nad7705_buff[0][13]=0x7fff;
Nad7705_buff[0][14]=0x7fff;
Nad7705_buff[0][15]=0x7fff;
Nad7705_buff[1][1]=0x7fff;
Nad7705_buff[1][2]=0x7fff;
Nad7705_buff[1][3]=0x7fff;
Nad7705_buff[1][4]=0x7fff;
Nad7705_buff[1][5]=0x7fff;
Nad7705_buff[1][6]=0x7fff;
Nad7705_buff[1][7]=0x7fff;
Nad7705_buff[1][8]=0x7fff;
Nad7705_buff[1][9]=0x7fff;
Nad7705_buff[1][10]=0x7fff;
Nad7705_buff[1][11]=0x7fff;
Nad7705_buff[1][12]=0x7fff;
Nad7705_buff[1][13]=0x7fff;
Nad7705_buff[1][14]=0x7fff;
Nad7705_buff[1][15]=0x7fff;
N
Nad7705_buff_[0]=0x7fff;
Nad7705_buff_[1]=0x7fff;
N
N/*
Nad7705_reset();
Ndelay_ms(20);
N
Nad7705_write(0x20);
Nad7705_write(BIN8(1101)); 
Nad7705_write(0x10);
Nad7705_write(0x44);
N
Nad7705_reset();
Ndelay_ms(20);  
N
Nad7705_write(0x20);
Nad7705_write(BIN8(1101)); 
Nad7705_write(0x10);
Nad7705_write(0x44); 
N
Ndelay_ms(20); */
N
N
N
N
Nlcd_init();  
Nlcd_on();
Nlcd_clear();
N		
N///LPC_GPIO4->FIODIR |= (1<<29);           /* LEDs on PORT2 defined as Output    */
Nrtc_init();
N///pwm_init();
Nind=iMn;
Xa_ind . i=iMn;
N
N//snmp_plazma=15;
N
N
N//#ifdef ETHISON
N//mac_adr[5]=*((char*)&AUSW_MAIN_NUMBER);
N//mac_adr[4]=*(((char*)&AUSW_MAIN_NUMBER)+1);
N//mac_adr[3]=*(((char*)&AUSW_MAIN_NUMBER)+2);
N//mem_copy (own_hw_adr, mac_adr, 6);
N
N
N//if(lc640_read_int(EE_ETH_IS_ON)==1)
N	//{
N
N	//bitmap_hndl();
N	//lcd_out(lcd_bitmap);
N	//init_TcpNet ();
N
N	//init_ETH();
N	//mem_copy (&localm[NETIF_ETH], &ip_config, sizeof(ip_config));
N
N//	}
N//#endif
N//event2snmp(2);
N
N
N//LPC_GPIO0->FIODIR |= (0x60000000);
N
Nadc_init();
N
NLPC_GPIO0->FIODIR|=(1<<11);
X((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIODIR|=(1<<11);
NLPC_GPIO0->FIOSET|=(1<<11);
X((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIOSET|=(1<<11);
N
N
Nlc640_write_int(100,134);
N
N
N
N
Nmemo_read();
N
N
N
Nwatchdog_enable();
N
N
Nsc16is700_init((uint32_t)(9600));
N
N
N//lc640_write_int(EE_RELE_SET_MASK0,25);
N  		
Nwhile (1)  
N	{
N	//bTPS=0; 
N     //timer_poll ();
N     //main_TcpNet ();
N
N	//watchdog_reset();
N
N
N
N/*	if(bRXIN0) 
N		{
N		bRXIN0=0;
N	
N		uart_in0();
N		}  */
N
N/*	if(bRXIN_SC16IS700) 
N		{
N		bRXIN_SC16IS700=0;
N	
N		uart_in_SC16IS700();
N		}*/
N
N	/*
N	if(bRXIN1) 
N		{
N		bRXIN1=0;
N	
N		uart_in1();
N		}*/ 
N     if(b10000Hz)
N		{
N		b10000Hz=0; 
N		
N
N		}
N
N     if(b2000Hz)
N		{
N
N		if(adc_window_cnt<200)adc_window_cnt++;
N
N		b2000Hz=0; 
N		adc_drv7();
N		
N		}
N
N	if(b1000Hz)
N		{
N		b1000Hz=0;
N
N
N		#ifdef SC16IS740_UART
N		sc16is700_uart_hndl();
N		#endif		
N		}
N	
N	if(b100Hz)
N		{
N		b100Hz=0;
N
N		//LPC_GPIO2->FIODIR|=(1<<7);
N		//LPC_GPIO2->FIOPIN^=(1<<7);		
N
N		if((!bRESET_INT_WDT)&&(!bRESET_EXT_WDT))but_drv();
N		but_an();
N		}
N		 
N	if(b50Hz)
N		{
N		b50Hz=0;
N		//#ifdef MCP2515_CAN
N		//net_drv_mcp2515();
N		//#endif
N		//#ifndef MCP2515_CAN
N		net_drv();
N		//#endif
N		}
N
N	if(b10Hz)
N		{
N//		char i;
N
N
N		b10Hz=0;
N				
N
N
N		
N		ind_hndl(); 
N		#ifndef SIMULATOR
N		bitmap_hndl();
N		if(!bRESET_EXT_WDT)
N			{
N			lcd_out(lcd_bitmap);
N			}
N		#endif
N		//ad7705_drv();
N		//ad7705_write(0x20);
N
N		adc_window_cnt=0;  
N
N		ret_hndl();
N		ret_ind_hndl();  
N		mess_hndl();
N
N					  
N
N		//ret_hndl();
N		//ext_drv();
N		//avt_hndl();
N
N		rele_in_drv();
N		}
N
N	if(b5Hz)
N		{
N		b5Hz=0;
N
N		ad7705_drv();
N  		memo_read();
N		LPC_GPIO1->FIODIR|=(1UL<<26);
X		((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00020) )->FIODIR|=(1UL<<26);
N		matemat();
N		
N		rele_drv();
N		
N		//rele_hndl();
N		//if(!bRESET_EXT_WDT)avar_hndl();
N		//snmp_data();
N
N		transmit_hndl();
N  		}
N
N	if(b2Hz)
N		{
N		b2Hz=0;
N
N				//uart_out_adr1(dig,150);
N		//sc16is700_wr_buff(CS16IS7xx_THR, 20);
N
N		//sc16is700_wr_byte(CS16IS7xx_LCR, 0x80);
N		//can1_out(cnt_net_drv,cnt_net_drv,GETTM,bps[cnt_net_drv]._flags_tu,*((char*)(&bps[cnt_net_drv]._vol_u)),*((char*)((&bps[cnt_net_drv]._vol_u))+1),*((char*)(&bps[cnt_net_drv]._vol_i)),*((char*)((&bps[cnt_net_drv]._vol_i))+1));
N  		}
N
N	if(b1Hz)
N		{
N		b1Hz=0;
N		if(!bRESET_INT_WDT)
N			{
N			watchdog_reset();
N			}
N		//can1_out_adr((char*)&net_U,21);
N
N		samokalibr_hndl();
N
N		beep_hndl();
N
N	
N
N		plazma_plazma_plazma++;
N
N		if(++ind_reset_cnt>=60)
N			{
N			ind_reset_cnt=0;
N			lcd_init();
N			lcd_on();
N			lcd_clear();
N			}
N               
N
N
N		  
N		if(t_ext_can_nd<10) t_ext_can_nd++;
N		
N		//if(main_1Hz_cnt<200)main_1Hz_cnt++;
N
N
N/*		#ifdef UKU_220_IPS_TERMOKOMPENSAT
N		if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))rs232_data_out_tki();
N		else if(AUSW_MAIN==22010)rs232_data_out_1();
N		else rs232_data_out();
N		#endif */	
N 
N		//modbus_registers_transmit(MODBUS_ADRESS,4,0,5);
N		
N	/*	putchar2(0x56);
N		putchar2(0x57);
N		putchar2(0x58);
N		putchar2(0x59);
N		putchar2(0x5a);*/
N
N
N		//outVoltContrHndl();
N
N		
N		
N
N
N
N
N		//printf("a %s \r\n","abc");
N		//printf("a %s \r\n","abc");
N		
N		}
N	if(b1min)
N		{
N		b1min=0;
N
N		}
N
N	}
N}
