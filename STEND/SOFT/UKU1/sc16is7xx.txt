; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\sc16is7xx.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\sc16is7xx.d --feedback=.\EXE\STEND.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_VD -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x --omf_browse=.\EXE\sc16is7xx.crf sc16is7xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sc16is700_spi_init PROC
;;;18     //настройка SPI1
;;;19     void sc16is700_spi_init(void)
000000  488a              LDR      r0,|L1.556|
;;;20     {
;;;21     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  6801              LDR      r1,[r0,#0]
000004  f0210103          BIC      r1,r1,#3
000008  6001              STR      r1,[r0,#0]
;;;22     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  6801              LDR      r1,[r0,#0]
00000c  f0414140          ORR      r1,r1,#0xc0000000
000010  6001              STR      r1,[r0,#0]
;;;23     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  6841              LDR      r1,[r0,#4]
000014  f0210103          BIC      r1,r1,#3
000018  6041              STR      r1,[r0,#4]
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  6841              LDR      r1,[r0,#4]
00001c  f041010c          ORR      r1,r1,#0xc
000020  6041              STR      r1,[r0,#4]
;;;25     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  6841              LDR      r1,[r0,#4]
000024  f0410130          ORR      r1,r1,#0x30
000028  6041              STR      r1,[r0,#4]
;;;26     /*
;;;27     S1SPCCR=100;
;;;28     S1SPCR=0x3f; */
;;;29     
;;;30     LPC_SPI->SPCCR=20;
00002a  4881              LDR      r0,|L1.560|
00002c  f04f0114          MOV      r1,#0x14
000030  60c1              STR      r1,[r0,#0xc]
;;;31     LPC_SPI->SPCR=0x20;
000032  f04f0120          MOV      r1,#0x20
000036  6001              STR      r1,[r0,#0]
;;;32     }
000038  4770              BX       lr
;;;33     
                          ENDP

                  sc16is700_wr_buff PROC
;;;35     //Отправка num байт из программного буфера передачи в sc16is700
;;;36     void sc16is700_wr_buff(char reg_num,char num)
00003a  e92d41f0          PUSH     {r4-r8,lr}
;;;37     {
00003e  4603              MOV      r3,r0
000040  460e              MOV      r6,r1
;;;38     short i;
;;;39     sc16is700_spi_init();
000042  f7fffffe          BL       sc16is700_spi_init
;;;40     delay_us(2);
000046  f04f0218          MOV      r2,#0x18
                  |L1.74|
00004a  f1a20201          SUB      r2,r2,#1
00004e  2a00              CMP      r2,#0
000050  d1fb              BNE      |L1.74|
;;;41     sc16is700_CS_ON 
000052  4f78              LDR      r7,|L1.564|
000054  6838              LDR      r0,[r7,#0]
000056  f0400001          ORR      r0,r0,#1
00005a  6038              STR      r0,[r7,#0]
00005c  69f8              LDR      r0,[r7,#0x1c]
00005e  f0400001          ORR      r0,r0,#1
000062  61f8              STR      r0,[r7,#0x1c]
;;;42     spi1((reg_num&0x0f)<<3);
000064  ea4f7003          LSL      r0,r3,#28
000068  ea4f6050          LSR      r0,r0,#25
00006c  f7fffffe          BL       spi1
;;;43     for (i=0;i<num;i++)spi1(tx_buffer_sc16is700[i]);
000070  f04f0400          MOV      r4,#0
000074  4d70              LDR      r5,|L1.568|
000076  e005              B        |L1.132|
                  |L1.120|
000078  5d28              LDRB     r0,[r5,r4]
00007a  f7fffffe          BL       spi1
00007e  f1040401          ADD      r4,r4,#1
000082  b224              SXTH     r4,r4
                  |L1.132|
000084  42b4              CMP      r4,r6
000086  dbf7              BLT      |L1.120|
;;;44     sc16is700_CS_OFF
000088  6838              LDR      r0,[r7,#0]
00008a  f0400001          ORR      r0,r0,#1
00008e  6038              STR      r0,[r7,#0]
000090  69b8              LDR      r0,[r7,#0x18]
000092  f0400001          ORR      r0,r0,#1
000096  61b8              STR      r0,[r7,#0x18]
;;;45     }
000098  e8bd81f0          POP      {r4-r8,pc}
;;;46     
                          ENDP

                  sc16is700_wr_byte PROC
;;;47     void sc16is700_wr_byte(char reg_num,char data)
00009c  b570              PUSH     {r4-r6,lr}
;;;48     {
00009e  4602              MOV      r2,r0
0000a0  460d              MOV      r5,r1
;;;49     sc16is700_spi_init();
0000a2  f7fffffe          BL       sc16is700_spi_init
;;;50     delay_us(2);
0000a6  f04f0018          MOV      r0,#0x18
                  |L1.170|
0000aa  f1a00001          SUB      r0,r0,#1
0000ae  2800              CMP      r0,#0
0000b0  d1fb              BNE      |L1.170|
;;;51     sc16is700_CS_ON
0000b2  4c60              LDR      r4,|L1.564|
0000b4  6820              LDR      r0,[r4,#0]
0000b6  f0400001          ORR      r0,r0,#1
0000ba  6020              STR      r0,[r4,#0]
0000bc  69e0              LDR      r0,[r4,#0x1c]
0000be  f0400001          ORR      r0,r0,#1
0000c2  61e0              STR      r0,[r4,#0x1c]
;;;52     spi1((reg_num&0x0f)<<3);
0000c4  ea4f7002          LSL      r0,r2,#28
0000c8  ea4f6050          LSR      r0,r0,#25
0000cc  f7fffffe          BL       spi1
;;;53     spi1(data);
0000d0  4628              MOV      r0,r5
0000d2  f7fffffe          BL       spi1
;;;54     sc16is700_CS_OFF
0000d6  6820              LDR      r0,[r4,#0]
0000d8  f0400001          ORR      r0,r0,#1
0000dc  6020              STR      r0,[r4,#0]
0000de  69a0              LDR      r0,[r4,#0x18]
0000e0  f0400001          ORR      r0,r0,#1
0000e4  61a0              STR      r0,[r4,#0x18]
;;;55     }
0000e6  bd70              POP      {r4-r6,pc}
;;;56     
                          ENDP

                  sc16is700_rd_byte PROC
;;;57     
;;;58     char sc16is700_rd_byte(char reg_num)
0000e8  b510              PUSH     {r4,lr}
;;;59     {
0000ea  4602              MOV      r2,r0
;;;60     char out;
;;;61     sc16is700_spi_init();
0000ec  f7fffffe          BL       sc16is700_spi_init
;;;62     delay_us(2);
0000f0  f04f0118          MOV      r1,#0x18
                  |L1.244|
0000f4  f1a10101          SUB      r1,r1,#1
0000f8  2900              CMP      r1,#0
0000fa  d1fb              BNE      |L1.244|
;;;63     sc16is700_CS_ON
0000fc  4c4d              LDR      r4,|L1.564|
0000fe  6820              LDR      r0,[r4,#0]
000100  f0400001          ORR      r0,r0,#1
000104  6020              STR      r0,[r4,#0]
000106  69e0              LDR      r0,[r4,#0x1c]
000108  f0400001          ORR      r0,r0,#1
00010c  61e0              STR      r0,[r4,#0x1c]
;;;64     spi1(((reg_num&0x0f)<<3)|0x80);
00010e  f002000f          AND      r0,r2,#0xf
000112  f04f0180          MOV      r1,#0x80
000116  ea4100c0          ORR      r0,r1,r0,LSL #3
00011a  f7fffffe          BL       spi1
;;;65     out = spi1(0xff);
00011e  20ff              MOVS     r0,#0xff
000120  f7fffffe          BL       spi1
;;;66     sc16is700_CS_OFF
000124  6821              LDR      r1,[r4,#0]
000126  f0410101          ORR      r1,r1,#1
00012a  6021              STR      r1,[r4,#0]
00012c  69a1              LDR      r1,[r4,#0x18]
00012e  f0410101          ORR      r1,r1,#1
000132  61a1              STR      r1,[r4,#0x18]
;;;67     return out;
;;;68     }
000134  bd10              POP      {r4,pc}
;;;69     
                          ENDP

                  sc16is700_init PROC
;;;89     
;;;90     void sc16is700_init(uint32_t baudrate)
000136  b570              PUSH     {r4-r6,lr}
;;;91     {
;;;92     
;;;93     unsigned char baud_h,baud_l;
;;;94     
;;;95     baud_h = (char)((10000000U/16U/baudrate)>>8);
000138  4940              LDR      r1,|L1.572|
00013a  fbb1f0f0          UDIV     r0,r1,r0
00013e  f3c02407          UBFX     r4,r0,#8,#8
;;;96     baud_l = (char)((10000000U/16U/baudrate)); 
000142  b2c5              UXTB     r5,r0
;;;97     
;;;98     sc16is700_wr_byte(CS16IS7xx_LCR, 0x80);
000144  f04f0180          MOV      r1,#0x80
000148  f04f0003          MOV      r0,#3
00014c  f7fffffe          BL       sc16is700_wr_byte
;;;99     sc16is700_wr_byte(CS16IS7xx_DLL, baud_l);
000150  4629              MOV      r1,r5
000152  2000              MOVS     r0,#0
000154  f7fffffe          BL       sc16is700_wr_byte
;;;100    sc16is700_wr_byte(CS16IS7xx_DLH, baud_h);
000158  4621              MOV      r1,r4
00015a  2001              MOVS     r0,#1
00015c  f7fffffe          BL       sc16is700_wr_byte
;;;101    sc16is700_wr_byte(CS16IS7xx_LCR, 0xBF);
000160  21bf              MOVS     r1,#0xbf
000162  2003              MOVS     r0,#3
000164  f7fffffe          BL       sc16is700_wr_byte
;;;102    sc16is700_wr_byte(CS16IS7xx_EFR, 0X10);
000168  2110              MOVS     r1,#0x10
00016a  2002              MOVS     r0,#2
00016c  f7fffffe          BL       sc16is700_wr_byte
;;;103    sc16is700_wr_byte(CS16IS7xx_LCR, 0x03);
000170  2103              MOVS     r1,#3
000172  4608              MOV      r0,r1
000174  f7fffffe          BL       sc16is700_wr_byte
;;;104    sc16is700_wr_byte(CS16IS7xx_FCR, 0x06);
000178  2106              MOVS     r1,#6
00017a  2002              MOVS     r0,#2
00017c  f7fffffe          BL       sc16is700_wr_byte
;;;105    sc16is700_wr_byte(CS16IS7xx_FCR, 0x01);
000180  2101              MOVS     r1,#1
000182  2002              MOVS     r0,#2
000184  f7fffffe          BL       sc16is700_wr_byte
;;;106    sc16is700_wr_byte(CS16IS7xx_EFCR, 0X30);
000188  e8bd4070          POP      {r4-r6,lr}
00018c  2130              MOVS     r1,#0x30
00018e  200f              MOVS     r0,#0xf
000190  e7fe              B        sc16is700_wr_byte
;;;107    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;108    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;109    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;110    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;111    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;112    }
;;;113    
                          ENDP

                  putchar_sc16is700 PROC
;;;132    //Посылка байта через sc16is700
;;;133    void putchar_sc16is700(char out_byte)
000192  4a2b              LDR      r2,|L1.576|
;;;134    {
;;;135    tx_buffer_sc16is700[tx_wr_index_sc16is700]=out_byte;
000194  4b28              LDR      r3,|L1.568|
000196  7891              LDRB     r1,[r2,#2]  ; tx_wr_index_sc16is700
000198  5458              STRB     r0,[r3,r1]
;;;136    if (++tx_wr_index_sc16is700 == TX_BUFFER_SIZE_SC16IS700) tx_wr_index_sc16is700=0;
00019a  1c49              ADDS     r1,r1,#1
00019c  b2c8              UXTB     r0,r1
00019e  7090              STRB     r0,[r2,#2]
0001a0  2820              CMP      r0,#0x20
0001a2  d102              BNE      |L1.426|
0001a4  f04f0000          MOV      r0,#0
0001a8  7090              STRB     r0,[r2,#2]
                  |L1.426|
;;;137    }
0001aa  4770              BX       lr
;;;138    
                          ENDP

                  sc16is700_uart_hndl PROC
;;;141    //Обработчик sc16is700
;;;142    void sc16is700_uart_hndl(void)
0001ac  b570              PUSH     {r4-r6,lr}
;;;143    {
;;;144    
;;;145    sc16is700ByteAvailable=sc16is700_rd_byte(CS16IS7xx_RXLVL); //Читаем состояние ФИФО приема микросхемы
0001ae  2009              MOVS     r0,#9
0001b0  f7fffffe          BL       sc16is700_rd_byte
0001b4  4d22              LDR      r5,|L1.576|
0001b6  7028              STRB     r0,[r5,#0]
;;;146    
;;;147    if(sc16is700ByteAvailable) //Если в приемном ФИФО	микросхемы есть данные
0001b8  b178              CBZ      r0,|L1.474|
;;;148    	{
;;;149    	char i;
;;;150    	for(i=0;(i<sc16is700ByteAvailable)&&(i<5);i++) //Читаем их пачками не больше 5 в программный буфер модбас
0001ba  f04f0400          MOV      r4,#0
0001be  e007              B        |L1.464|
                  |L1.448|
;;;151    		{
;;;152    		if(!sc16is700RecieveDisableFlag)
0001c0  79a8              LDRB     r0,[r5,#6]  ; sc16is700RecieveDisableFlag
0001c2  b110              CBZ      r0,|L1.458|
;;;153    			{
;;;154    			//modbus_rx_buffer[modbus_rx_buffer_ptr]=sc16is700_rd_byte(CS16IS7xx_RHR);
;;;155    			//modbus_rx_buffer_ptr++;
;;;156    			//modbus_timeout_cnt=0;   //Запускаем таймер опознавания конца посылки 
;;;157    			//pvlk++;
;;;158    			}
;;;159    		else sc16is700_rd_byte(CS16IS7xx_RHR);
0001c4  2000              MOVS     r0,#0
0001c6  f7fffffe          BL       sc16is700_rd_byte
                  |L1.458|
0001ca  f1040401          ADD      r4,r4,#1              ;150
0001ce  b2e4              UXTB     r4,r4                 ;150
                  |L1.464|
0001d0  7828              LDRB     r0,[r5,#0]            ;150  ; sc16is700ByteAvailable
0001d2  4284              CMP      r4,r0                 ;150
0001d4  d201              BCS      |L1.474|
0001d6  2c05              CMP      r4,#5                 ;150
0001d8  d3f2              BCC      |L1.448|
                  |L1.474|
;;;160    		}
;;;161    	}
;;;162    
;;;163    
;;;164    
;;;165    sc16is700TxFifoLevel=sc16is700_rd_byte(CS16IS7xx_TXLVL);//Читаем состояние ФИФО передачи
0001da  2008              MOVS     r0,#8
0001dc  f7fffffe          BL       sc16is700_rd_byte
0001e0  7068              STRB     r0,[r5,#1]
0001e2  2400              MOVS     r4,#0                 ;145
;;;166    
;;;167    if(sc16is700TxFifoLevel!=64) sc16is700TxFifoEmptyCnt=0;//Если ФИФО не пустой обнуляем счетчик свободности ФИФО передачи
0001e4  2840              CMP      r0,#0x40
0001e6  d000              BEQ      |L1.490|
0001e8  712c              STRB     r4,[r5,#4]
                  |L1.490|
;;;168    if(sc16is700TxFifoLevel==64) //если ФИФО пустой то плюсуем счетчик если он меньше константы
0001ea  d105              BNE      |L1.504|
;;;169    	{
;;;170    	if(sc16is700TxFifoEmptyCnt<SC16IS700TXFIFOEMPTYCNTMAX)sc16is700TxFifoEmptyCnt++;
0001ec  7928              LDRB     r0,[r5,#4]  ; sc16is700TxFifoEmptyCnt
0001ee  2805              CMP      r0,#5
0001f0  d202              BCS      |L1.504|
0001f2  f1000001          ADD      r0,r0,#1
0001f6  7128              STRB     r0,[r5,#4]
                  |L1.504|
;;;171    	}
;;;172    if(sc16is700TxFifoEmptyCnt==SC16IS700TXFIFOEMPTYCNTMAX) sc16is700TxPossibleFlag=1;//Если счетчик сравнялся с константой поднимаем флаг возможности передачи
0001f8  7929              LDRB     r1,[r5,#4]  ; sc16is700TxFifoEmptyCnt
0001fa  2001              MOVS     r0,#1
0001fc  2905              CMP      r1,#5
0001fe  d013              BEQ      |L1.552|
;;;173    else sc16is700TxPossibleFlag=0;//Если не сравнялся - флаг сбрасываем.
000200  716c              STRB     r4,[r5,#5]
                  |L1.514|
;;;174    
;;;175    
;;;176    if((tx_wr_index_sc16is700)&&(tx_wr_index_sc16is700!=tx_rd_index_sc16is700)) //Если программный буфер передачи не пуст
000202  78a9              LDRB     r1,[r5,#2]  ; tx_wr_index_sc16is700
000204  b149              CBZ      r1,|L1.538|
000206  78ea              LDRB     r2,[r5,#3]  ; tx_rd_index_sc16is700
000208  4291              CMP      r1,r2
00020a  d006              BEQ      |L1.538|
;;;177    	{
;;;178    	if(sc16is700TxPossibleFlag)//проверяем возможность передачи
00020c  796a              LDRB     r2,[r5,#5]  ; sc16is700TxPossibleFlag
00020e  b122              CBZ      r2,|L1.538|
;;;179    		{
;;;180    		//char i;
;;;181    		//for(;tx_rd_index_sc16is700++;tx_rd_index_sc16is700<=tx_wr_index_sc16is700)
;;;182    			//{
;;;183    		sc16is700RecieveDisableFlag=1;
000210  71a8              STRB     r0,[r5,#6]
;;;184    		sc16is700_wr_buff(CS16IS7xx_THR, tx_wr_index_sc16is700);
000212  2000              MOVS     r0,#0
000214  f7fffffe          BL       sc16is700_wr_buff
;;;185    			//}
;;;186    		tx_wr_index_sc16is700=0;
000218  70ac              STRB     r4,[r5,#2]
                  |L1.538|
;;;187    		}
;;;188    	}
;;;189    
;;;190    if((sc16is700_rd_byte(CS16IS7xx_LSR))&0x40)	sc16is700RecieveDisableFlag=0;
00021a  2005              MOVS     r0,#5
00021c  f7fffffe          BL       sc16is700_rd_byte
000220  0640              LSLS     r0,r0,#25
000222  d500              BPL      |L1.550|
000224  71ac              STRB     r4,[r5,#6]
                  |L1.550|
;;;191    
;;;192    
;;;193    }
000226  bd70              POP      {r4-r6,pc}
                  |L1.552|
000228  7168              STRB     r0,[r5,#5]            ;172
00022a  e7ea              B        |L1.514|
                          ENDP

                  |L1.556|
                          DCD      0x4002c000
                  |L1.560|
                          DCD      0x40020000
                  |L1.564|
                          DCD      0x2009c000
                  |L1.568|
                          DCD      ||.bss||
                  |L1.572|
                          DCD      0x00098968
                  |L1.576|
                          DCD      ||.data||

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  sc16is700_init_ PROC
;;;18     //настройка SPI1
;;;19     void sc16is700_spi_init(void)
000000  b510              PUSH     {r4,lr}
;;;20     {
;;;21     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  2180              MOVS     r1,#0x80
000004  2003              MOVS     r0,#3
000006  f7fffffe          BL       sc16is700_wr_byte
;;;22     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  2141              MOVS     r1,#0x41
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       sc16is700_wr_byte
;;;23     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  2100              MOVS     r1,#0
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       sc16is700_wr_byte
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  21bf              MOVS     r1,#0xbf
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       sc16is700_wr_byte
;;;25     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  2110              MOVS     r1,#0x10
000024  2002              MOVS     r0,#2
000026  f7fffffe          BL       sc16is700_wr_byte
;;;26     /*
;;;27     S1SPCCR=100;
;;;28     S1SPCR=0x3f; */
;;;29     
;;;30     LPC_SPI->SPCCR=20;
00002a  2103              MOVS     r1,#3
00002c  4608              MOV      r0,r1
00002e  f7fffffe          BL       sc16is700_wr_byte
;;;31     LPC_SPI->SPCR=0x20;
000032  2106              MOVS     r1,#6
000034  2002              MOVS     r0,#2
000036  f7fffffe          BL       sc16is700_wr_byte
;;;32     }
00003a  2101              MOVS     r1,#1
00003c  2002              MOVS     r0,#2
00003e  f7fffffe          BL       sc16is700_wr_byte
000042  2130              MOVS     r1,#0x30
000044  e8bd4010          POP      {r4,lr}
000048  200f              MOVS     r0,#0xf
00004a  f7ffbffe          B.W      sc16is700_wr_byte
;;;33     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  tx_buffer_sc16is700
                          %        32

                          AREA ||.data||, DATA, ALIGN=0

                  sc16is700ByteAvailable
000000  00                DCB      0x00
                  sc16is700TxFifoLevel
000001  00                DCB      0x00
                  tx_wr_index_sc16is700
000002  00                DCB      0x00
                  tx_rd_index_sc16is700
000003  00                DCB      0x00
                  sc16is700TxFifoEmptyCnt
000004  00                DCB      0x00
                  sc16is700TxPossibleFlag
000005  00                DCB      0x00
                  sc16is700RecieveDisableFlag
000006  00                DCB      0x00
