; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\ret.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\ret.d --feedback=.\EXE\STEND.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_VD -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x --omf_browse=.\EXE\ret.crf ret.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ret_ind PROC
;;;12     //-----------------------------------------------
;;;13     void ret_ind(char r_c,char r_s)
000000  4a11              LDR      r2,|L1.72|
;;;14     {
;;;15     retcnt=r_c;
000002  6090              STR      r0,[r2,#8]  ; retcnt
;;;16     ret_step=r_s;
000004  7011              STRB     r1,[r2,#0]
;;;17     //retsub=r_s;
;;;18     }    
000006  4770              BX       lr
;;;19     
                          ENDP

                  ret_ind_hndl PROC
;;;20     //-----------------------------------------------
;;;21     void ret_ind_hndl(void)
000008  4a0f              LDR      r2,|L1.72|
;;;22     {
;;;23     if(retcnt)
00000a  6890              LDR      r0,[r2,#8]  ; retcnt
00000c  2800              CMP      r0,#0
00000e  d007              BEQ      |L1.32|
;;;24     	{
;;;25     	if((--retcnt)==0)
000010  1e40              SUBS     r0,r0,#1
000012  6090              STR      r0,[r2,#8]  ; retcnt
000014  d104              BNE      |L1.32|
;;;26     		{
;;;27     		tree_down(ret_step,0);
000016  7810              LDRB     r0,[r2,#0]  ; ret_step
000018  2100              MOVS     r1,#0
00001a  b240              SXTB     r0,r0
00001c  f7ffbffe          B.W      tree_down
                  |L1.32|
;;;28             }
;;;29         }
;;;30     }  
000020  4770              BX       lr
;;;31     
                          ENDP

                  ||ret|| PROC
;;;41     //-----------------------------------------------
;;;42     void ret_ind_sec_hndl(void)
;;;43     {
;;;44     if(retcntsec)
;;;45      	{
;;;46     	if((--retcntsec)==0)
;;;47     	 	{
;;;48      		ind=(i_enum)retindsec;
;;;49      		sub_ind=0;
;;;50       		f0=0;
;;;51        		fc0=0;
;;;52        		f1=0;
;;;53        		fc1=0; 		
;;;54     	 	}
;;;55        	}		
;;;56     }
000022  4909              LDR      r1,|L1.72|
000024  80c8              STRH     r0,[r1,#6]
000026  4770              BX       lr
;;;57     
                          ENDP

                  ret_hndl PROC
;;;64     //-----------------------------------------------
;;;65     void ret_hndl(void)
000028  4907              LDR      r1,|L1.72|
;;;66     {
;;;67     if(ret_duty)
00002a  f9b10006          LDRSH    r0,[r1,#6]  ; ret_duty
00002e  2800              CMP      r0,#0
000030  d009              BEQ      |L1.70|
;;;68          {
;;;69          ret_duty--;
000032  f1a00001          SUB      r0,r0,#1
000036  b200              SXTH     r0,r0
000038  80c8              STRH     r0,[r1,#6]
;;;70          if(!ret_duty)
00003a  2800              CMP      r0,#0
00003c  d103              BNE      |L1.70|
;;;71               {
;;;72               tree_down(0,0);
00003e  4601              MOV      r1,r0
000040  4608              MOV      r0,r1
000042  f7ffbffe          B.W      tree_down
                  |L1.70|
;;;73               }
;;;74          }
;;;75     }
000046  4770              BX       lr
;;;76     
                          ENDP

                  |L1.72|
                          DCD      ||.data||

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  ret_ind_sec PROC
;;;12     //-----------------------------------------------
;;;13     void ret_ind(char r_c,char r_s)
000000  4a01              LDR      r2,|L2.8|
;;;14     {
;;;15     retcnt=r_c;
000002  60d1              STR      r1,[r2,#0xc]  ; retcntsec
;;;16     ret_step=r_s;
000004  7050              STRB     r0,[r2,#1]
;;;17     //retsub=r_s;
;;;18     }    
000006  4770              BX       lr
;;;19     
                          ENDP

                  |L2.8|
                          DCD      ||.data||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  ret_ind_sec_hndl PROC
;;;12     //-----------------------------------------------
;;;13     void ret_ind(char r_c,char r_s)
000000  4808              LDR      r0,|L3.36|
;;;14     {
;;;15     retcnt=r_c;
000002  68c1              LDR      r1,[r0,#0xc]  ; retcntsec
;;;16     ret_step=r_s;
000004  2900              CMP      r1,#0
;;;17     //retsub=r_s;
;;;18     }    
000006  d00c              BEQ      |L3.34|
000008  1e49              SUBS     r1,r1,#1
00000a  60c1              STR      r1,[r0,#0xc]  ; retcntsec
00000c  d109              BNE      |L3.34|
00000e  4a06              LDR      r2,|L3.40|
000010  7841              LDRB     r1,[r0,#1]  ; retindsec
000012  7011              STRB     r1,[r2,#0]
000014  f04f0100          MOV      r1,#0
000018  7051              STRB     r1,[r2,#1]
00001a  7081              STRB     r1,[r0,#2]
00001c  70c1              STRB     r1,[r0,#3]
00001e  7101              STRB     r1,[r0,#4]
000020  7141              STRB     r1,[r0,#5]
                  |L3.34|
000022  4770              BX       lr
;;;19     
                          ENDP

                  |L3.36|
                          DCD      ||.data||
                  |L3.40|
                          DCD      a_ind

                          AREA ||.data||, DATA, ALIGN=2

                  ret_step
000000  00                DCB      0x00
                  retindsec
000001  00                DCB      0x00
                  ||f0||
000002  00                DCB      0x00
                  ||fc0||
000003  00                DCB      0x00
                  ||f1||
000004  00                DCB      0x00
                  ||fc1||
000005  00                DCB      0x00
                  ret_duty
000006  0000              DCB      0x00,0x00
                  retcnt
                          DCD      0x00000000
                  retcntsec
                          DCD      0x00000000

                          AREA ||area_number.7||, DATA, ALIGN=0

                          EXPORTAS ||area_number.7||, ||.data||
                  retsub
000000  00                DCB      0x00
