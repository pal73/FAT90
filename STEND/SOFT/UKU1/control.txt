; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\STEND.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU2071x --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ke_start PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  4770              BX       lr
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP

                  samokalibr_hndl PROC
;;;250    //-----------------------------------------------
;;;251    void samokalibr_init(void)
;;;252    {
;;;253    samokalibr_cnt=1785;
000002  e92d47f0          PUSH     {r4-r10,lr}
000006  4cff              LDR      r4,|L1.1028|
;;;254    }
000008  8ca0              LDRH     r0,[r4,#0x24]  ; samokalibr_cnt
00000a  1c40              ADDS     r0,r0,#1
00000c  b200              SXTH     r0,r0
00000e  84a0              STRH     r0,[r4,#0x24]
000010  f5b06fe1          CMP      r0,#0x708
000014  db02              BLT      |L1.28|
000016  f04f0000          MOV      r0,#0
00001a  84a0              STRH     r0,[r4,#0x24]
                  |L1.28|
00001c  f9b40024          LDRSH    r0,[r4,#0x24]  ; samokalibr_cnt
000020  f5b06fdf          CMP      r0,#0x6f8
000024  d911              BLS      |L1.74|
000026  230f              MOVS     r3,#0xf
000028  2201              MOVS     r2,#1
00002a  2164              MOVS     r1,#0x64
00002c  20d2              MOVS     r0,#0xd2
00002e  f7fffffe          BL       mess_send
000032  230f              MOVS     r3,#0xf
000034  2200              MOVS     r2,#0
000036  21d8              MOVS     r1,#0xd8
000038  20d7              MOVS     r0,#0xd7
00003a  f7fffffe          BL       mess_send
00003e  230f              MOVS     r3,#0xf
000040  2200              MOVS     r2,#0
000042  21d8              MOVS     r1,#0xd8
000044  20dc              MOVS     r0,#0xdc
000046  f7fffffe          BL       mess_send
                  |L1.74|
00004a  f9b40024          LDRSH    r0,[r4,#0x24]  ; samokalibr_cnt
00004e  f5a061e0          SUB      r1,r0,#0x700
000052  3907              SUBS     r1,#7
000054  d133              BNE      |L1.190|
000056  4dec              LDR      r5,|L1.1032|
000058  4cec              LDR      r4,|L1.1036|
00005a  4eed              LDR      r6,|L1.1040|
00005c  8828              LDRH     r0,[r5,#0]  ; Kibat0
00005e  8821              LDRH     r1,[r4,#0]  ; ad7705_buff_
000060  270a              MOVS     r7,#0xa
000062  f8df83b0          LDR      r8,|L1.1044|
000066  f8df93b0          LDR      r9,|L1.1048|
00006a  4288              CMP      r0,r1
00006c  d010              BEQ      |L1.144|
00006e  f9b60008          LDRSH    r0,[r6,#8]  ; bat
000072  fb90f0f7          SDIV     r0,r0,r7
000076  b200              SXTH     r0,r0
000078  f7fffffe          BL       abs
00007c  f9b81000          LDRSH    r1,[r8,#0]  ; IZMAX
000080  4288              CMP      r0,r1
000082  da05              BGE      |L1.144|
000084  f9b41000          LDRSH    r1,[r4,#0]  ; ad7705_buff_
000088  f9b90000          LDRSH    r0,[r9,#0]  ; ADR_KI0BAT
00008c  f7fffffe          BL       lc640_write_int
                  |L1.144|
000090  8868              LDRH     r0,[r5,#2]  ; Kibat0
000092  8861              LDRH     r1,[r4,#2]  ; ad7705_buff_
000094  4288              CMP      r0,r1
000096  d012              BEQ      |L1.190|
000098  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00009c  fb90f0f7          SDIV     r0,r0,r7
0000a0  b200              SXTH     r0,r0
0000a2  f7fffffe          BL       abs
0000a6  f9b81000          LDRSH    r1,[r8,#0]  ; IZMAX
0000aa  4288              CMP      r0,r1
0000ac  da07              BGE      |L1.190|
0000ae  f9b41002          LDRSH    r1,[r4,#2]  ; ad7705_buff_
0000b2  f9b90002          LDRSH    r0,[r9,#2]  ; ADR_KI0BAT
0000b6  e8bd47f0          POP      {r4-r10,lr}
0000ba  f7ffbffe          B.W      lc640_write_int
                  |L1.190|
0000be  e8bd87f0          POP      {r4-r10,pc}
;;;255    //-----------------------------------------------
                          ENDP

                  ubat_old_drv PROC
;;;277    //-----------------------------------------------
;;;278    void ubat_old_drv(void)
0000c2  4770              BX       lr
;;;279    {        
;;;280    
;;;281    }
;;;282    
                          ENDP

                  matemat PROC
;;;283    //-----------------------------------------------
;;;284    void matemat(void)
0000c4  e92d5ff0          PUSH     {r4-r12,lr}
;;;285    {
;;;286    //signed short temp_SS;
;;;287    signed long temp_SL/*,temp_SL_*/;
;;;288    char /*temp,*/i;
;;;289    //signed short temp_SS;
;;;290    
;;;291    #ifdef UKU_MGTS
;;;292    //напряжение сети
;;;293    temp_SL=(signed long)net_buff_;
;;;294    temp_SL*=Kunet;
;;;295    temp_SL/=110000L;
;;;296    net_U=(signed short)temp_SL;
;;;297    #endif
;;;298    
;;;299    #ifdef UKU_RSTKM
;;;300    //напряжение сети
;;;301    temp_SL=(signed long)net_buff_;
;;;302    temp_SL*=Kunet;
;;;303    temp_SL/=110000L;
;;;304    net_U=(signed short)temp_SL;
;;;305    #endif
;;;306    
;;;307    #ifdef UKU_3U
;;;308    //напряжение сети
;;;309    temp_SL=(signed long)net_buff_;
;;;310    temp_SL*=Kunet;
;;;311    temp_SL/=36000L;
;;;312    net_U=(signed short)temp_SL;
;;;313    #endif
;;;314    
;;;315    #ifdef UKU_6U
;;;316    //напряжение сети
;;;317    
;;;318    if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;319    	{
;;;320    
;;;321    	if(bps[11]._device==dNET_METR)
;;;322    		{
;;;323    		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;324    		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;325    		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;326    
;;;327    		temp_SL=(signed long)net_metr_buff_[0];
;;;328    		temp_SL*=KunetA;
;;;329    		temp_SL/=6000L;
;;;330    		net_Ua=(signed short)temp_SL;
;;;331    	
;;;332    		temp_SL=(signed long)net_metr_buff_[1];
;;;333    		temp_SL*=KunetB;
;;;334    		temp_SL/=6000L;
;;;335    		net_Ub=(signed short)temp_SL;
;;;336    	
;;;337    		temp_SL=(signed long)net_metr_buff_[2];
;;;338    		temp_SL*=KunetC;
;;;339    		temp_SL/=6000L;
;;;340    		net_Uc=(signed short)temp_SL;
;;;341    		}
;;;342    	else
;;;343    		{
;;;344    		temp_SL=(signed long)net_buff_;
;;;345    		temp_SL*=KunetA;
;;;346    		temp_SL/=110000L;
;;;347    		net_Ua=(signed short)temp_SL;
;;;348    	
;;;349    		temp_SL=(signed long)adc_buff_[3];
;;;350    		temp_SL*=KunetB;
;;;351    		temp_SL/=6000L;
;;;352    		net_Ub=(signed short)temp_SL;
;;;353    	
;;;354    		temp_SL=(signed long)adc_buff_[10];
;;;355    		temp_SL*=KunetC;
;;;356    		temp_SL/=6000L;
;;;357    		net_Uc=(signed short)temp_SL;
;;;358    		}
;;;359    
;;;360    	net_U=net_Ua;
;;;361    	if(net_Ub<net_U)net_U=net_Ub;
;;;362    	if(net_Uc<net_U)net_U=net_Uc;
;;;363    	}
;;;364    else 
;;;365    	{
;;;366    	temp_SL=(signed long)net_buff_;
;;;367    	temp_SL*=Kunet;
;;;368    	temp_SL/=110000L;
;;;369    	net_U=(signed short)temp_SL;
;;;370    	}
;;;371    
;;;372    
;;;373    
;;;374    
;;;375    #endif
;;;376    
;;;377    #ifdef UKU_GLONASS
;;;378    //напряжение сети
;;;379    temp_SL=(signed long)net_buff_;
;;;380    temp_SL*=Kunet;
;;;381    temp_SL/=110000L;
;;;382    net_U=(signed short)temp_SL;
;;;383    #endif
;;;384    
;;;385    #ifdef UKU_KONTUR
;;;386    //напряжение сети
;;;387    temp_SL=(signed long)net_buff_;
;;;388    temp_SL*=Kunet;
;;;389    temp_SL/=110000L;
;;;390    net_U=(signed short)temp_SL;
;;;391    #endif
;;;392    
;;;393    
;;;394    #ifdef UKU_220_V2
;;;395    //напряжение сети
;;;396    
;;;397    if(AUSW_MAIN==22033)
;;;398    	{
;;;399    	temp_SL=(signed long)net_buff_;
;;;400    	temp_SL*=KunetA;
;;;401    	temp_SL/=6000L;
;;;402    	net_Ua=(signed short)temp_SL;
;;;403    
;;;404    	temp_SL=(signed long)adc_buff_[3];
;;;405    	temp_SL*=KunetB;
;;;406    	temp_SL/=6000L;
;;;407    	net_Ub=(signed short)temp_SL;
;;;408    
;;;409    	temp_SL=(signed long)adc_buff_[10];
;;;410    	temp_SL*=KunetC;
;;;411    	temp_SL/=6000L;
;;;412    	net_Uc=(signed short)temp_SL;
;;;413    
;;;414    	net_U=net_Ua;
;;;415    	if(net_Ub<net_U)net_U=net_Ub;
;;;416    	if(net_Uc<net_U)net_U=net_Uc;
;;;417    	}
;;;418    else
;;;419    	{
;;;420    	temp_SL=(signed long)net_buff_;
;;;421    	temp_SL*=Kunet;
;;;422    	temp_SL/=5000L;
;;;423    	net_U=(signed short)temp_SL;
;;;424    	}
;;;425    #endif
;;;426    
;;;427    
;;;428    #ifdef UKU_220
;;;429    //напряжение сети
;;;430    
;;;431    if(AUSW_MAIN==22035)
;;;432    	{
;;;433    	temp_SL=(signed long)net_buff_;
;;;434    	temp_SL*=KunetA;
;;;435    	temp_SL/=6000L;
;;;436    	net_Ua=(signed short)temp_SL;
;;;437    
;;;438    	temp_SL=(signed long)adc_buff_[3];
;;;439    	temp_SL*=KunetB;
;;;440    	temp_SL/=6000L;
;;;441    	net_Ub=(signed short)temp_SL;
;;;442    
;;;443    	temp_SL=(signed long)adc_buff_[10];
;;;444    	temp_SL*=KunetC;
;;;445    	temp_SL/=6000L;
;;;446    	net_Uc=(signed short)temp_SL;
;;;447    
;;;448    	net_U=net_Ua;
;;;449    	if(net_Ub<net_U)net_U=net_Ub;
;;;450    	if(net_Uc<net_U)net_U=net_Uc;
;;;451    	}
;;;452    else
;;;453    	{
;;;454    	temp_SL=(signed long)net_buff_;
;;;455    	temp_SL*=Kunet;
;;;456    	#ifdef _ACDC_
;;;457    	temp_SL/=500L;
;;;458    	#else
;;;459    	temp_SL/=5000L;
;;;460    	#endif
;;;461    	net_U=(signed short)temp_SL;
;;;462    	
;;;463    	}
;;;464    #endif
;;;465    
;;;466    #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;467    //напряжение сети
;;;468    
;;;469    
;;;470    	if(bps[11]._device==dNET_METR)
;;;471    		{
;;;472    		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;473    		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;474    		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;475    
;;;476    		temp_SL=(signed long)net_metr_buff_[2];
;;;477    		temp_SL*=KunetA;
;;;478    		temp_SL/=6000L;
;;;479    		net_Ua=(signed short)temp_SL;
;;;480    	
;;;481    		temp_SL=(signed long)net_metr_buff_[1];
;;;482    		temp_SL*=KunetB;
;;;483    		temp_SL/=6000L;
;;;484    		net_Ub=(signed short)temp_SL;
;;;485    	
;;;486    		temp_SL=(signed long)net_metr_buff_[0];
;;;487    		temp_SL*=KunetC;
;;;488    		temp_SL/=6000L;
;;;489    		net_Uc=(signed short)temp_SL;
;;;490    
;;;491    		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;492    
;;;493    		net_U=net_Ua;
;;;494    		if(net_Ub<net_U)net_U=net_Ub;
;;;495    		if(net_Uc<net_U)net_U=net_Uc;
;;;496    		}
;;;497    	  else if(AUSW_MAIN==22033)
;;;498    	{
;;;499    	temp_SL=(signed long)net_buff_;
;;;500    	temp_SL*=KunetA;
;;;501    	temp_SL/=4000L;
;;;502    	net_Ua=(signed short)temp_SL;
;;;503    
;;;504    	temp_SL=(signed long)adc_buff_[3];
;;;505    	temp_SL*=KunetB;
;;;506    	temp_SL/=6000L;
;;;507    	net_Ub=(signed short)temp_SL;
;;;508    
;;;509    	temp_SL=(signed long)adc_buff_[10];
;;;510    	temp_SL*=KunetC;
;;;511    	temp_SL/=6000L;
;;;512    	net_Uc=(signed short)temp_SL;
;;;513    
;;;514    	net_U=net_Ua;
;;;515    	if(net_Ub<net_U)net_U=net_Ub;
;;;516    	if(net_Uc<net_U)net_U=net_Uc;
;;;517    	}
;;;518    else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22018))
;;;519    	{
;;;520    	temp_SL=(signed long)net_buff_;
;;;521    	temp_SL*=KunetA;
;;;522    	temp_SL/=40000L;
;;;523    	net_Ua=(signed short)temp_SL;
;;;524    
;;;525    	temp_SL=(signed long)adc_buff_[3];
;;;526    	temp_SL*=KunetB;
;;;527    	temp_SL/=6000L;
;;;528    	net_Ub=(signed short)temp_SL;
;;;529    
;;;530    	temp_SL=(signed long)adc_buff_[10];
;;;531    	temp_SL*=KunetC;
;;;532    	temp_SL/=6000L;
;;;533    	net_Uc=(signed short)temp_SL;
;;;534    
;;;535    	net_U=net_Ua;
;;;536    	if(net_Ub<net_U)net_U=net_Ub;
;;;537    	if(net_Uc<net_U)net_U=net_Uc;
;;;538    	}
;;;539    else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;540    	{
;;;541    	temp_SL=(signed long)net_buff_;
;;;542    	temp_SL*=Kunet;
;;;543    	temp_SL/=35000L;
;;;544    	net_U=(signed short)temp_SL;
;;;545    	
;;;546    	}
;;;547    else
;;;548    	{
;;;549    	temp_SL=(signed long)net_buff_;
;;;550    	temp_SL*=Kunet;
;;;551    	#ifdef _ACDC_
;;;552    	temp_SL/=500L;
;;;553    	#else
;;;554    	temp_SL/=5000L;
;;;555    	#endif
;;;556    	net_U=(signed short)temp_SL;
;;;557    	
;;;558    	}
;;;559    if(bps[11]._device!=dNET_METR) net_F3=net_F;
;;;560    #endif
;;;561    
;;;562    #ifdef UKU_TELECORE2015
;;;563    //напряжение сети
;;;564    temp_SL=(signed long)net_buff_;
;;;565    temp_SL*=Kunet;
;;;566    temp_SL/=110000L;
;;;567    net_U=(signed short)temp_SL;
;;;568    #endif
;;;569    
;;;570    #ifdef UKU_TELECORE2017
;;;571    //напряжение сети
;;;572    temp_SL=(signed long)net_buff_;
;;;573    temp_SL*=Kunet;
;;;574    temp_SL/=110000L;
;;;575    net_U=(signed short)temp_SL;
;;;576    #endif
;;;577    
;;;578    //Напряжения батарей
;;;579    temp_SL=(signed long)adc_buff_[0];
0000c8  4dd4              LDR      r5,|L1.1052|
0000ca  f9b51000          LDRSH    r1,[r5,#0]  ; adc_buff_
;;;580    temp_SL*=Kubat[0];
0000ce  4bd4              LDR      r3,|L1.1056|
0000d0  f9b30000          LDRSH    r0,[r3,#0]  ; Kubat
0000d4  4348              MULS     r0,r1,r0
;;;581    temp_SL/=2000L;
0000d6  f44f64fa          MOV      r4,#0x7d0
0000da  fb90f0f4          SDIV     r0,r0,r4
;;;582    bat[0]._Ub=(signed short)temp_SL;
0000de  4fcc              LDR      r7,|L1.1040|
0000e0  8078              STRH     r0,[r7,#2]
;;;583    
;;;584    #ifdef UKU_220
;;;585    //Напряжения батарей
;;;586    temp_SL=(signed long)adc_buff_[0];
;;;587    temp_SL*=Kubat[0];
;;;588    temp_SL/=400L;
;;;589    bat[0]._Ub=(signed short)temp_SL;
;;;590    #endif
;;;591    
;;;592    #ifdef UKU_220_V2
;;;593    //Напряжения батарей
;;;594    temp_SL=(signed long)adc_buff_[0];
;;;595    temp_SL*=Kubat[0];
;;;596    temp_SL/=400L;
;;;597    bat[0]._Ub=(signed short)temp_SL;
;;;598    #endif
;;;599    
;;;600    temp_SL=(signed long)adc_buff_[4];
0000e2  f9b51008          LDRSH    r1,[r5,#8]  ; adc_buff_
;;;601    temp_SL*=Kubatm[0];
0000e6  4ecf              LDR      r6,|L1.1060|
0000e8  f9b60000          LDRSH    r0,[r6,#0]  ; Kubatm
0000ec  fb00f001          MUL      r0,r0,r1
;;;602    temp_SL/=700L;
0000f0  f44f722f          MOV      r2,#0x2bc
0000f4  fb90f0f2          SDIV     r0,r0,r2
;;;603    bat[0]._Ubm=(signed short)temp_SL;
0000f8  80b8              STRH     r0,[r7,#4]
;;;604    
;;;605    #ifdef UKU_KONTUR
;;;606    temp_SL=(signed long)adc_buff_[4];
;;;607    temp_SL*=Kubatm[0];
;;;608    temp_SL/=2000L;
;;;609    bat[0]._Ubm=(signed short)temp_SL;
;;;610    #endif
;;;611    
;;;612    temp_SL=(signed long)adc_buff_[12];
0000fa  f9b51018          LDRSH    r1,[r5,#0x18]  ; adc_buff_
;;;613    temp_SL*=Kubat[1];
0000fe  f9b30002          LDRSH    r0,[r3,#2]  ; Kubat
000102  fb00f001          MUL      r0,r0,r1
;;;614    temp_SL/=2000L;
000106  fb90f0f4          SDIV     r0,r0,r4
;;;615    bat[1]._Ub=(signed short)temp_SL;
00010a  f8a7004e          STRH     r0,[r7,#0x4e]
;;;616    
;;;617    #ifdef UKU_220
;;;618    temp_SL=(signed long)adc_buff_[12];
;;;619    temp_SL*=Kubat[1];
;;;620    temp_SL/=400L;
;;;621    bat[1]._Ub=(signed short)temp_SL;
;;;622    #endif
;;;623    
;;;624    #ifdef UKU_220_V2
;;;625    temp_SL=(signed long)adc_buff_[12];
;;;626    temp_SL*=Kubat[1];
;;;627    temp_SL/=400L;
;;;628    bat[1]._Ub=(signed short)temp_SL;
;;;629    #endif
;;;630    
;;;631    temp_SL=(signed long)adc_buff_[1];
00010e  f9b51002          LDRSH    r1,[r5,#2]  ; adc_buff_
;;;632    temp_SL*=Kubatm[1];
000112  f9b60002          LDRSH    r0,[r6,#2]  ; Kubatm
000116  fb00f001          MUL      r0,r0,r1
;;;633    temp_SL/=700L;
00011a  fb90f0f2          SDIV     r0,r0,r2
;;;634    bat[1]._Ubm=(signed short)temp_SL;
00011e  f8a70050          STRH     r0,[r7,#0x50]
;;;635    #ifdef UKU_KONTUR
;;;636    temp_SL=(signed long)adc_buff_[1];
;;;637    temp_SL*=Kubatm[1];
;;;638    temp_SL/=2000L;
;;;639    bat[1]._Ubm=(signed short)temp_SL;
;;;640    #endif
;;;641    
;;;642    #ifdef UKU_TELECORE2015
;;;643    temp_SL=(signed long)adc_buff_[2];
;;;644    temp_SL*=Kubat[0];
;;;645    temp_SL/=2000L;
;;;646    bat[0]._Ub=(signed short)temp_SL;
;;;647    #endif
;;;648    
;;;649    /*
;;;650    //Токи батарей
;;;651    if(!mess_find_unvol(MESS2MATEMAT))
;;;652    	{
;;;653    	temp_SL=(signed long)ad7705_buff_[0];
;;;654    	temp_SL-=(signed long)Kibat0[0];
;;;655    	temp_SL*=(signed long)Kibat1[0];
;;;656    	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;657    	else temp_SL/=1000L;
;;;658    	bat[0]._Ib=(signed short)temp_SL;
;;;659    
;;;660    	temp_SL=(signed long)ad7705_buff_[1];
;;;661    	temp_SL-=(signed long)Kibat0[1];
;;;662    	temp_SL*=(signed long)Kibat1[1];
;;;663    	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;664    	else temp_SL/=1000L;
;;;665    	bat[1]._Ib=(signed short)temp_SL;
;;;666    	}
;;;667    */
;;;668    
;;;669    
;;;670    //Токи батарей
;;;671    if(!mess_find_unvol(MESS2MATEMAT))
000122  f04f00dc          MOV      r0,#0xdc
000126  f7fffffe          BL       mess_find_unvol
;;;672    	{
;;;673    	temp_SL=(signed long)ad7705_buff_[0];
;;;674    	temp_SL-=(signed long)Kibat0[0];
;;;675    	temp_SL*=(signed long)Kibat1[0];
00012a  4ebf              LDR      r6,|L1.1064|
00012c  bbf0              CBNZ     r0,|L1.428|
00012e  4bb7              LDR      r3,|L1.1036|
000130  8818              LDRH     r0,[r3,#0]            ;673  ; ad7705_buff_
000132  f8dfc2d4          LDR      r12,|L1.1032|
000136  f8bc1000          LDRH     r1,[r12,#0]           ;674  ; Kibat0
00013a  eba00001          SUB      r0,r0,r1              ;674
00013e  f9b61000          LDRSH    r1,[r6,#0]  ; Kibat1
000142  fb01f100          MUL      r1,r1,r0
;;;676    	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
000146  48b9              LDR      r0,|L1.1068|
000148  f6456238          MOV      r2,#0x5e38
00014c  f6456892          MOV      r8,#0x5e92
000150  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
000152  f44f7996          MOV      r9,#0x12c
;;;677    	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
000156  f2456a11          MOV      r10,#0x5611
;;;678    	else temp_SL/=1000L;
00015a  f44f7b7a          MOV      r11,#0x3e8
00015e  4290              CMP      r0,r2                 ;676
000160  d001              BEQ      |L1.358|
000162  4540              CMP      r0,r8                 ;676
000164  d102              BNE      |L1.364|
                  |L1.358|
000166  fb91f1f9          SDIV     r1,r1,r9              ;676
00016a  e00e              B        |L1.394|
                  |L1.364|
00016c  f5a04ea8          SUB      lr,r0,#0x5400         ;677
000170  f5be7efd          SUBS     lr,lr,#0x1fa          ;677
000174  d004              BEQ      |L1.384|
000176  f1be0e19          SUBS     lr,lr,#0x19           ;677
00017a  d001              BEQ      |L1.384|
00017c  4550              CMP      r0,r10                ;677
00017e  d102              BNE      |L1.390|
                  |L1.384|
000180  fb91f1f4          SDIV     r1,r1,r4              ;677
000184  e001              B        |L1.394|
                  |L1.390|
000186  fb91f1fb          SDIV     r1,r1,r11
                  |L1.394|
;;;679    	#ifdef UKU_TELECORE2015
;;;680    	temp_SL/=2L;
;;;681    	//temp_SL=-temp_SL;
;;;682    	#endif
;;;683    	//#ifdef UKU_TELECORE2017
;;;684    	//temp_SL/=-2L;
;;;685    	//temp_SL=-temp_SL;
;;;686    	//#endif
;;;687    	bat[0]._Ib=(signed short)temp_SL;
00018a  8139              STRH     r1,[r7,#8]
;;;688    
;;;689    	temp_SL=(signed long)ad7705_buff_[1];
00018c  8859              LDRH     r1,[r3,#2]  ; ad7705_buff_
;;;690    	temp_SL-=(signed long)Kibat0[1];
00018e  f8bc3002          LDRH     r3,[r12,#2]  ; Kibat0
000192  eba10303          SUB      r3,r1,r3
;;;691    	temp_SL*=(signed long)Kibat1[1];
000196  f9b61002          LDRSH    r1,[r6,#2]  ; Kibat1
00019a  fb01f103          MUL      r1,r1,r3
;;;692    	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
00019e  4290              CMP      r0,r2
0001a0  d001              BEQ      |L1.422|
0001a2  4540              CMP      r0,r8
0001a4  d103              BNE      |L1.430|
                  |L1.422|
0001a6  fb91f0f9          SDIV     r0,r1,r9
0001aa  e00d              B        |L1.456|
                  |L1.428|
0001ac  e00e              B        |L1.460|
                  |L1.430|
;;;693    	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
0001ae  f5a042aa          SUB      r2,r0,#0x5500
0001b2  3afa              SUBS     r2,r2,#0xfa
0001b4  d003              BEQ      |L1.446|
0001b6  3a19              SUBS     r2,r2,#0x19
0001b8  d001              BEQ      |L1.446|
0001ba  4550              CMP      r0,r10
0001bc  d102              BNE      |L1.452|
                  |L1.446|
0001be  fb91f0f4          SDIV     r0,r1,r4
0001c2  e001              B        |L1.456|
                  |L1.452|
;;;694    	else temp_SL/=1000L;
0001c4  fb91f0fb          SDIV     r0,r1,r11
                  |L1.456|
;;;695    	bat[1]._Ib=(signed short)temp_SL;
0001c8  f8a70054          STRH     r0,[r7,#0x54]
                  |L1.460|
;;;696    	}
;;;697    
;;;698    
;;;699    
;;;700    
;;;701    
;;;702    //Температуры батарей
;;;703    
;;;704    #ifdef UKU_KONTUR
;;;705    if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;706    else bat[0]._nd=1;
;;;707    temp_SL=(signed long)adc_buff_[6];
;;;708    temp_SL*=Ktbat[0];
;;;709    temp_SL/=20000L;
;;;710    temp_SL-=273L;
;;;711    bat[0]._Tb=(signed short)temp_SL;
;;;712    #else
;;;713    if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
0001cc  f9b5100c          LDRSH    r1,[r5,#0xc]  ; adc_buff_
0001d0  f64039b7          MOV      r9,#0xbb7
0001d4  f2a13821          SUB      r8,r1,#0x321
;;;714    else bat[0]._nd=1;
0001d8  2001              MOVS     r0,#1
0001da  2200              MOVS     r2,#0                 ;713
0001dc  45c8              CMP      r8,r9                 ;713
0001de  d201              BCS      |L1.484|
0001e0  733a              STRB     r2,[r7,#0xc]          ;713
0001e2  e000              B        |L1.486|
                  |L1.484|
0001e4  7338              STRB     r0,[r7,#0xc]
                  |L1.486|
;;;715    temp_SL=(signed long)adc_buff_[6];
;;;716    temp_SL*=Ktbat[0];
0001e6  4b92              LDR      r3,|L1.1072|
0001e8  f9b3c000          LDRSH    r12,[r3,#0]  ; Ktbat
0001ec  fb0cfc01          MUL      r12,r12,r1
;;;717    temp_SL/=20000L;
0001f0  f6446a20          MOV      r10,#0x4e20
0001f4  fb9cfcfa          SDIV     r12,r12,r10
;;;718    temp_SL-=273L;
0001f8  f2ac1c11          SUB      r12,r12,#0x111
;;;719    bat[0]._Tb=(signed short)temp_SL;
0001fc  f8a7c00a          STRH     r12,[r7,#0xa]
;;;720    #endif
;;;721    
;;;722    #ifdef UKU_KONTUR
;;;723    if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;724    else bat[1]._nd=1;
;;;725    temp_SL=(signed long)adc_buff_[7];
;;;726    temp_SL*=Ktbat[1];
;;;727    temp_SL/=20000L;
;;;728    temp_SL-=273L;
;;;729    bat[1]._Tb=(signed short)temp_SL;
;;;730    #else
;;;731    if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
000200  f9b5c00e          LDRSH    r12,[r5,#0xe]  ; adc_buff_
000204  f2ac3b21          SUB      r11,r12,#0x321
000208  45cb              CMP      r11,r9
00020a  d202              BCS      |L1.530|
00020c  f8872058          STRB     r2,[r7,#0x58]
000210  e001              B        |L1.534|
                  |L1.530|
;;;732    else bat[1]._nd=1;
000212  f8870058          STRB     r0,[r7,#0x58]
                  |L1.534|
;;;733    temp_SL=(signed long)adc_buff_[7];
;;;734    temp_SL*=Ktbat[1];
000216  f9b33002          LDRSH    r3,[r3,#2]  ; Ktbat
00021a  fb03f30c          MUL      r3,r3,r12
;;;735    temp_SL/=20000L;
00021e  fb93f3fa          SDIV     r3,r3,r10
;;;736    temp_SL-=273L;
000222  f2a31311          SUB      r3,r3,#0x111
;;;737    bat[1]._Tb=(signed short)temp_SL;
000226  f8a73056          STRH     r3,[r7,#0x56]
;;;738    #endif
;;;739    
;;;740    #ifdef UKU_6U
;;;741    
;;;742    if(NUMMAKB==2)
;;;743    	{
;;;744    	if(makb[0]._cnt<5)
;;;745    		{
;;;746    		if(makb[0]._T_nd[0]==0)
;;;747    			{
;;;748    			bat[0]._Tb=makb[0]._T[0];
;;;749    			bat[0]._nd=0;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(makb[1]._cnt<5)
;;;754    		{
;;;755    		if(makb[1]._T_nd[0]==0)
;;;756    			{
;;;757    			bat[1]._Tb=makb[1]._T[0];
;;;758    			bat[1]._nd=0;
;;;759    			}
;;;760    		}
;;;761    
;;;762    	}
;;;763    else if(NUMMAKB==4)
;;;764    	{
;;;765    	signed short temp_t;
;;;766    	temp_t=-20;
;;;767    	if(makb[0]._cnt<5)
;;;768    		{
;;;769    		if(makb[0]._T_nd[0]==0)
;;;770    			{
;;;771    			temp_t=makb[0]._T[0];
;;;772    			bat[0]._nd=0;
;;;773    			}
;;;774    		}
;;;775    	if(makb[1]._cnt<5)
;;;776    		{
;;;777    		if(makb[1]._T_nd[0]==0)
;;;778    			{
;;;779    			if(temp_t<makb[1]._T[0])
;;;780    				{
;;;781    				bat[0]._nd=0;
;;;782    				temp_t=makb[1]._T[0];
;;;783    				}
;;;784    			}
;;;785    		}
;;;786    	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;787    
;;;788     	temp_t=-20;
;;;789    	if(makb[2]._cnt<5)
;;;790    		{
;;;791    		if(makb[2]._T_nd[0]==0)
;;;792    			{
;;;793    			temp_t=makb[2]._T[0];
;;;794    			bat[1]._nd=0;
;;;795    			}
;;;796    		}
;;;797    	if(makb[3]._cnt<5)
;;;798    		{
;;;799    		if(makb[3]._T_nd[0]==0)
;;;800    			{
;;;801    			if(temp_t<makb[3]._T[0])
;;;802    				{
;;;803    				bat[1]._nd=0;
;;;804    				temp_t=makb[3]._T[0];
;;;805    				}
;;;806    			}
;;;807    		}
;;;808    	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;809    	}
;;;810    
;;;811    #endif
;;;812    
;;;813    
;;;814    //Напряжение нагрузки
;;;815    temp_SL=(signed long)adc_buff_[2];
00022a  f9b53004          LDRSH    r3,[r5,#4]  ; adc_buff_
;;;816    temp_SL*=Kuload;
00022e  f8dfc204          LDR      r12,|L1.1076|
000232  f9bcc000          LDRSH    r12,[r12,#0]  ; Kuload
000236  fb03f30c          MUL      r3,r3,r12
;;;817    temp_SL/=2000L;
00023a  fb93f3f4          SDIV     r3,r3,r4
;;;818    load_U=(signed short)temp_SL;
00023e  fa0ffc83          SXTH     r12,r3
000242  4b7d              LDR      r3,|L1.1080|
000244  f8a3c000          STRH     r12,[r3,#0]
;;;819    
;;;820    #ifdef UKU_220 
;;;821    //Напряжение нагрузки
;;;822    temp_SL=(signed long)adc_buff_[2];
;;;823    temp_SL*=Kuload;
;;;824    temp_SL/=350L;
;;;825    load_U=(signed short)temp_SL;
;;;826    #endif
;;;827    
;;;828    #ifdef UKU_220_V2 
;;;829    //Напряжение нагрузки
;;;830    temp_SL=(signed long)adc_buff_[2];
;;;831    temp_SL*=Kuload;
;;;832    temp_SL/=350L;
;;;833    load_U=(signed short)temp_SL;
;;;834    #endif
;;;835    
;;;836    #ifdef UKU_VD
;;;837    //Напряжение выхода
;;;838    temp_SL=(signed long)adc_buff_[1];
;;;839    temp_SL*=Kuout;
;;;840    temp_SL/=500L;
;;;841    out_U=(signed short)temp_SL;
;;;842    
;;;843    
;;;844    //Напряжение вольтдобавки
;;;845    temp_SL=(signed long)adc_buff_[2];
;;;846    temp_SL*=Kuvd;
;;;847    temp_SL/=500L;
;;;848    vd_U=(signed short)temp_SL;
;;;849    
;;;850    //Напряжение входа
;;;851    in_U=out_U-vd_U;
;;;852    
;;;853    //Напряжение выпрямителей
;;;854    temp_SL=(signed long)adc_buff_[2];
;;;855    temp_SL*=Kubps;
;;;856    if(AUSW_MAIN==22010)temp_SL/=400L;
;;;857    else temp_SL/=500L;
;;;858    bps_U=(signed short)temp_SL;
;;;859    
;;;860    if(bps_U<100)
;;;861    	{
;;;862    	char i;
;;;863    	for(i=0;i<NUMIST;i++)
;;;864    		{
;;;865    		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
;;;866    		}
;;;867    	}
;;;868    
;;;869    //Суммарный ток выпрямителей
;;;870    temp_SL=0;
;;;871    for (i=0;i<NUMIST;i++)
;;;872    	{
;;;873    	temp_SL+=((signed long)bps[i]._Ii);
;;;874    	}
;;;875    bps_I=(signed short)temp_SL;
;;;876    
;;;877    
;;;878    #endif
;;;879    
;;;880    
;;;881    #ifdef UKU_KONTUR
;;;882    //Внешний датчик температуры №1(температура внешнего воздуха)
;;;883    if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;884    else ND_EXT[0]=1;
;;;885    temp_SL=(signed long)adc_buff_[5];
;;;886    temp_SL*=Ktext[0];
;;;887    temp_SL/=20000L;
;;;888    temp_SL-=273L;
;;;889    t_ext[0]=(signed short)temp_SL;
;;;890    #else 
;;;891    //Внешний датчик температуры №1(температура внешнего воздуха)
;;;892    if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
000248  f9b5b00a          LDRSH    r11,[r5,#0xa]  ; adc_buff_
00024c  4b7b              LDR      r3,|L1.1084|
00024e  46de              MOV      lr,r11
000250  f2ab3b21          SUB      r11,r11,#0x321
000254  45cb              CMP      r11,r9
000256  d201              BCS      |L1.604|
000258  701a              STRB     r2,[r3,#0]
00025a  e000              B        |L1.606|
                  |L1.604|
;;;893    else ND_EXT[0]=1;
00025c  7018              STRB     r0,[r3,#0]
                  |L1.606|
;;;894    temp_SL=(signed long)adc_buff_[5];
;;;895    temp_SL*=Ktext[0];
00025e  f8dfb1e0          LDR      r11,|L1.1088|
000262  f9bb5000          LDRSH    r5,[r11,#0]  ; Ktext
000266  fb05f50e          MUL      r5,r5,lr
;;;896    temp_SL/=20000L;
00026a  fb95fefa          SDIV     lr,r5,r10
;;;897    temp_SL-=273L;
00026e  f2ae1e11          SUB      lr,lr,#0x111
;;;898    t_ext[0]=(signed short)temp_SL;
000272  4d74              LDR      r5,|L1.1092|
000274  f8a5e000          STRH     lr,[r5,#0]
;;;899    /*
;;;900    if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;901    else ND_EXT[1]=1;
;;;902    temp_SL=(signed long)adc_buff_[6];
;;;903    temp_SL*=Ktext[1];
;;;904    temp_SL/=20000L;
;;;905    temp_SL-=273L;
;;;906    t_ext[1]=(signed short)temp_SL;	*/
;;;907    #endif
;;;908    
;;;909    #ifdef UKU_220
;;;910    
;;;911    //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;912    if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;913    else ND_EXT[1]=1;
;;;914    temp_SL=(signed long)adc_buff_[3];
;;;915    temp_SL*=Ktext[1];
;;;916    temp_SL/=20000L;
;;;917    temp_SL-=273L;
;;;918    t_ext[1]=(signed short)temp_SL;
;;;919    
;;;920    //Внешний датчик температуры №3(температура отсека MSAN)
;;;921    if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;922    else ND_EXT[2]=1;
;;;923    temp_SL=(signed long)adc_buff_[10];
;;;924    temp_SL*=Ktext[2];
;;;925    temp_SL/=20000L;
;;;926    temp_SL-=273L;
;;;927    t_ext[2]=(signed short)temp_SL;
;;;928    
;;;929    #else
;;;930    
;;;931    
;;;932    #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;933    
;;;934    //Внешний датчик температуры 
;;;935    if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
;;;936    else ND_EXT[0]=1;
;;;937    temp_SL=(signed long)adc_buff_[6];
;;;938    temp_SL*=Ktext[0];
;;;939    temp_SL/=20000L;
;;;940    temp_SL-=273L;
;;;941    t_ext[0]=(signed short)temp_SL;
;;;942    sys_T=t_ext[0];
;;;943    #else
;;;944    
;;;945    
;;;946    
;;;947    //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;948    if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
000278  45c8              CMP      r8,r9
00027a  d201              BCS      |L1.640|
00027c  705a              STRB     r2,[r3,#1]
00027e  e000              B        |L1.642|
                  |L1.640|
;;;949    else ND_EXT[1]=1;
000280  7058              STRB     r0,[r3,#1]
                  |L1.642|
;;;950    temp_SL=(signed long)adc_buff_[6];
000282  f8dfe198          LDR      lr,|L1.1052|
;;;951    temp_SL*=Ktext[1];
000286  f9bb8002          LDRSH    r8,[r11,#2]  ; Ktext
00028a  fb08f801          MUL      r8,r8,r1
;;;952    temp_SL/=20000L;
00028e  fb98f1fa          SDIV     r1,r8,r10
;;;953    temp_SL-=273L;
000292  f2a11111          SUB      r1,r1,#0x111
;;;954    t_ext[1]=(signed short)temp_SL;
000296  fa0ff881          SXTH     r8,r1
00029a  f8a58002          STRH     r8,[r5,#2]
;;;955    
;;;956    //Внешний датчик температуры №3(температура отсека MSAN)
;;;957    if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
00029e  f9be1006          LDRSH    r1,[lr,#6]  ; adc_buff_
0002a2  f2a13e21          SUB      lr,r1,#0x321
0002a6  45ce              CMP      lr,r9
0002a8  d201              BCS      |L1.686|
0002aa  709a              STRB     r2,[r3,#2]
0002ac  e000              B        |L1.688|
                  |L1.686|
;;;958    else ND_EXT[2]=1;
0002ae  7098              STRB     r0,[r3,#2]
                  |L1.688|
;;;959    temp_SL=(signed long)adc_buff_[3];
;;;960    temp_SL*=Ktext[2];
0002b0  f9bb0004          LDRSH    r0,[r11,#4]  ; Ktext
0002b4  4348              MULS     r0,r1,r0
;;;961    temp_SL/=20000L;
0002b6  fb90f0fa          SDIV     r0,r0,r10
;;;962    temp_SL-=273L;
0002ba  f2a01011          SUB      r0,r0,#0x111
;;;963    t_ext[2]=(signed short)temp_SL;
0002be  fa0ff980          SXTH     r9,r0
0002c2  f8a59004          STRH     r9,[r5,#4]
;;;964    
;;;965    #endif
;;;966    #endif
;;;967    
;;;968    if(!bIBAT_SMKLBR)
0002c6  4860              LDR      r0,|L1.1096|
;;;969    	{
;;;970    	signed long temp_SL;
;;;971    	temp_SL=(signed long)ibat_metr_buff_[0];
;;;972    	temp_SL-=(signed long)ibat_metr_buff_[1];
;;;973    	temp_SL*=(signed long)Kibat1[0];
;;;974    	temp_SL/=2000L;
;;;975    	
;;;976    	Ib_ips_termokompensat =(signed short)temp_SL;
0002c8  f8dfa180          LDR      r10,|L1.1100|
;;;977    	out_I=Ib_ips_termokompensat;
0002cc  f8dfe180          LDR      lr,|L1.1104|
0002d0  8800              LDRH     r0,[r0,#0]            ;968  ; bIBAT_SMKLBR
0002d2  b970              CBNZ     r0,|L1.754|
0002d4  495f              LDR      r1,|L1.1108|
0002d6  6808              LDR      r0,[r1,#0]            ;971  ; ibat_metr_buff_
0002d8  6849              LDR      r1,[r1,#4]            ;972  ; ibat_metr_buff_
0002da  eba00101          SUB      r1,r0,r1              ;972
0002de  f9b60000          LDRSH    r0,[r6,#0]            ;973  ; Kibat1
0002e2  fb00f001          MUL      r0,r0,r1              ;973
0002e6  fb90f0f4          SDIV     r0,r0,r4              ;974
0002ea  f8aa0000          STRH     r0,[r10,#0]           ;976
0002ee  f8ae0000          STRH     r0,[lr,#0]
                  |L1.754|
;;;978    	}
;;;979    
;;;980    if(I_LOAD_MODE==0)
0002f2  4859              LDR      r0,|L1.1112|
;;;981    	{
;;;982    	temp_SL=0;
;;;983    	for(i=0;i<NUMIST;i++)
0002f4  f8dfb164          LDR      r11,|L1.1116|
;;;984    		{
;;;985    		temp_SL+=(signed long)bps[i]._Ii;
0002f8  4e59              LDR      r6,|L1.1120|
0002fa  8800              LDRH     r0,[r0,#0]            ;980  ; I_LOAD_MODE
0002fc  b9d8              CBNZ     r0,|L1.822|
0002fe  f04f0100          MOV      r1,#0                 ;982
000302  4608              MOV      r0,r1                 ;983
000304  f9bb5000          LDRSH    r5,[r11,#0]           ;983
000308  e00a              B        |L1.800|
                  |L1.778|
00030a  eb000480          ADD      r4,r0,r0,LSL #2
00030e  eb0404c0          ADD      r4,r4,r0,LSL #3
000312  eb0604c4          ADD      r4,r6,r4,LSL #3
000316  6a64              LDR      r4,[r4,#0x24]
000318  4421              ADD      r1,r1,r4
00031a  f1000001          ADD      r0,r0,#1              ;983
00031e  b2c0              UXTB     r0,r0                 ;983
                  |L1.800|
000320  42a8              CMP      r0,r5                 ;983
000322  dbf2              BLT      |L1.778|
;;;986    		}
;;;987    	Ib_ips_termokompensat=(signed short)temp_SL/10;
000324  b209              SXTH     r1,r1
000326  f04f000a          MOV      r0,#0xa
00032a  fb91f0f0          SDIV     r0,r1,r0
00032e  f8aa0000          STRH     r0,[r10,#0]
;;;988    	out_I=Ib_ips_termokompensat;
000332  f8ae0000          STRH     r0,[lr,#0]
                  |L1.822|
;;;989    	}
;;;990    
;;;991    
;;;992    bat[0]._Ub=load_U;
000336  f8a7c002          STRH     r12,[r7,#2]
;;;993    
;;;994    
;;;995    
;;;996    
;;;997    #ifdef UKU_TELECORE2015
;;;998    
;;;999    //Внешний датчик температуры №1
;;;1000   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;1001   else ND_EXT[0]=1;
;;;1002   temp_SL=(signed long)adc_buff_[7];
;;;1003   temp_SL*=Ktext[0];
;;;1004   temp_SL/=20000L;
;;;1005   temp_SL-=273L;
;;;1006   t_ext[0]=(signed short)temp_SL;
;;;1007   
;;;1008   
;;;1009   //Внешний датчик температуры №2
;;;1010   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;1011   else ND_EXT[1]=1;
;;;1012   temp_SL=(signed long)adc_buff_[6];
;;;1013   temp_SL*=Ktext[1];
;;;1014   temp_SL/=20000L;
;;;1015   temp_SL-=273L;
;;;1016   t_ext[1]=(signed short)temp_SL;
;;;1017   
;;;1018   #endif
;;;1019   
;;;1020   #ifdef UKU_TELECORE2017
;;;1021   
;;;1022   //Внешний датчик температуры №1
;;;1023   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;1024   else ND_EXT[0]=1;
;;;1025   temp_SL=(signed long)adc_buff_[7];
;;;1026   temp_SL*=Ktext[0];
;;;1027   temp_SL/=20000L;
;;;1028   temp_SL-=273L;
;;;1029   t_ext[0]=(signed short)temp_SL;
;;;1030   
;;;1031   
;;;1032   //Внешний датчик температуры №2
;;;1033   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;1034   else ND_EXT[1]=1;
;;;1035   temp_SL=(signed long)adc_buff_[6];
;;;1036   temp_SL*=Ktext[1];
;;;1037   temp_SL/=20000L;
;;;1038   temp_SL-=273L;
;;;1039   t_ext[1]=(signed short)temp_SL;
;;;1040   
;;;1041   #endif
;;;1042   
;;;1043   //напряжение ввода
;;;1044   temp_SL=(signed long)adc_buff_ext_[0];
00033a  4c4a              LDR      r4,|L1.1124|
00033c  8821              LDRH     r1,[r4,#0]  ; adc_buff_ext_
;;;1045   temp_SL*=Kunet_ext[0];
00033e  4d4a              LDR      r5,|L1.1128|
000340  f9b50000          LDRSH    r0,[r5,#0]  ; Kunet_ext
000344  4348              MULS     r0,r1,r0
;;;1046   temp_SL/=4000L;
000346  f44f6a7a          MOV      r10,#0xfa0
00034a  fb90f0fa          SDIV     r0,r0,r10
;;;1047   Uvv[0]=(signed short)temp_SL;
00034e  4947              LDR      r1,|L1.1132|
000350  b280              UXTH     r0,r0
000352  8008              STRH     r0,[r1,#0]
;;;1048   if(Uvv[0]<100) Uvv0=Uvv[0];
000354  f8dfe118          LDR      lr,|L1.1136|
000358  2864              CMP      r0,#0x64
00035a  d202              BCS      |L1.866|
00035c  f8ae0000          STRH     r0,[lr,#0]
000360  e003              B        |L1.874|
                  |L1.866|
;;;1049   else Uvv0=net_U;
000362  4844              LDR      r0,|L1.1140|
000364  8800              LDRH     r0,[r0,#0]  ; net_U
000366  f8ae0000          STRH     r0,[lr,#0]
                  |L1.874|
;;;1050   
;;;1051   //напряжение пэс
;;;1052   temp_SL=(signed long)adc_buff_ext_[1];
00036a  8860              LDRH     r0,[r4,#2]  ; adc_buff_ext_
;;;1053   temp_SL*=Kunet_ext[1];
00036c  f9b54002          LDRSH    r4,[r5,#2]  ; Kunet_ext
000370  4344              MULS     r4,r0,r4
;;;1054   temp_SL/=4000L;
000372  fb94f0fa          SDIV     r0,r4,r10
;;;1055   Uvv[1]=(signed short)temp_SL;
000376  8048              STRH     r0,[r1,#2]
;;;1056   
;;;1057   
;;;1058   //напряжение ввода трехфазное
;;;1059   temp_SL=(signed long)eb2_data_short[0];
000378  483f              LDR      r0,|L1.1144|
00037a  f9b01000          LDRSH    r1,[r0,#0]  ; eb2_data_short
;;;1060   temp_SL*=Kvv_eb2[0];
00037e  4c3f              LDR      r4,|L1.1148|
000380  f9b45000          LDRSH    r5,[r4,#0]  ; Kvv_eb2
000384  434d              MULS     r5,r1,r5
;;;1061   temp_SL/=6000L;
000386  f2417170          MOV      r1,#0x1770
00038a  fb95faf1          SDIV     r10,r5,r1
;;;1062   Uvv_eb2[0]=(signed short)temp_SL;
00038e  4d3c              LDR      r5,|L1.1152|
000390  f8a5a000          STRH     r10,[r5,#0]
;;;1063   
;;;1064   temp_SL=(signed long)eb2_data_short[1];
000394  f9b0e002          LDRSH    lr,[r0,#2]  ; eb2_data_short
;;;1065   temp_SL*=Kvv_eb2[1];
000398  f9b4a002          LDRSH    r10,[r4,#2]  ; Kvv_eb2
00039c  fb0afa0e          MUL      r10,r10,lr
;;;1066   temp_SL/=6000L;
0003a0  fb9afaf1          SDIV     r10,r10,r1
;;;1067   Uvv_eb2[1]=(signed short)temp_SL;
0003a4  f8a5a002          STRH     r10,[r5,#2]
;;;1068   
;;;1069   temp_SL=(signed long)eb2_data_short[2];
0003a8  f9b0a004          LDRSH    r10,[r0,#4]  ; eb2_data_short
;;;1070   temp_SL*=Kvv_eb2[2];
0003ac  f9b44004          LDRSH    r4,[r4,#4]  ; Kvv_eb2
0003b0  fb04f40a          MUL      r4,r4,r10
;;;1071   temp_SL/=6000L;
0003b4  fb94f4f1          SDIV     r4,r4,r1
;;;1072   Uvv_eb2[2]=(signed short)temp_SL;
0003b8  80ac              STRH     r4,[r5,#4]
;;;1073   
;;;1074   //напряжение пэс трехфазное
;;;1075   temp_SL=(signed long)eb2_data_short[3];
0003ba  f9b0a006          LDRSH    r10,[r0,#6]  ; eb2_data_short
;;;1076   temp_SL*=Kpes_eb2[0];
0003be  4c31              LDR      r4,|L1.1156|
0003c0  f9b45000          LDRSH    r5,[r4,#0]  ; Kpes_eb2
0003c4  fb05f50a          MUL      r5,r5,r10
;;;1077   temp_SL/=6000L;
0003c8  fb95faf1          SDIV     r10,r5,r1
;;;1078   Upes_eb2[0]=(signed short)temp_SL;
0003cc  4d2e              LDR      r5,|L1.1160|
0003ce  f8a5a000          STRH     r10,[r5,#0]
;;;1079   
;;;1080   temp_SL=(signed long)eb2_data_short[4];
0003d2  f9b0e008          LDRSH    lr,[r0,#8]  ; eb2_data_short
;;;1081   temp_SL*=Kpes_eb2[1];
0003d6  f9b4a002          LDRSH    r10,[r4,#2]  ; Kpes_eb2
0003da  fb0afa0e          MUL      r10,r10,lr
;;;1082   temp_SL/=6000L;
0003de  fb9afaf1          SDIV     r10,r10,r1
;;;1083   Upes_eb2[1]=(signed short)temp_SL;
0003e2  f8a5a002          STRH     r10,[r5,#2]
;;;1084   
;;;1085   temp_SL=(signed long)eb2_data_short[5];
0003e6  f9b0a00a          LDRSH    r10,[r0,#0xa]  ; eb2_data_short
;;;1086   temp_SL*=Kpes_eb2[2];
0003ea  f9b40004          LDRSH    r0,[r4,#4]  ; Kpes_eb2
0003ee  fb00f00a          MUL      r0,r0,r10
;;;1087   temp_SL/=6000L;
0003f2  fb90f0f1          SDIV     r0,r0,r1
;;;1088   Upes_eb2[2]=(signed short)temp_SL;
0003f6  80a8              STRH     r0,[r5,#4]
;;;1089   
;;;1090   //Вычисление температуры шкафа
;;;1091   
;;;1092   ibt._T[0]=t_ext[1]+273;
0003f8  f2081811          ADD      r8,r8,#0x111
0003fc  fa0ff488          SXTH     r4,r8
000400  e044              B        |L1.1164|
000402  0000              DCW      0x0000
                  |L1.1028|
                          DCD      ||area_number.31||
                  |L1.1032|
                          DCD      Kibat0
                  |L1.1036|
                          DCD      ad7705_buff_
                  |L1.1040|
                          DCD      bat
                  |L1.1044|
                          DCD      IZMAX
                  |L1.1048|
                          DCD      ADR_KI0BAT
                  |L1.1052|
                          DCD      ||.bss||+0x400
                  |L1.1056|
                          DCD      Kubat
                  |L1.1060|
                          DCD      Kubatm
                  |L1.1064|
                          DCD      Kibat1
                  |L1.1068|
                          DCD      AUSW_MAIN
                  |L1.1072|
                          DCD      Ktbat
                  |L1.1076|
                          DCD      Kuload
                  |L1.1080|
                          DCD      load_U
                  |L1.1084|
                          DCD      ND_EXT
                  |L1.1088|
                          DCD      Ktext
                  |L1.1092|
                          DCD      t_ext
                  |L1.1096|
                          DCD      bIBAT_SMKLBR
                  |L1.1100|
                          DCD      Ib_ips_termokompensat
                  |L1.1104|
                          DCD      out_I
                  |L1.1108|
                          DCD      ibat_metr_buff_
                  |L1.1112|
                          DCD      I_LOAD_MODE
                  |L1.1116|
                          DCD      NUMIST
                  |L1.1120|
                          DCD      bps
                  |L1.1124|
                          DCD      adc_buff_ext_
                  |L1.1128|
                          DCD      Kunet_ext
                  |L1.1132|
                          DCD      Uvv
                  |L1.1136|
                          DCD      Uvv0
                  |L1.1140|
                          DCD      net_U
                  |L1.1144|
                          DCD      eb2_data_short
                  |L1.1148|
                          DCD      Kvv_eb2
                  |L1.1152|
                          DCD      Uvv_eb2
                  |L1.1156|
                          DCD      Kpes_eb2
                  |L1.1160|
                          DCD      Upes_eb2
                  |L1.1164|
00048c  f8df8418          LDR      r8,|L1.2216|
000490  f8a84000          STRH     r4,[r8,#0]
;;;1093   ibt._T[1]=t_ext[2]+273;
000494  f2091911          ADD      r9,r9,#0x111
000498  fa0ff589          SXTH     r5,r9
00049c  f8a85002          STRH     r5,[r8,#2]
;;;1094   
;;;1095   ibt._nd[0]=ND_EXT[1];
0004a0  7859              LDRB     r1,[r3,#1]  ; ND_EXT
0004a2  f8881008          STRB     r1,[r8,#8]
;;;1096   ibt._nd[1]=ND_EXT[2];
0004a6  7898              LDRB     r0,[r3,#2]  ; ND_EXT
0004a8  f8880009          STRB     r0,[r8,#9]
;;;1097   
;;;1098   #ifndef UKU_TELECORE2015
;;;1099   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;1100   	{
;;;1101   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
0004ac  4bff              LDR      r3,|L1.2220|
0004ae  b901              CBNZ     r1,|L1.1202|
0004b0  b110              CBZ      r0,|L1.1208|
                  |L1.1202|
;;;1102   	}
;;;1103   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
0004b2  2901              CMP      r1,#1
0004b4  d00a              BEQ      |L1.1228|
0004b6  e00a              B        |L1.1230|
                  |L1.1208|
0004b8  eb040005          ADD      r0,r4,r5              ;1101
0004bc  eb0070d0          ADD      r0,r0,r0,LSR #31      ;1101
0004c0  f46f7188          MVN      r1,#0x110             ;1101
0004c4  eb010060          ADD      r0,r1,r0,ASR #1       ;1101
0004c8  8018              STRH     r0,[r3,#0]            ;1101
0004ca  e01c              B        |L1.1286|
                  |L1.1228|
0004cc  b108              CBZ      r0,|L1.1234|
                  |L1.1230|
;;;1104   	{
;;;1105   	t_box=ibt._T[1]-273;
;;;1106   	}
;;;1107   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
0004ce  b121              CBZ      r1,|L1.1242|
0004d0  e005              B        |L1.1246|
                  |L1.1234|
0004d2  f2a51511          SUB      r5,r5,#0x111          ;1105
0004d6  801d              STRH     r5,[r3,#0]            ;1105
0004d8  e015              B        |L1.1286|
                  |L1.1242|
0004da  2801              CMP      r0,#1
0004dc  d002              BEQ      |L1.1252|
                  |L1.1246|
;;;1108   	{
;;;1109   	t_box=ibt._T[0]-273;
;;;1110   	}
;;;1111   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
0004de  2901              CMP      r1,#1
0004e0  d004              BEQ      |L1.1260|
0004e2  e010              B        |L1.1286|
                  |L1.1252|
0004e4  f2a41411          SUB      r4,r4,#0x111          ;1109
0004e8  801c              STRH     r4,[r3,#0]            ;1109
0004ea  e00c              B        |L1.1286|
                  |L1.1260|
0004ec  2801              CMP      r0,#1
0004ee  d10a              BNE      |L1.1286|
;;;1112   	{
;;;1113   	if(t_ext_can_nd<5)t_box= t_ext_can;
0004f0  48ef              LDR      r0,|L1.2224|
0004f2  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
0004f4  2805              CMP      r0,#5
0004f6  d203              BCS      |L1.1280|
0004f8  48ee              LDR      r0,|L1.2228|
0004fa  8800              LDRH     r0,[r0,#0]  ; t_ext_can
0004fc  8018              STRH     r0,[r3,#0]
0004fe  e002              B        |L1.1286|
                  |L1.1280|
;;;1114   	else t_box=20;
000500  f04f0014          MOV      r0,#0x14
000504  8018              STRH     r0,[r3,#0]
                  |L1.1286|
;;;1115   	}
;;;1116   #endif
;;;1117   /*
;;;1118   //Вычисление температуры шкафа
;;;1119   
;;;1120   ibt._T[0]=bat[0]._Tb+273;
;;;1121   ibt._T[1]=bat[1]._Tb+273;
;;;1122   ibt._T[2]=t_ext[1]+273;
;;;1123   ibt._T[3]=t_ext[2]+273;
;;;1124   
;;;1125   ibt._nd[0]=bat[0]._nd;
;;;1126   ibt._nd[1]=bat[1]._nd;
;;;1127   ibt._nd[2]=ND_EXT[1];
;;;1128   ibt._nd[3]=ND_EXT[2];
;;;1129   
;;;1130   ibt._avg1=0;
;;;1131   ibt._avg_cnt=4;
;;;1132   
;;;1133   if(ibt._nd[0]==0)
;;;1134   	{
;;;1135   	ibt._avg1+=ibt._T[0];
;;;1136   	}
;;;1137   else 
;;;1138   	{
;;;1139   	ibt._avg_cnt--;
;;;1140   	}
;;;1141   
;;;1142   if(ibt._nd[1]==0)
;;;1143   	{
;;;1144   	ibt._avg1+=ibt._T[1];
;;;1145   	}
;;;1146   else 
;;;1147   	{
;;;1148   	ibt._avg_cnt--;
;;;1149   	}
;;;1150   
;;;1151   if(ibt._nd[2]==0)
;;;1152   	{
;;;1153   	ibt._avg1+=ibt._T[2];
;;;1154   	}
;;;1155   else 
;;;1156   	{
;;;1157   	ibt._avg_cnt--;
;;;1158   	}
;;;1159   
;;;1160   if(ibt._nd[3]==0)
;;;1161   	{
;;;1162   	ibt._avg1+=ibt._T[3];
;;;1163   	}
;;;1164   else 
;;;1165   	{
;;;1166   	ibt._avg_cnt--;
;;;1167   	}
;;;1168   
;;;1169   if(ibt._avg_cnt==0)
;;;1170   	{
;;;1171   	}
;;;1172   else
;;;1173   	{
;;;1174   	ibt._avg1/=ibt._avg_cnt;
;;;1175   	}
;;;1176   
;;;1177   
;;;1178   if(ibt._nd[0]!=0)
;;;1179   	{
;;;1180   	ibt._T_dispers[0]=0;
;;;1181   	}
;;;1182   else 
;;;1183   	{
;;;1184   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;1185   	}
;;;1186   
;;;1187   if(ibt._nd[1]!=0)
;;;1188   	{
;;;1189   	ibt._T_dispers[1]=0;
;;;1190   	}
;;;1191   else 
;;;1192   	{
;;;1193   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;1194   	}
;;;1195   
;;;1196   if(ibt._nd[2]!=0)
;;;1197   	{
;;;1198   	ibt._T_dispers[2]=0;
;;;1199   	}
;;;1200   else 
;;;1201   	{
;;;1202   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;1203   	}
;;;1204   
;;;1205   if(ibt._nd[3]!=0)
;;;1206   	{
;;;1207   	ibt._T_dispers[3]=0;
;;;1208   	}
;;;1209   else 
;;;1210   	{
;;;1211   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;1212   	}
;;;1213   
;;;1214   if(	ibt._nd[0]&&
;;;1215   	ibt._nd[1]&&
;;;1216   	ibt._nd[2]&&
;;;1217   	ibt._nd[3]
;;;1218   	)
;;;1219   	{
;;;1220   	t_box=(bps[0]._Ti);
;;;1221   	}
;;;1222   
;;;1223   else if(	ibt._nd[0]||
;;;1224   	ibt._nd[1]||
;;;1225   	ibt._nd[2]||
;;;1226   	ibt._nd[3]
;;;1227   	)
;;;1228   	{
;;;1229   	t_box=(ibt._avg1-273);
;;;1230   	}
;;;1231   else 
;;;1232   	{
;;;1233   	ibt._max_dispers_num=0;
;;;1234   	ibt._max_dispers=ibt._T_dispers[0];
;;;1235   
;;;1236   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;1237   		{
;;;1238   		ibt._max_dispers_num=1;
;;;1239   		ibt._max_dispers=ibt._T_dispers[1];
;;;1240   		}
;;;1241   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;1242   		{
;;;1243   		ibt._max_dispers_num=2;
;;;1244   		ibt._max_dispers=ibt._T_dispers[2];
;;;1245   		}
;;;1246   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;1247   		{
;;;1248   		ibt._max_dispers_num=3;
;;;1249   		ibt._max_dispers=ibt._T_dispers[3];
;;;1250   		}
;;;1251   
;;;1252   	ibt._avg2=0;
;;;1253   
;;;1254   	if(ibt._max_dispers_num!=0)
;;;1255   		{
;;;1256   		ibt._avg2+=ibt._T[0];
;;;1257   		}
;;;1258   	if(ibt._max_dispers_num!=1)
;;;1259   		{
;;;1260   		ibt._avg2+=ibt._T[1];
;;;1261   		}
;;;1262   	if(ibt._max_dispers_num!=2)
;;;1263   		{
;;;1264   		ibt._avg2+=ibt._T[2];
;;;1265   		}
;;;1266   	if(ibt._max_dispers_num!=3)
;;;1267   		{
;;;1268   		ibt._avg2+=ibt._T[3];
;;;1269   		}
;;;1270   
;;;1271   	t_box=(ibt._avg2/3)-273;
;;;1272   
;;;1273   	}*/
;;;1274   
;;;1275   
;;;1276   //*********************************************
;;;1277   
;;;1278   #ifndef TELECORE
;;;1279   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
000506  48ec              LDR      r0,|L1.2232|
000508  49ec              LDR      r1,|L1.2236|
00050a  7803              LDRB     r3,[r0,#0]  ; BAT_IS_ON
00050c  2b55              CMP      r3,#0x55
00050e  d104              BNE      |L1.1306|
000510  f1bc0fc8          CMP      r12,#0xc8
000514  dd01              BLE      |L1.1306|
000516  893b              LDRH     r3,[r7,#8]  ; bat
000518  840b              STRH     r3,[r1,#0x20]
                  |L1.1306|
;;;1280   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
00051a  7840              LDRB     r0,[r0,#1]  ; BAT_IS_ON
00051c  2855              CMP      r0,#0x55
00051e  d10a              BNE      |L1.1334|
000520  f9b7004e          LDRSH    r0,[r7,#0x4e]  ; bat
000524  28c8              CMP      r0,#0xc8
000526  dd06              BLE      |L1.1334|
000528  f9b70054          LDRSH    r0,[r7,#0x54]  ; bat
00052c  f9b73008          LDRSH    r3,[r7,#8]  ; bat
000530  4298              CMP      r0,r3
000532  dd00              BLE      |L1.1334|
000534  8408              STRH     r0,[r1,#0x20]
                  |L1.1334|
;;;1281   #endif
;;;1282   
;;;1283   #ifdef TELECORE
;;;1284   Ibmax=0;
;;;1285   /*
;;;1286   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;1287   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;1288   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;1289   */
;;;1290   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;1291   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;1292   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;1293   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;1294   #endif
;;;1295   //Ibmax=bat[0]._Ib;
;;;1296   //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;1297   
;;;1298   #ifdef UKU_TELECORE2017
;;;1299   Ibmax=0;
;;;1300   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;1301   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;1302   #endif
;;;1303   
;;;1304   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1305   Ibmax=Ib_ips_termokompensat;
;;;1306   #endif
;;;1307   for(i=0;i<NUMIST;i++)
000536  f04f0100          MOV      r1,#0
00053a  f9bb3000          LDRSH    r3,[r11,#0]           ;983
00053e  e047              B        |L1.1488|
                  |L1.1344|
;;;1308   	{
;;;1309   	if(bps[i]._cnt<25)
000540  eb010081          ADD      r0,r1,r1,LSL #2
000544  eb0000c1          ADD      r0,r0,r1,LSL #3
000548  eb0600c0          ADD      r0,r6,r0,LSL #3
00054c  78c4              LDRB     r4,[r0,#3]
00054e  2c19              CMP      r4,#0x19
000550  d228              BCS      |L1.1444|
;;;1310        	{
;;;1311        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
000552  7984              LDRB     r4,[r0,#6]
000554  79c5              LDRB     r5,[r0,#7]
000556  eb042405          ADD      r4,r4,r5,LSL #8
00055a  6244              STR      r4,[r0,#0x24]
;;;1312        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
00055c  7a04              LDRB     r4,[r0,#8]
00055e  7a45              LDRB     r5,[r0,#9]
000560  eb042405          ADD      r4,r4,r5,LSL #8
000564  6204              STR      r4,[r0,#0x20]
;;;1313        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
000566  7a84              LDRB     r4,[r0,#0xa]
000568  7ac5              LDRB     r5,[r0,#0xb]
00056a  eb042405          ADD      r4,r4,r5,LSL #8
00056e  61c4              STR      r4,[r0,#0x1c]
;;;1314        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
000570  7b04              LDRB     r4,[r0,#0xc]
000572  6284              STR      r4,[r0,#0x28]
;;;1315        	bps[i]._adr_ee=bps[i]._buff[7];
000574  7b44              LDRB     r4,[r0,#0xd]
000576  f8804056          STRB     r4,[r0,#0x56]
;;;1316        	bps[i]._flags_tm=bps[i]._buff[8];
00057a  7b84              LDRB     r4,[r0,#0xe]
00057c  f8804046          STRB     r4,[r0,#0x46]
;;;1317   	    //bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256); 
;;;1318   		bps[i]._Uisum=bps[i]._buff[10]+(bps[i]._buff[11]*256); 
000580  7c04              LDRB     r4,[r0,#0x10]
000582  7c45              LDRB     r5,[r0,#0x11]
000584  eb042405          ADD      r4,r4,r5,LSL #8
000588  6304              STR      r4,[r0,#0x30]
;;;1319   		bps[i].debug_info_to_uku0=bps[i]._buff[12]+(bps[i]._buff[13]*256); 
00058a  7c84              LDRB     r4,[r0,#0x12]
00058c  7cc5              LDRB     r5,[r0,#0x13]
00058e  eb042405          ADD      r4,r4,r5,LSL #8
000592  f8a0405e          STRH     r4,[r0,#0x5e]
;;;1320   		bps[i].debug_info_to_uku1=bps[i]._buff[14]+(bps[i]._buff[15]*256);    
000596  7d04              LDRB     r4,[r0,#0x14]
000598  7d45              LDRB     r5,[r0,#0x15]
00059a  eb042405          ADD      r4,r4,r5,LSL #8
00059e  f8a04060          STRH     r4,[r0,#0x60]
0005a2  e012              B        |L1.1482|
                  |L1.1444|
;;;1321        	} 
;;;1322   	else 
;;;1323        	{
;;;1324        	bps[i]._Uii=0; 
0005a4  61c2              STR      r2,[r0,#0x1c]
;;;1325        	bps[i]._Ii=0;
0005a6  6242              STR      r2,[r0,#0x24]
;;;1326        	bps[i]._Uin=0;
0005a8  6202              STR      r2,[r0,#0x20]
;;;1327        	bps[i]._Ti=0;
0005aa  6282              STR      r2,[r0,#0x28]
;;;1328        	bps[i]._flags_tm=0; 
0005ac  f8802046          STRB     r2,[r0,#0x46]
;;;1329   	     //bps[i]._rotor=0;
;;;1330   		bps[i]._Uisum=0; 
0005b0  6302              STR      r2,[r0,#0x30]
;;;1331   		bps[i].debug_info_to_uku0=bps[i]._buff[12]+(bps[i]._buff[13]*256); 
0005b2  7c84              LDRB     r4,[r0,#0x12]
0005b4  7cc5              LDRB     r5,[r0,#0x13]
0005b6  eb042405          ADD      r4,r4,r5,LSL #8
0005ba  f8a0405e          STRH     r4,[r0,#0x5e]
;;;1332   		bps[i].debug_info_to_uku1=bps[i]._buff[14]+(bps[i]._buff[15]*256);    
0005be  7d04              LDRB     r4,[r0,#0x14]
0005c0  7d45              LDRB     r5,[r0,#0x15]
0005c2  eb042405          ADD      r4,r4,r5,LSL #8
0005c6  f8a04060          STRH     r4,[r0,#0x60]
                  |L1.1482|
0005ca  f1010101          ADD      r1,r1,#1              ;1307
0005ce  b2c9              UXTB     r1,r1                 ;1307
                  |L1.1488|
0005d0  4299              CMP      r1,r3                 ;1307
0005d2  dbb5              BLT      |L1.1344|
;;;1333        	}
;;;1334        
;;;1335        }
;;;1336   
;;;1337   load_I=0;
0005d4  4dba              LDR      r5,|L1.2240|
;;;1338   #ifdef TELECORE
;;;1339   
;;;1340   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;1341   	{
;;;1342   	load_I-=lakb[i]._ch_curr/10;
;;;1343   	}*/
;;;1344   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;1345   #elif UKU_TELECORE2017
;;;1346   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;1347   #else
;;;1348   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
0005d6  f9b71008          LDRSH    r1,[r7,#8]  ; bat
0005da  f04f000a          MOV      r0,#0xa
0005de  fb91f1f0          SDIV     r1,r1,r0
0005e2  f9b74054          LDRSH    r4,[r7,#0x54]  ; bat
0005e6  fb94f0f0          SDIV     r0,r4,r0
0005ea  4408              ADD      r0,r0,r1
0005ec  f1c00000          RSB      r0,r0,#0
0005f0  b207              SXTH     r7,r0
0005f2  802f              STRH     r7,[r5,#0]
;;;1349   #endif
;;;1350   Isumm=0;
0005f4  4cb3              LDR      r4,|L1.2244|
0005f6  8022              STRH     r2,[r4,#0]
;;;1351   
;;;1352   for(i=0;i<NUMIST;i++)
0005f8  f04f0000          MOV      r0,#0
0005fc  e012              B        |L1.1572|
                  |L1.1534|
;;;1353        {
;;;1354        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
0005fe  eb000180          ADD      r1,r0,r0,LSL #2
000602  eb0101c0          ADD      r1,r1,r0,LSL #3
000606  eb0601c1          ADD      r1,r6,r1,LSL #3
00060a  f891c003          LDRB     r12,[r1,#3]
00060e  f1bc0f05          CMP      r12,#5
000612  d204              BCS      |L1.1566|
000614  6a49              LDR      r1,[r1,#0x24]
000616  f8b4c000          LDRH     r12,[r4,#0]  ; Isumm
00061a  4461              ADD      r1,r1,r12
00061c  8021              STRH     r1,[r4,#0]
                  |L1.1566|
00061e  f1000001          ADD      r0,r0,#1              ;1352
000622  b2c0              UXTB     r0,r0                 ;1352
                  |L1.1572|
000624  4298              CMP      r0,r3                 ;1352
000626  dbea              BLT      |L1.1534|
;;;1355        }  
;;;1356        
;;;1357   load_I=load_I+Isumm;
000628  8820              LDRH     r0,[r4,#0]  ; Isumm
00062a  4438              ADD      r0,r0,r7
00062c  b200              SXTH     r0,r0
00062e  8028              STRH     r0,[r5,#0]
;;;1358   if(load_I<0)load_I=0;
000630  2800              CMP      r0,#0
000632  da00              BGE      |L1.1590|
000634  802a              STRH     r2,[r5,#0]
                  |L1.1590|
;;;1359   
;;;1360   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1361   load_I=0;
;;;1362   
;;;1363   Isumm=0;
;;;1364   
;;;1365   for(i=0;i<NUMIST;i++)
;;;1366        {
;;;1367        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
;;;1368        }  
;;;1369        
;;;1370   load_I=load_I+Isumm;
;;;1371   if(load_I<0)load_I=0;
;;;1372   
;;;1373   #endif
;;;1374   
;;;1375   
;;;1376   
;;;1377   #ifdef UKU_GLONASS
;;;1378   inv[0]._Uio=6;
;;;1379   if (NUMINV)
;;;1380   	{
;;;1381   	for(i=0;i<NUMINV;i++)
;;;1382   		{
;;;1383   		if(bps[i+first_inv_slot]._cnt<25)
;;;1384        		{
;;;1385        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;1386        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;1387        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;1388        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;1389        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;1390   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;1391   			inv[i]._cnt=0;    
;;;1392        		} 
;;;1393   		else 
;;;1394        		{
;;;1395        		inv[i]._Uio=0; 
;;;1396        		inv[i]._Ii=0;
;;;1397        		inv[i]._Uin=0;
;;;1398        		inv[i]._Ti=0;
;;;1399        		inv[i]._flags_tm=0; 
;;;1400   //	     	inv[i]._rotor0;
;;;1401   			inv[i]._cnt=25;    
;;;1402        		}
;;;1403        	}
;;;1404      	}
;;;1405   #endif
;;;1406   
;;;1407   #ifndef UKU_GLONASS
;;;1408   if (NUMINV)
000636  48a4              LDR      r0,|L1.2248|
000638  f9b04000          LDRSH    r4,[r0,#0]  ; NUMINV
00063c  2c00              CMP      r4,#0
00063e  d066              BEQ      |L1.1806|
;;;1409   	{
;;;1410   	for(i=0;i<NUMINV;i++)
000640  f04f0300          MOV      r3,#0
;;;1411   		{
;;;1412   		if(bps[i+20]._cnt<25)
;;;1413        		{
;;;1414        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
000644  4da1              LDR      r5,|L1.2252|
000646  e060              B        |L1.1802|
                  |L1.1608|
000648  f1030014          ADD      r0,r3,#0x14           ;1412
00064c  eb000180          ADD      r1,r0,r0,LSL #2       ;1412
000650  eb0100c0          ADD      r0,r1,r0,LSL #3       ;1412
000654  eb0600c0          ADD      r0,r6,r0,LSL #3       ;1412
000658  78c1              LDRB     r1,[r0,#3]            ;1412
00065a  2919              CMP      r1,#0x19              ;1412
00065c  d239              BCS      |L1.1746|
00065e  7981              LDRB     r1,[r0,#6]
000660  79c7              LDRB     r7,[r0,#7]
000662  eb012707          ADD      r7,r1,r7,LSL #8
000666  eb030143          ADD      r1,r3,r3,LSL #1
00066a  eb051141          ADD      r1,r5,r1,LSL #5
00066e  61cf              STR      r7,[r1,#0x1c]
;;;1415        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
000670  7a07              LDRB     r7,[r0,#8]
000672  f890c009          LDRB     r12,[r0,#9]
000676  eb07270c          ADD      r7,r7,r12,LSL #8
00067a  62cf              STR      r7,[r1,#0x2c]
;;;1416        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
00067c  7a87              LDRB     r7,[r0,#0xa]
00067e  f890c00b          LDRB     r12,[r0,#0xb]
000682  eb07270c          ADD      r7,r7,r12,LSL #8
000686  618f              STR      r7,[r1,#0x18]
;;;1417        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
000688  7b07              LDRB     r7,[r0,#0xc]
00068a  620f              STR      r7,[r1,#0x20]
;;;1418        		inv[i]._flags_tm=bps[i+20]._buff[7];
00068c  7b47              LDRB     r7,[r0,#0xd]
00068e  f8817046          STRB     r7,[r1,#0x46]
;;;1419        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
000692  7b87              LDRB     r7,[r0,#0xe]
000694  f890c00f          LDRB     r12,[r0,#0xf]
000698  eb07270c          ADD      r7,r7,r12,LSL #8
00069c  628f              STR      r7,[r1,#0x28]
;;;1420        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
00069e  7c07              LDRB     r7,[r0,#0x10]
0006a0  f890c011          LDRB     r12,[r0,#0x11]
0006a4  eb07270c          ADD      r7,r7,r12,LSL #8
0006a8  624f              STR      r7,[r1,#0x24]
;;;1421   			inv[i]._cnt=0;
0006aa  708a              STRB     r2,[r1,#2]
;;;1422   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
0006ac  7c87              LDRB     r7,[r0,#0x12]
0006ae  f8817059          STRB     r7,[r1,#0x59]
;;;1423   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
0006b2  7cc7              LDRB     r7,[r0,#0x13]
0006b4  f881705a          STRB     r7,[r1,#0x5a]
;;;1424   			inv[i]._Pnom=bps[i+20]._buff[14]; 
0006b8  7d07              LDRB     r7,[r0,#0x14]
0006ba  f8817058          STRB     r7,[r1,#0x58]
;;;1425   			inv[i]._net_contr_en=bps[i+20]._buff[15];
0006be  7d47              LDRB     r7,[r0,#0x15]
0006c0  f881705b          STRB     r7,[r1,#0x5b]
;;;1426   			inv[i]._pwm_en=bps[i+20]._buff[16];  
0006c4  7d87              LDRB     r7,[r0,#0x16]
0006c6  f881705c          STRB     r7,[r1,#0x5c]
;;;1427   			inv[i]._phase_mode=bps[i+20]._buff[17];  
0006ca  7dc0              LDRB     r0,[r0,#0x17]
0006cc  f881005d          STRB     r0,[r1,#0x5d]
0006d0  e018              B        |L1.1796|
                  |L1.1746|
;;;1428        		} 
;;;1429   		else 
;;;1430        		{
;;;1431         		inv[i]._Ii=0;
0006d2  eb030043          ADD      r0,r3,r3,LSL #1
0006d6  eb051040          ADD      r0,r5,r0,LSL #5
0006da  61c2              STR      r2,[r0,#0x1c]
;;;1432   			inv[i]._Pio=0;
0006dc  62c2              STR      r2,[r0,#0x2c]
;;;1433   			inv[i]._Uio=0;
0006de  6182              STR      r2,[r0,#0x18]
;;;1434        		inv[i]._Ti=0;
0006e0  6202              STR      r2,[r0,#0x20]
;;;1435        		inv[i]._flags_tm=0; 
0006e2  f8802046          STRB     r2,[r0,#0x46]
;;;1436        		inv[i]._Uil=0;
0006e6  6242              STR      r2,[r0,#0x24]
;;;1437        		inv[i]._Uin=0;
0006e8  6282              STR      r2,[r0,#0x28]
;;;1438   			inv[i]._cnt=25; 
0006ea  f04f0119          MOV      r1,#0x19
0006ee  7081              STRB     r1,[r0,#2]
;;;1439   			inv[i]._Uoutmin=0; 
0006f0  f8802059          STRB     r2,[r0,#0x59]
;;;1440   			inv[i]._Uoutmax=0; 
0006f4  f880205a          STRB     r2,[r0,#0x5a]
;;;1441   			inv[i]._Pnom=0; 
0006f8  f8802058          STRB     r2,[r0,#0x58]
;;;1442   			inv[i]._net_contr_en=0;
0006fc  f880205b          STRB     r2,[r0,#0x5b]
;;;1443   			inv[i]._pwm_en=0;   
000700  f880205c          STRB     r2,[r0,#0x5c]
                  |L1.1796|
000704  f1030301          ADD      r3,r3,#1              ;1410
000708  b2db              UXTB     r3,r3                 ;1410
                  |L1.1802|
00070a  42a3              CMP      r3,r4                 ;1410
00070c  db9c              BLT      |L1.1608|
                  |L1.1806|
;;;1444   			   
;;;1445        		}
;;;1446        	}
;;;1447      	}
;;;1448   #endif
;;;1449   
;;;1450   
;;;1451   #ifdef UKU_TELECORE2015
;;;1452   //вычисление параметров работы батареи
;;;1453   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;1454   li_bat._batStat=bsOK;
;;;1455   if(BAT_TYPE==1) //COSLIGHT
;;;1456   	{
;;;1457   	if(li_bat._batStat==bsOK)
;;;1458   		{
;;;1459   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;1460   
;;;1461   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;1462   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;1463   	
;;;1464   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;1465   		li_bat._soc=lakb[0]._s_o_c;
;;;1466   		li_bat._soh=lakb[0]._s_o_h;
;;;1467   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;1468   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;1469   		li_bat._rbt=lakb[0]._r_b_t;
;;;1470   		}
;;;1471   	else 
;;;1472   		{
;;;1473   		li_bat._Ub=bat[0]._Ub;
;;;1474   		li_bat._Ib=bat[0]._Ib/10;
;;;1475   		li_bat._Tb=bat[0]._Tb;
;;;1476   		}
;;;1477   
;;;1478   	if((li_bat._485Error)||(li_bat._canError))
;;;1479   		{
;;;1480   		li_bat._batStat=bsOFF;
;;;1481   		}
;;;1482   	else li_bat._batStat=bsOK;
;;;1483   	}
;;;1484   else if(BAT_TYPE==2) //SACRED SUN
;;;1485   	{
;;;1486   	}
;;;1487   else if(BAT_TYPE==3) //ZTT
;;;1488   	{
;;;1489   	if(li_bat._batStat==bsOK)
;;;1490   		{
;;;1491   
;;;1492   		}
;;;1493   	}
;;;1494   #endif
;;;1495   
;;;1496   
;;;1497   /*
;;;1498   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;1499   	{
;;;1500   
;;;1501   
;;;1502   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;1503   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;1504   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;1505   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;1506   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;1507   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;1508   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;1509   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;1510   
;;;1511   	tempSS=0;
;;;1512   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;1513   
;;;1514   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;1515   
;;;1516   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;1517   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;1518   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;1519   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;1520   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;1521   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;1522   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;1523   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;1524   
;;;1525   	tempSS=0;
;;;1526   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;1527   
;;;1528   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;1529   
;;;1530   
;;;1531   	}*/
;;;1532   
;;;1533   
;;;1534   
;;;1535   }
00070e  e8bd9ff0          POP      {r4-r12,pc}
;;;1536   
                          ENDP

                  adc_init PROC
;;;1539   //-----------------------------------------------
;;;1540   void adc_init(void)
000712  486f              LDR      r0,|L1.2256|
;;;1541   {
;;;1542   
;;;1543   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
000714  6841              LDR      r1,[r0,#4]
000716  f4212140          BIC      r1,r1,#0xc0000
00071a  f4412180          ORR      r1,r1,#0x40000
00071e  6041              STR      r1,[r0,#4]
;;;1544   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
000720  6841              LDR      r1,[r0,#4]
000722  f4213140          BIC      r1,r1,#0x30000
000726  f4413180          ORR      r1,r1,#0x10000
00072a  6041              STR      r1,[r0,#4]
;;;1545   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
00072c  6841              LDR      r1,[r0,#4]
00072e  f4214140          BIC      r1,r1,#0xc000
000732  f4414180          ORR      r1,r1,#0x4000
000736  6041              STR      r1,[r0,#4]
;;;1546   
;;;1547   
;;;1548   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
000738  6c41              LDR      r1,[r0,#0x44]
00073a  f4212140          BIC      r1,r1,#0xc0000
00073e  f4412100          ORR      r1,r1,#0x80000
000742  6441              STR      r1,[r0,#0x44]
;;;1549   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
000744  6c41              LDR      r1,[r0,#0x44]
000746  f4213140          BIC      r1,r1,#0x30000
00074a  f4413100          ORR      r1,r1,#0x20000
00074e  6441              STR      r1,[r0,#0x44]
;;;1550   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
000750  6c41              LDR      r1,[r0,#0x44]
000752  f4214140          BIC      r1,r1,#0xc000
000756  f4414100          ORR      r1,r1,#0x8000
00075a  6441              STR      r1,[r0,#0x44]
;;;1551   
;;;1552   SET_REG(LPC_ADC->ADCR,0,24,3);
00075c  485d              LDR      r0,|L1.2260|
00075e  6801              LDR      r1,[r0,#0]
000760  f02161e0          BIC      r1,r1,#0x7000000
000764  6001              STR      r1,[r0,#0]
;;;1553   
;;;1554   SET_REG(LPC_ADC->ADCR,1,21,1);
000766  6801              LDR      r1,[r0,#0]
000768  f4411100          ORR      r1,r1,#0x200000
00076c  6001              STR      r1,[r0,#0]
;;;1555   SET_REG(LPC_ADC->ADCR,0,16,1);
00076e  6801              LDR      r1,[r0,#0]
000770  f4213180          BIC      r1,r1,#0x10000
000774  6001              STR      r1,[r0,#0]
;;;1556   SET_REG(LPC_ADC->ADCR,1,8,8);
000776  6801              LDR      r1,[r0,#0]
000778  f421417f          BIC      r1,r1,#0xff00
00077c  f4417180          ORR      r1,r1,#0x100
000780  6001              STR      r1,[r0,#0]
;;;1557   
;;;1558   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;1559   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;1560   	
;;;1561   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;1562        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;1563        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;1564   
;;;1565   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
000782  f44f7180          MOV      r1,#0x100
000786  60c1              STR      r1,[r0,#0xc]
000788  4853              LDR      r0,|L1.2264|
00078a  f44f0180          MOV      r1,#0x400000
00078e  6001              STR      r1,[r0,#0]
;;;1566   
;;;1567   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;1568   
;;;1569   
;;;1570   }
000790  4770              BX       lr
;;;1571   
                          ENDP

                  adc_drv7 PROC
;;;1572   //-----------------------------------------------
;;;1573   void adc_drv7(void) //(Uсети - постоянка)
000792  e92d41f0          PUSH     {r4-r8,lr}
;;;1574   {
;;;1575   //int temp_S;
;;;1576   //char i;
;;;1577   //signed short temp_SS;
;;;1578   
;;;1579   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
000796  4c49              LDR      r4,|L1.2236|
000798  342a              ADDS     r4,r4,#0x2a
00079a  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
00079c  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00079e  1a40              SUBS     r0,r0,r1
0007a0  b200              SXTH     r0,r0
0007a2  f7fffffe          BL       abs_pal
0007a6  1da6              ADDS     r6,r4,#6
0007a8  8030              STRH     r0,[r6,#0]
;;;1580   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
0007aa  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0007ac  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
0007ae  1a40              SUBS     r0,r0,r1
0007b0  b200              SXTH     r0,r0
0007b2  f7fffffe          BL       abs_pal
0007b6  8070              STRH     r0,[r6,#2]
;;;1581   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
0007b8  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0007ba  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
0007bc  1a40              SUBS     r0,r0,r1
0007be  b200              SXTH     r0,r0
0007c0  f7fffffe          BL       abs_pal
0007c4  80b0              STRH     r0,[r6,#4]
;;;1582   
;;;1583   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;1584   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;1585   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;1586   
;;;1587   
;;;1588   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
0007c6  f44f7196          MOV      r1,#0x12c
;;;1589   	{
;;;1590   	adc_result=adc_self_ch_buff[2];
0007ca  4d3c              LDR      r5,|L1.2236|
0007cc  4288              CMP      r0,r1                 ;1588
0007ce  da02              BGE      |L1.2006|
0007d0  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0007d2  82a8              STRH     r0,[r5,#0x14]
0007d4  e00c              B        |L1.2032|
                  |L1.2006|
;;;1591   	} 
;;;1592   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
0007d6  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
0007da  4288              CMP      r0,r1
0007dc  da02              BGE      |L1.2020|
;;;1593   	{
;;;1594   	adc_result=adc_self_ch_buff[1];
0007de  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
0007e0  82a8              STRH     r0,[r5,#0x14]
0007e2  e005              B        |L1.2032|
                  |L1.2020|
;;;1595   	}
;;;1596   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
0007e4  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
0007e8  4288              CMP      r0,r1
0007ea  da01              BGE      |L1.2032|
;;;1597   	{
;;;1598   	adc_result=adc_self_ch_buff[0];
0007ec  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
0007ee  82a8              STRH     r0,[r5,#0x14]
                  |L1.2032|
;;;1599   	}
;;;1600       //adc_result=92;
;;;1601   
;;;1602   if(adc_ch_net)
0007f0  78af              LDRB     r7,[r5,#2]  ; adc_ch_net
0007f2  2600              MOVS     r6,#0
0007f4  b32f              CBZ      r7,|L1.2114|
;;;1603   	{
;;;1604   
;;;1605   	main_power_buffer[0]+=(long)(adc_result);
0007f6  4839              LDR      r0,|L1.2268|
0007f8  f9b51014          LDRSH    r1,[r5,#0x14]  ; adc_result
0007fc  6802              LDR      r2,[r0,#0]  ; main_power_buffer
0007fe  440a              ADD      r2,r2,r1
000800  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;1606   	main_power_buffer[1]+=(long)(adc_result);
000802  6842              LDR      r2,[r0,#4]  ; main_power_buffer
000804  440a              ADD      r2,r2,r1
000806  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;1607   	main_power_buffer[2]+=(long)(adc_result);
000808  6882              LDR      r2,[r0,#8]  ; main_power_buffer
00080a  440a              ADD      r2,r2,r1
00080c  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;1608   	main_power_buffer[3]+=(long)(adc_result);
00080e  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
000810  4411              ADD      r1,r1,r2
000812  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;1609   
;;;1610   	adc_net_buff_cnt++;
000814  8ba9              LDRH     r1,[r5,#0x1c]  ; adc_net_buff_cnt
000816  f1010101          ADD      r1,r1,#1
00081a  b209              SXTH     r1,r1
00081c  83a9              STRH     r1,[r5,#0x1c]
;;;1611   	if(adc_net_buff_cnt>=0x1000)
00081e  f5b15f80          CMP      r1,#0x1000
000822  db00              BLT      |L1.2086|
;;;1612   		{
;;;1613   		adc_net_buff_cnt=0;
000824  83ae              STRH     r6,[r5,#0x1c]
                  |L1.2086|
;;;1614   		}
;;;1615   	if((adc_net_buff_cnt&0x03ff)==0)
000826  f9b5101c          LDRSH    r1,[r5,#0x1c]  ; adc_net_buff_cnt
00082a  058a              LSLS     r2,r1,#22
00082c  d131              BNE      |L1.2194|
;;;1616   		{
;;;1617   		#ifdef UKU_220
;;;1618   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;1619   		#else
;;;1620   		#ifdef UKU_220_V2
;;;1621   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;1622   		#else
;;;1623   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
00082e  ea4f21a1          ASR      r1,r1,#10
000832  f8502021          LDR      r2,[r0,r1,LSL #2]
000836  ea4f2222          ASR      r2,r2,#8
00083a  826a              STRH     r2,[r5,#0x12]
;;;1624   		#endif
;;;1625   		#endif
;;;1626   		main_power_buffer[adc_net_buff_cnt>>10]=0;
00083c  f8406021          STR      r6,[r0,r1,LSL #2]
000840  e027              B        |L1.2194|
                  |L1.2114|
;;;1627   		}
;;;1628   
;;;1629   
;;;1630   	} 
;;;1631   else if(!adc_ch_net)
;;;1632   	{
;;;1633   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
000842  4827              LDR      r0,|L1.2272|
000844  78ec              LDRB     r4,[r5,#3]  ; adc_ch
000846  792a              LDRB     r2,[r5,#4]  ; adc_ch_cnt
000848  eb001384          ADD      r3,r0,r4,LSL #6
00084c  f9b51014          LDRSH    r1,[r5,#0x14]  ; adc_result
000850  f8431022          STR      r1,[r3,r2,LSL #2]
;;;1634   	
;;;1635   	if((adc_ch_cnt&0x03)==0)
000854  0790              LSLS     r0,r2,#30
000856  d10f              BNE      |L1.2168|
;;;1636   		{
;;;1637   		long temp_L;
;;;1638   		char i;
;;;1639   		temp_L=0;
000858  4601              MOV      r1,r0
                  |L1.2138|
;;;1640   		for(i=0;i<16;i++)
;;;1641   			{
;;;1642   			temp_L+=adc_buff[adc_ch][i];
00085a  f853c020          LDR      r12,[r3,r0,LSL #2]
00085e  4461              ADD      r1,r1,r12
000860  f1000001          ADD      r0,r0,#1              ;1640
000864  b2c0              UXTB     r0,r0                 ;1640
000866  2810              CMP      r0,#0x10              ;1640
000868  d3f7              BCC      |L1.2138|
;;;1643   			}
;;;1644   		adc_buff_[adc_ch]= (short)(temp_L>>4);
00086a  ea4f1021          ASR      r0,r1,#4
00086e  491b              LDR      r1,|L1.2268|
000870  f1a10120          SUB      r1,r1,#0x20
000874  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.2168|
;;;1645   
;;;1646   		//adc_buff_[3]=346;
;;;1647   		}
;;;1648   	if(++adc_ch>=16) 
000878  1c64              ADDS     r4,r4,#1
00087a  b2e0              UXTB     r0,r4
00087c  70e8              STRB     r0,[r5,#3]
00087e  2810              CMP      r0,#0x10
000880  d307              BCC      |L1.2194|
;;;1649   		{
;;;1650   		adc_ch=0;
000882  70ee              STRB     r6,[r5,#3]
;;;1651   		adc_ch_cnt++;
000884  f1020201          ADD      r2,r2,#1
000888  b2d0              UXTB     r0,r2
00088a  7128              STRB     r0,[r5,#4]
;;;1652   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
00088c  2810              CMP      r0,#0x10
00088e  d300              BCC      |L1.2194|
000890  712e              STRB     r6,[r5,#4]
                  |L1.2194|
;;;1653   		}
;;;1654   	}
;;;1655   
;;;1656   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;1657   
;;;1658   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;1659   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;1660   /*
;;;1661   	{
;;;1662   	if((adc_cnt1&0x03)==0)
;;;1663   		{
;;;1664   		temp_S=0;
;;;1665   		for(i=0;i<16;i++)
;;;1666   			{
;;;1667   			temp_S+=adc_buff[adc_ch][i];
;;;1668   			} 
;;;1669            	adc_buff_[adc_ch]=temp_S>>4;
;;;1670             }
;;;1671   	}*/
;;;1672   
;;;1673   
;;;1674   		  
;;;1675   
;;;1676   adc_self_ch_cnt=0;
000892  706e              STRB     r6,[r5,#1]
;;;1677   
;;;1678   adc_ch_net++;
000894  f1070701          ADD      r7,r7,#1
;;;1679   adc_ch_net&=1;
000898  f0070001          AND      r0,r7,#1
00089c  70a8              STRB     r0,[r5,#2]
;;;1680   
;;;1681   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;1682   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;1683   
;;;1684   if(adc_ch_net)
;;;1685   	{
;;;1686   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;1687   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;1688   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
00089e  4a0d              LDR      r2,|L1.2260|
0008a0  b108              CBZ      r0,|L1.2214|
0008a2  6810              LDR      r0,[r2,#0]
0008a4  e01e              B        |L1.2276|
                  |L1.2214|
0008a6  e023              B        |L1.2288|
                  |L1.2216|
                          DCD      ibt
                  |L1.2220|
                          DCD      t_box
                  |L1.2224|
                          DCD      t_ext_can_nd
                  |L1.2228|
                          DCD      t_ext_can
                  |L1.2232|
                          DCD      BAT_IS_ON
                  |L1.2236|
                          DCD      ||area_number.31||
                  |L1.2240|
                          DCD      load_I
                  |L1.2244|
                          DCD      Isumm
                  |L1.2248|
                          DCD      NUMINV
                  |L1.2252|
                          DCD      inv
                  |L1.2256|
                          DCD      0x4002c000
                  |L1.2260|
                          DCD      0x40034000
                  |L1.2264|
                          DCD      0xe000e100
                  |L1.2268|
                          DCD      ||.bss||+0x420
                  |L1.2272|
                          DCD      ||.bss||
                  |L1.2276|
0008e4  f02000ff          BIC      r0,r0,#0xff
0008e8  f1000004          ADD      r0,r0,#4
0008ec  6010              STR      r0,[r2,#0]
0008ee  e03d              B        |L1.2412|
                  |L1.2288|
;;;1689   	}
;;;1690   else
;;;1691   	{
;;;1692   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;1693   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;1694   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
0008f0  78e9              LDRB     r1,[r5,#3]  ; adc_ch
0008f2  0708              LSLS     r0,r1,#28
0008f4  d406              BMI      |L1.2308|
0008f6  6810              LDR      r0,[r2,#0]
0008f8  f02000ff          BIC      r0,r0,#0xff
0008fc  f1000001          ADD      r0,r0,#1
000900  6010              STR      r0,[r2,#0]
000902  e005              B        |L1.2320|
                  |L1.2308|
;;;1695   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
000904  6810              LDR      r0,[r2,#0]
000906  f02000ff          BIC      r0,r0,#0xff
00090a  f1000002          ADD      r0,r0,#2
00090e  6010              STR      r0,[r2,#0]
                  |L1.2320|
;;;1696   
;;;1697   
;;;1698   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
000910  48fa              LDR      r0,|L1.3324|
000912  6803              LDR      r3,[r0,#0]
000914  f0435380          ORR      r3,r3,#0x10000000
000918  6003              STR      r3,[r0,#0]
;;;1699   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
00091a  6a03              LDR      r3,[r0,#0x20]
00091c  f0434380          ORR      r3,r3,#0x40000000
000920  6203              STR      r3,[r0,#0x20]
;;;1700   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
000922  6e03              LDR      r3,[r0,#0x60]
000924  f0436380          ORR      r3,r3,#0x4000000
000928  6603              STR      r3,[r0,#0x60]
;;;1701   
;;;1702   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
00092a  07cb              LSLS     r3,r1,#31
00092c  d00a              BEQ      |L1.2372|
;;;1703   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
00092e  6943              LDR      r3,[r0,#0x14]
000930  f0435380          ORR      r3,r3,#0x10000000
000934  6143              STR      r3,[r0,#0x14]
                  |L1.2358|
;;;1704   
;;;1705   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
000936  078b              LSLS     r3,r1,#30
000938  d409              BMI      |L1.2382|
00093a  6b43              LDR      r3,[r0,#0x34]
00093c  f0234380          BIC      r3,r3,#0x40000000
000940  6343              STR      r3,[r0,#0x34]
000942  e008              B        |L1.2390|
                  |L1.2372|
000944  6943              LDR      r3,[r0,#0x14]         ;1702
000946  f0235380          BIC      r3,r3,#0x10000000     ;1702
00094a  6143              STR      r3,[r0,#0x14]         ;1702
00094c  e7f3              B        |L1.2358|
                  |L1.2382|
;;;1706   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
00094e  6b43              LDR      r3,[r0,#0x34]
000950  f0434380          ORR      r3,r3,#0x40000000
000954  6343              STR      r3,[r0,#0x34]
                  |L1.2390|
;;;1707   
;;;1708   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
000956  0749              LSLS     r1,r1,#29
000958  d404              BMI      |L1.2404|
00095a  6f41              LDR      r1,[r0,#0x74]
00095c  f0216180          BIC      r1,r1,#0x4000000
000960  6741              STR      r1,[r0,#0x74]
000962  e003              B        |L1.2412|
                  |L1.2404|
;;;1709   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
000964  6f41              LDR      r1,[r0,#0x74]
000966  f0416180          ORR      r1,r1,#0x4000000
00096a  6741              STR      r1,[r0,#0x74]
                  |L1.2412|
;;;1710   	}
;;;1711   	
;;;1712   
;;;1713   
;;;1714   
;;;1715   LPC_ADC->ADCR |=  (1<<24);
00096c  6810              LDR      r0,[r2,#0]
00096e  f0407080          ORR      r0,r0,#0x1000000
000972  6010              STR      r0,[r2,#0]
                  |L1.2420|
;;;1716   
;;;1717   }
000974  e8bd81f0          POP      {r4-r8,pc}
;;;1718   
                          ENDP

                  avg_hndl PROC
;;;1975   //-----------------------------------------------
;;;1976   void avg_hndl(void)
000978  bf00              NOP      
;;;1977   { 
;;;1978   
;;;1979   
;;;1980   avg_hndl_end:
;;;1981   __nop();  
;;;1982   }
00097a  4770              BX       lr
;;;1983   
                          ENDP

                  u_out_reg_hndl PROC
;;;1984   //-----------------------------------------------
;;;1985   void u_out_reg_hndl(void)
00097c  4770              BX       lr
;;;1986   { 
;;;1987   
;;;1988   }
;;;1989   
                          ENDP

                  rele_av_hndl PROC
;;;2002   //-----------------------------------------------
;;;2003   void rele_av_hndl(void)
00097e  4770              BX       lr
;;;2004   {
;;;2005   
;;;2006   }
;;;2007   
                          ENDP

                  rele_hndl PROC
;;;2008   //*************-----------------------------------------------
;;;2009   void rele_hndl(void)
000980  4770              BX       lr
;;;2010   {
;;;2011   
;;;2012   
;;;2013   }
;;;2014   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;2027   //-----------------------------------------------
;;;2028   void powerAntiAliasingHndl(void)
000982  b570              PUSH     {r4-r6,lr}
;;;2029   {
;;;2030   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
000984  230a              MOVS     r3,#0xa
000986  4cdf              LDR      r4,|L1.3332|
000988  48dd              LDR      r0,|L1.3328|
;;;2031   	{
;;;2032   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;2033   	if(powerSummaryCnt>=10)
;;;2034   		{
;;;2035   		power_summary=power_summary_tempo;
;;;2036   		}
;;;2037   	}
;;;2038   else powerSummaryCnt=0;
00098a  2500              MOVS     r5,#0
00098c  6822              LDR      r2,[r4,#0]            ;2030  ; power_summary_tempo_old
00098e  6800              LDR      r0,[r0,#0]            ;2030  ; power_summary_tempo
000990  fbb2f6f3          UDIV     r6,r2,r3              ;2030
000994  fbb0f1f3          UDIV     r1,r0,r3              ;2030
000998  4adb              LDR      r2,|L1.3336|
00099a  42b1              CMP      r1,r6                 ;2030
00099c  d10b              BNE      |L1.2486|
00099e  7811              LDRB     r1,[r2,#0]            ;2032  ; powerSummaryCnt
0009a0  290f              CMP      r1,#0xf               ;2032
0009a2  d202              BCS      |L1.2474|
0009a4  f1010101          ADD      r1,r1,#1              ;2032
0009a8  7011              STRB     r1,[r2,#0]            ;2032
                  |L1.2474|
0009aa  7811              LDRB     r1,[r2,#0]            ;2033  ; powerSummaryCnt
0009ac  290a              CMP      r1,#0xa               ;2033
0009ae  d303              BCC      |L1.2488|
0009b0  49d6              LDR      r1,|L1.3340|
0009b2  6008              STR      r0,[r1,#0]            ;2035  ; power_summary
0009b4  e000              B        |L1.2488|
                  |L1.2486|
0009b6  7015              STRB     r5,[r2,#0]
                  |L1.2488|
;;;2039   power_summary_tempo_old=power_summary_tempo;
0009b8  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;2040   
;;;2041   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
0009ba  48d5              LDR      r0,|L1.3344|
0009bc  4cd5              LDR      r4,|L1.3348|
0009be  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
0009c2  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
0009c6  fbb0f1f3          UDIV     r1,r0,r3
0009ca  fbb2f3f3          UDIV     r3,r2,r3
;;;2042   	{
;;;2043   	if(powerCurrentCnt<15)powerCurrentCnt++;
0009ce  4ad2              LDR      r2,|L1.3352|
0009d0  4299              CMP      r1,r3                 ;2041
0009d2  d10b              BNE      |L1.2540|
0009d4  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
0009d6  290f              CMP      r1,#0xf
0009d8  d202              BCS      |L1.2528|
0009da  f1010101          ADD      r1,r1,#1
0009de  7011              STRB     r1,[r2,#0]
                  |L1.2528|
;;;2044   	if(powerCurrentCnt>=10)
0009e0  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
0009e2  290a              CMP      r1,#0xa
0009e4  d303              BCC      |L1.2542|
;;;2045   		{
;;;2046   		power_current=power_current_tempo;
0009e6  49cd              LDR      r1,|L1.3356|
0009e8  8008              STRH     r0,[r1,#0]
0009ea  e000              B        |L1.2542|
                  |L1.2540|
;;;2047   		}
;;;2048   	}
;;;2049   else powerCurrentCnt=0;
0009ec  7015              STRB     r5,[r2,#0]
                  |L1.2542|
;;;2050   power_current_tempo_old=power_current_tempo;
0009ee  8020              STRH     r0,[r4,#0]
;;;2051   }
0009f0  bd70              POP      {r4-r6,pc}
;;;2052   
                          ENDP

                  avt_hndl PROC
;;;2241   //-----------------------------------------------
;;;2242   void avt_hndl(void)
0009f2  b570              PUSH     {r4-r6,lr}
;;;2243   {
;;;2244   char i;
;;;2245   for(i=0;i<12;i++)
0009f4  f04f0000          MOV      r0,#0
;;;2246   	{
;;;2247   	if(eb2_data_short[6]&(1<<i))
0009f8  49c9              LDR      r1,|L1.3360|
;;;2248   		{
;;;2249   		avt_stat[i]=avtON;
0009fa  4dca              LDR      r5,|L1.3364|
0009fc  f04f0401          MOV      r4,#1                 ;2247
000a00  f9b1200c          LDRSH    r2,[r1,#0xc]          ;2247
000a04  4603              MOV      r3,r0                 ;2245
                  |L1.2566|
000a06  fa04f100          LSL      r1,r4,r0              ;2247
000a0a  420a              TST      r2,r1                 ;2247
000a0c  d001              BEQ      |L1.2578|
000a0e  542c              STRB     r4,[r5,r0]
000a10  e000              B        |L1.2580|
                  |L1.2578|
;;;2250   		}
;;;2251   	else avt_stat[i]=avtOFF;
000a12  542b              STRB     r3,[r5,r0]
                  |L1.2580|
000a14  f1000001          ADD      r0,r0,#1              ;2245
000a18  b2c0              UXTB     r0,r0                 ;2245
000a1a  280c              CMP      r0,#0xc               ;2245
000a1c  d3f3              BCC      |L1.2566|
;;;2252   	}
;;;2253   
;;;2254   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
000a1e  4ec2              LDR      r6,|L1.3368|
000a20  7828              LDRB     r0,[r5,#0]  ; avt_stat
000a22  4cc2              LDR      r4,|L1.3372|
000a24  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
000a26  4281              CMP      r1,r0
000a28  d00b              BEQ      |L1.2626|
000a2a  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000a2e  2901              CMP      r1,#1
000a30  db07              BLT      |L1.2626|
;;;2255   	{
;;;2256   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
000a32  2801              CMP      r0,#1
000a34  d07e              BEQ      |L1.2868|
;;;2257   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
000a36  2300              MOVS     r3,#0
000a38  2201              MOVS     r2,#1
000a3a  210b              MOVS     r1,#0xb
000a3c  a0bc              ADR      r0,|L1.3376|
000a3e  f7fffffe          BL       snmp_trap_send
                  |L1.2626|
;;;2258   	}
;;;2259   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
000a42  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
000a44  7868              LDRB     r0,[r5,#1]  ; avt_stat
000a46  4281              CMP      r1,r0
000a48  d00b              BEQ      |L1.2658|
000a4a  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000a4e  2902              CMP      r1,#2
000a50  db07              BLT      |L1.2658|
;;;2260   	{
;;;2261   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
000a52  2801              CMP      r0,#1
000a54  d06f              BEQ      |L1.2870|
;;;2262   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
000a56  2300              MOVS     r3,#0
000a58  2202              MOVS     r2,#2
000a5a  210b              MOVS     r1,#0xb
000a5c  a0b9              ADR      r0,|L1.3396|
000a5e  f7fffffe          BL       snmp_trap_send
                  |L1.2658|
;;;2263   	}
;;;2264   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
000a62  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
000a64  78a8              LDRB     r0,[r5,#2]  ; avt_stat
000a66  4281              CMP      r1,r0
000a68  d00b              BEQ      |L1.2690|
000a6a  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000a6e  2903              CMP      r1,#3
000a70  db07              BLT      |L1.2690|
;;;2265   	{
;;;2266   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
000a72  2801              CMP      r0,#1
000a74  d072              BEQ      |L1.2908|
;;;2267   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
000a76  2300              MOVS     r3,#0
000a78  2203              MOVS     r2,#3
000a7a  210b              MOVS     r1,#0xb
000a7c  a0b6              ADR      r0,|L1.3416|
000a7e  f7fffffe          BL       snmp_trap_send
                  |L1.2690|
;;;2268   	}
;;;2269   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
000a82  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
000a84  78e8              LDRB     r0,[r5,#3]  ; avt_stat
000a86  4281              CMP      r1,r0
000a88  d00b              BEQ      |L1.2722|
000a8a  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000a8e  2904              CMP      r1,#4
000a90  db07              BLT      |L1.2722|
;;;2270   	{
;;;2271   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
000a92  2801              CMP      r0,#1
000a94  d079              BEQ      |L1.2954|
;;;2272   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
000a96  2300              MOVS     r3,#0
000a98  2204              MOVS     r2,#4
000a9a  210b              MOVS     r1,#0xb
000a9c  a0b3              ADR      r0,|L1.3436|
000a9e  f7fffffe          BL       snmp_trap_send
                  |L1.2722|
;;;2273   	}
;;;2274   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
000aa2  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
000aa4  7928              LDRB     r0,[r5,#4]  ; avt_stat
000aa6  4281              CMP      r1,r0
000aa8  d00b              BEQ      |L1.2754|
000aaa  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000aae  2905              CMP      r1,#5
000ab0  db07              BLT      |L1.2754|
;;;2275   	{
;;;2276   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
000ab2  2801              CMP      r0,#1
000ab4  d071              BEQ      |L1.2970|
;;;2277   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
000ab6  2300              MOVS     r3,#0
000ab8  2205              MOVS     r2,#5
000aba  210b              MOVS     r1,#0xb
000abc  a0b0              ADR      r0,|L1.3456|
000abe  f7fffffe          BL       snmp_trap_send
                  |L1.2754|
;;;2278   	}
;;;2279   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
000ac2  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
000ac4  7968              LDRB     r0,[r5,#5]  ; avt_stat
000ac6  4281              CMP      r1,r0
000ac8  d00b              BEQ      |L1.2786|
000aca  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000ace  2906              CMP      r1,#6
000ad0  db07              BLT      |L1.2786|
;;;2280   	{
;;;2281   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
000ad2  2801              CMP      r0,#1
000ad4  d068              BEQ      |L1.2984|
;;;2282   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
000ad6  2300              MOVS     r3,#0
000ad8  2206              MOVS     r2,#6
000ada  210b              MOVS     r1,#0xb
000adc  a0ad              ADR      r0,|L1.3476|
000ade  f7fffffe          BL       snmp_trap_send
                  |L1.2786|
;;;2283   	}
;;;2284   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
000ae2  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
000ae4  79a8              LDRB     r0,[r5,#6]  ; avt_stat
000ae6  4281              CMP      r1,r0
000ae8  d00b              BEQ      |L1.2818|
000aea  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000aee  2907              CMP      r1,#7
000af0  db07              BLT      |L1.2818|
;;;2285   	{
;;;2286   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
000af2  2801              CMP      r0,#1
000af4  d05f              BEQ      |L1.2998|
;;;2287   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
000af6  2300              MOVS     r3,#0
000af8  2207              MOVS     r2,#7
000afa  210b              MOVS     r1,#0xb
000afc  a0aa              ADR      r0,|L1.3496|
000afe  f7fffffe          BL       snmp_trap_send
                  |L1.2818|
;;;2288   	}
;;;2289   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
000b02  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
000b04  79e8              LDRB     r0,[r5,#7]  ; avt_stat
000b06  4281              CMP      r1,r0
000b08  d00b              BEQ      |L1.2850|
000b0a  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000b0e  2908              CMP      r1,#8
000b10  db07              BLT      |L1.2850|
;;;2290   	{
;;;2291   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
000b12  2801              CMP      r0,#1
000b14  d056              BEQ      |L1.3012|
;;;2292   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
000b16  2300              MOVS     r3,#0
000b18  2208              MOVS     r2,#8
000b1a  210b              MOVS     r1,#0xb
000b1c  a0a7              ADR      r0,|L1.3516|
000b1e  f7fffffe          BL       snmp_trap_send
                  |L1.2850|
;;;2293   	}
;;;2294   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
000b22  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
000b24  7a28              LDRB     r0,[r5,#8]  ; avt_stat
000b26  4281              CMP      r1,r0
000b28  d00e              BEQ      |L1.2888|
000b2a  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000b2e  2909              CMP      r1,#9
000b30  db0a              BLT      |L1.2888|
;;;2295   	{
;;;2296   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
000b32  e001              B        |L1.2872|
                  |L1.2868|
000b34  e013              B        |L1.2910|
                  |L1.2870|
000b36  e019              B        |L1.2924|
                  |L1.2872|
000b38  2801              CMP      r0,#1
000b3a  d04a              BEQ      |L1.3026|
;;;2297   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
000b3c  2300              MOVS     r3,#0
000b3e  2209              MOVS     r2,#9
000b40  210b              MOVS     r1,#0xb
000b42  a0a3              ADR      r0,|L1.3536|
000b44  f7fffffe          BL       snmp_trap_send
                  |L1.2888|
;;;2298   	}
;;;2299   
;;;2300   for(i=0;i<12;i++)
000b48  f04f0000          MOV      r0,#0
                  |L1.2892|
;;;2301   	{
;;;2302   	avt_stat_old[i]=avt_stat[i];
000b4c  5c29              LDRB     r1,[r5,r0]
000b4e  5431              STRB     r1,[r6,r0]
000b50  f1000001          ADD      r0,r0,#1              ;2300
000b54  b2c0              UXTB     r0,r0                 ;2300
000b56  280c              CMP      r0,#0xc               ;2300
000b58  d3f8              BCC      |L1.2892|
;;;2303   	}
;;;2304   }
000b5a  bd70              POP      {r4-r6,pc}
                  |L1.2908|
000b5c  e00e              B        |L1.2940|
                  |L1.2910|
000b5e  2301              MOVS     r3,#1                 ;2256
000b60  461a              MOV      r2,r3                 ;2256
000b62  210b              MOVS     r1,#0xb               ;2256
000b64  a09f              ADR      r0,|L1.3556|
000b66  f7fffffe          BL       snmp_trap_send
000b6a  e76a              B        |L1.2626|
                  |L1.2924|
000b6c  2301              MOVS     r3,#1                 ;2261
000b6e  2202              MOVS     r2,#2                 ;2261
000b70  210b              MOVS     r1,#0xb               ;2261
000b72  a0a1              ADR      r0,|L1.3576|
000b74  f7fffffe          BL       snmp_trap_send
000b78  e773              B        |L1.2658|
000b7a  e006              B        |L1.2954|
                  |L1.2940|
000b7c  2301              MOVS     r3,#1                 ;2266
000b7e  2203              MOVS     r2,#3                 ;2266
000b80  210b              MOVS     r1,#0xb               ;2266
000b82  a0a2              ADR      r0,|L1.3596|
000b84  f7fffffe          BL       snmp_trap_send
000b88  e77b              B        |L1.2690|
                  |L1.2954|
000b8a  2301              MOVS     r3,#1                 ;2271
000b8c  2204              MOVS     r2,#4                 ;2271
000b8e  210b              MOVS     r1,#0xb               ;2271
000b90  a0a3              ADR      r0,|L1.3616|
000b92  f7fffffe          BL       snmp_trap_send
000b96  e784              B        |L1.2722|
000b98  e7ff              B        |L1.2970|
                  |L1.2970|
000b9a  2301              MOVS     r3,#1                 ;2276
000b9c  2205              MOVS     r2,#5                 ;2276
000b9e  210b              MOVS     r1,#0xb               ;2276
000ba0  a0a4              ADR      r0,|L1.3636|
000ba2  f7fffffe          BL       snmp_trap_send
000ba6  e78c              B        |L1.2754|
                  |L1.2984|
000ba8  2301              MOVS     r3,#1                 ;2281
000baa  2206              MOVS     r2,#6                 ;2281
000bac  210b              MOVS     r1,#0xb               ;2281
000bae  a0a6              ADR      r0,|L1.3656|
000bb0  f7fffffe          BL       snmp_trap_send
000bb4  e795              B        |L1.2786|
                  |L1.2998|
000bb6  2301              MOVS     r3,#1                 ;2286
000bb8  2207              MOVS     r2,#7                 ;2286
000bba  210b              MOVS     r1,#0xb               ;2286
000bbc  a0a7              ADR      r0,|L1.3676|
000bbe  f7fffffe          BL       snmp_trap_send
000bc2  e79e              B        |L1.2818|
                  |L1.3012|
000bc4  2301              MOVS     r3,#1                 ;2291
000bc6  2208              MOVS     r2,#8                 ;2291
000bc8  210b              MOVS     r1,#0xb               ;2291
000bca  a0a9              ADR      r0,|L1.3696|
000bcc  f7fffffe          BL       snmp_trap_send
000bd0  e7a7              B        |L1.2850|
                  |L1.3026|
000bd2  2301              MOVS     r3,#1                 ;2296
000bd4  2209              MOVS     r2,#9                 ;2296
000bd6  210b              MOVS     r1,#0xb               ;2296
000bd8  a0aa              ADR      r0,|L1.3716|
000bda  f7fffffe          BL       snmp_trap_send
000bde  e7b3              B        |L1.2888|
;;;2305   
                          ENDP

                  overload_hndl PROC
;;;3046   //-----------------------------------------------
;;;3047   void overload_hndl(void)
000be0  b430              PUSH     {r4,r5}
;;;3048   {
;;;3049   
;;;3050   if(main_1Hz_cnt<30)return;
000be2  48ad              LDR      r0,|L1.3736|
000be4  f9b00000          LDRSH    r0,[r0,#0]  ; main_1Hz_cnt
000be8  281e              CMP      r0,#0x1e
000bea  db2e              BLT      |L1.3146|
;;;3051   
;;;3052   if((out_U<UOUT)&&((UOUT-out_U)>50))
000bec  48ab              LDR      r0,|L1.3740|
;;;3053   	{
;;;3054   	if(overloadHndlCnt<(TZAS*10))
000bee  4bad              LDR      r3,|L1.3748|
000bf0  f9b02000          LDRSH    r2,[r0,#0]            ;3052  ; out_U
000bf4  48aa              LDR      r0,|L1.3744|
000bf6  f9b01000          LDRSH    r1,[r0,#0]            ;3052  ; UOUT
000bfa  f9b30000          LDRSH    r0,[r3,#0]
000bfe  428a              CMP      r2,r1                 ;3052
000c00  da15              BGE      |L1.3118|
000c02  1a8c              SUBS     r4,r1,r2              ;3052
000c04  2c32              CMP      r4,#0x32              ;3052
000c06  dd12              BLE      |L1.3118|
000c08  49a7              LDR      r1,|L1.3752|
000c0a  f9b11000          LDRSH    r1,[r1,#0]  ; TZAS
000c0e  eb010181          ADD      r1,r1,r1,LSL #2
000c12  ebb00f41          CMP      r0,r1,LSL #1
000c16  da18              BGE      |L1.3146|
;;;3055   		{
;;;3056   		overloadHndlCnt++;
000c18  f1000001          ADD      r0,r0,#1
000c1c  b200              SXTH     r0,r0
000c1e  8018              STRH     r0,[r3,#0]
;;;3057   		if(overloadHndlCnt==(TZAS*10))
000c20  ebb00f41          CMP      r0,r1,LSL #1
000c24  d111              BNE      |L1.3146|
;;;3058   			{
;;;3059   			avar_overload_hndl(1);
000c26  bc30              POP      {r4,r5}
000c28  2001              MOVS     r0,#1
000c2a  f7ffbffe          B.W      avar_overload_hndl
                  |L1.3118|
;;;3060   			}
;;;3061   		}
;;;3062   	}
;;;3063   else if(out_U>(UOUT-20))
000c2e  3914              SUBS     r1,r1,#0x14
000c30  428a              CMP      r2,r1
000c32  dd0a              BLE      |L1.3146|
;;;3064   	{
;;;3065   	if(overloadHndlCnt)
000c34  2800              CMP      r0,#0
000c36  d008              BEQ      |L1.3146|
;;;3066   		{
;;;3067   		overloadHndlCnt--;
000c38  f1a00001          SUB      r0,r0,#1
000c3c  b200              SXTH     r0,r0
000c3e  8018              STRH     r0,[r3,#0]
;;;3068   		if(overloadHndlCnt==0)
000c40  2800              CMP      r0,#0
000c42  d102              BNE      |L1.3146|
;;;3069   			{
;;;3070   			avar_overload_hndl(0);
000c44  bc30              POP      {r4,r5}
000c46  f7ffbffe          B.W      avar_overload_hndl
                  |L1.3146|
;;;3071   			}
;;;3072   		}
;;;3073   	}
;;;3074   
;;;3075   }
000c4a  bc30              POP      {r4,r5}
000c4c  4770              BX       lr
;;;3076   
                          ENDP

                  u_avar_hndl PROC
;;;3077   //-----------------------------------------------
;;;3078   void u_avar_hndl(void)
000c4e  e92d41f0          PUSH     {r4-r8,lr}
;;;3079   {
;;;3080   
;;;3081   if(main_1Hz_cnt<10)return;
000c52  4891              LDR      r0,|L1.3736|
000c54  f9b00000          LDRSH    r0,[r0,#0]  ; main_1Hz_cnt
000c58  280a              CMP      r0,#0xa
000c5a  db4c              BLT      |L1.3318|
;;;3082   
;;;3083   if(out_U>UOUTMAX)
000c5c  4e8f              LDR      r6,|L1.3740|
000c5e  4893              LDR      r0,|L1.3756|
;;;3084   	{
;;;3085   	if(uAvarHndlOutUMaxCnt<(10*TZAS))
000c60  4f93              LDR      r7,|L1.3760|
000c62  f9b61000          LDRSH    r1,[r6,#0]            ;3083  ; out_U
000c66  f9b02000          LDRSH    r2,[r0,#0]            ;3083  ; UOUTMAX
000c6a  f9b70000          LDRSH    r0,[r7,#0]
000c6e  2500              MOVS     r5,#0
000c70  4c8d              LDR      r4,|L1.3752|
000c72  4291              CMP      r1,r2                 ;3083
000c74  dd17              BLE      |L1.3238|
000c76  f9b42000          LDRSH    r2,[r4,#0]  ; TZAS
000c7a  eb020382          ADD      r3,r2,r2,LSL #2
000c7e  ebb00f43          CMP      r0,r3,LSL #1
000c82  da0a              BGE      |L1.3226|
;;;3086   		{
;;;3087   		uAvarHndlOutUMaxCnt++;
000c84  f1000001          ADD      r0,r0,#1
000c88  b200              SXTH     r0,r0
000c8a  8038              STRH     r0,[r7,#0]
;;;3088   		if(uAvarHndlOutUMaxCnt>=(10*TZAS))
000c8c  ebb00f43          CMP      r0,r3,LSL #1
000c90  db15              BLT      |L1.3262|
;;;3089   			{
;;;3090   			avar_u_out_hndl(1,out_U);
000c92  2001              MOVS     r0,#1
000c94  f7fffffe          BL       avar_u_out_hndl
000c98  e011              B        |L1.3262|
                  |L1.3226|
;;;3091   			}
;;;3092   		}
;;;3093   	else uAvarHndlOutUMaxCnt=(10*TZAS);
000c9a  eb020082          ADD      r0,r2,r2,LSL #2
000c9e  ea4f0040          LSL      r0,r0,#1
000ca2  8038              STRH     r0,[r7,#0]
000ca4  e00b              B        |L1.3262|
                  |L1.3238|
;;;3094   	}
;;;3095   else 
;;;3096   	{
;;;3097   	if(uAvarHndlOutUMaxCnt>0)
000ca6  2800              CMP      r0,#0
000ca8  dd08              BLE      |L1.3260|
;;;3098   		{
;;;3099   		uAvarHndlOutUMaxCnt--;
000caa  f1a00001          SUB      r0,r0,#1
000cae  b200              SXTH     r0,r0
000cb0  8038              STRH     r0,[r7,#0]
;;;3100   		if(uAvarHndlOutUMaxCnt==0)
000cb2  b920              CBNZ     r0,|L1.3262|
;;;3101   			{
;;;3102   			avar_u_out_hndl(0,out_U);
000cb4  2000              MOVS     r0,#0
000cb6  f7fffffe          BL       avar_u_out_hndl
000cba  e000              B        |L1.3262|
                  |L1.3260|
;;;3103   			}
;;;3104   		}
;;;3105   	else uAvarHndlOutUMaxCnt=0;
000cbc  803d              STRH     r5,[r7,#0]
                  |L1.3262|
;;;3106   	}
;;;3107   
;;;3108   if(out_U<UOUTMIN)
000cbe  487d              LDR      r0,|L1.3764|
000cc0  f9b61000          LDRSH    r1,[r6,#0]  ; out_U
;;;3109   	{
;;;3110   	if(uAvarHndlOutUMinCnt<(10*TZAS))
000cc4  4e7c              LDR      r6,|L1.3768|
000cc6  f9b00000          LDRSH    r0,[r0,#0]            ;3108  ; UOUTMIN
000cca  4281              CMP      r1,r0                 ;3108
000ccc  da14              BGE      |L1.3320|
000cce  f9b40000          LDRSH    r0,[r4,#0]  ; TZAS
000cd2  f9b62000          LDRSH    r2,[r6,#0]  ; uAvarHndlOutUMinCnt
000cd6  eb000380          ADD      r3,r0,r0,LSL #2
000cda  ebb20f43          CMP      r2,r3,LSL #1
000cde  da0c              BGE      |L1.3322|
;;;3111   		{
;;;3112   		uAvarHndlOutUMinCnt++;
000ce0  f1020201          ADD      r2,r2,#1
000ce4  b210              SXTH     r0,r2
000ce6  8030              STRH     r0,[r6,#0]
;;;3113   		if(uAvarHndlOutUMinCnt>=(10*TZAS))
000ce8  ebb00f43          CMP      r0,r3,LSL #1
000cec  db02              BLT      |L1.3316|
;;;3114   			{
;;;3115   			avar_u_out_hndl(2,out_U);
000cee  2002              MOVS     r0,#2
000cf0  f7fffffe          BL       avar_u_out_hndl
                  |L1.3316|
000cf4  e0f6              B        |L1.3812|
                  |L1.3318|
000cf6  e148              B        |L1.3978|
                  |L1.3320|
000cf8  e0e6              B        |L1.3784|
                  |L1.3322|
000cfa  e0df              B        |L1.3772|
                  |L1.3324|
                          DCD      0x2009c000
                  |L1.3328|
                          DCD      power_summary_tempo
                  |L1.3332|
                          DCD      power_summary_tempo_old
                  |L1.3336|
                          DCD      powerSummaryCnt
                  |L1.3340|
                          DCD      power_summary
                  |L1.3344|
                          DCD      power_current_tempo
                  |L1.3348|
                          DCD      power_current_tempo_old
                  |L1.3352|
                          DCD      powerCurrentCnt
                  |L1.3356|
                          DCD      power_current
                  |L1.3360|
                          DCD      eb2_data_short
                  |L1.3364|
                          DCD      avt_stat
                  |L1.3368|
                          DCD      avt_stat_old
                  |L1.3372|
                          DCD      NUMAVT
                  |L1.3376|
000d30  4176746f          DCB      "Avtomat #1 is OFF",0
000d34  6d617420
000d38  23312069
000d3c  73204f46
000d40  4600    
000d42  00                DCB      0
000d43  00                DCB      0
                  |L1.3396|
000d44  4176746f          DCB      "Avtomat #2 is OFF",0
000d48  6d617420
000d4c  23322069
000d50  73204f46
000d54  4600    
000d56  00                DCB      0
000d57  00                DCB      0
                  |L1.3416|
000d58  4176746f          DCB      "Avtomat #3 is OFF",0
000d5c  6d617420
000d60  23332069
000d64  73204f46
000d68  4600    
000d6a  00                DCB      0
000d6b  00                DCB      0
                  |L1.3436|
000d6c  4176746f          DCB      "Avtomat #4 is OFF",0
000d70  6d617420
000d74  23342069
000d78  73204f46
000d7c  4600    
000d7e  00                DCB      0
000d7f  00                DCB      0
                  |L1.3456|
000d80  4176746f          DCB      "Avtomat #5 is OFF",0
000d84  6d617420
000d88  23352069
000d8c  73204f46
000d90  4600    
000d92  00                DCB      0
000d93  00                DCB      0
                  |L1.3476|
000d94  4176746f          DCB      "Avtomat #6 is OFF",0
000d98  6d617420
000d9c  23362069
000da0  73204f46
000da4  4600    
000da6  00                DCB      0
000da7  00                DCB      0
                  |L1.3496|
000da8  4176746f          DCB      "Avtomat #7 is OFF",0
000dac  6d617420
000db0  23372069
000db4  73204f46
000db8  4600    
000dba  00                DCB      0
000dbb  00                DCB      0
                  |L1.3516|
000dbc  4176746f          DCB      "Avtomat #8 is OFF",0
000dc0  6d617420
000dc4  23382069
000dc8  73204f46
000dcc  4600    
000dce  00                DCB      0
000dcf  00                DCB      0
                  |L1.3536|
000dd0  4176746f          DCB      "Avtomat #9 is OFF",0
000dd4  6d617420
000dd8  23392069
000ddc  73204f46
000de0  4600    
000de2  00                DCB      0
000de3  00                DCB      0
                  |L1.3556|
000de4  4176746f          DCB      "Avtomat #1 is ON ",0
000de8  6d617420
000dec  23312069
000df0  73204f4e
000df4  2000    
000df6  00                DCB      0
000df7  00                DCB      0
                  |L1.3576|
000df8  4176746f          DCB      "Avtomat #2 is ON ",0
000dfc  6d617420
000e00  23322069
000e04  73204f4e
000e08  2000    
000e0a  00                DCB      0
000e0b  00                DCB      0
                  |L1.3596|
000e0c  4176746f          DCB      "Avtomat #3 is ON ",0
000e10  6d617420
000e14  23332069
000e18  73204f4e
000e1c  2000    
000e1e  00                DCB      0
000e1f  00                DCB      0
                  |L1.3616|
000e20  4176746f          DCB      "Avtomat #4 is ON ",0
000e24  6d617420
000e28  23342069
000e2c  73204f4e
000e30  2000    
000e32  00                DCB      0
000e33  00                DCB      0
                  |L1.3636|
000e34  4176746f          DCB      "Avtomat #5 is ON ",0
000e38  6d617420
000e3c  23352069
000e40  73204f4e
000e44  2000    
000e46  00                DCB      0
000e47  00                DCB      0
                  |L1.3656|
000e48  4176746f          DCB      "Avtomat #6 is ON ",0
000e4c  6d617420
000e50  23362069
000e54  73204f4e
000e58  2000    
000e5a  00                DCB      0
000e5b  00                DCB      0
                  |L1.3676|
000e5c  4176746f          DCB      "Avtomat #7 is ON ",0
000e60  6d617420
000e64  23372069
000e68  73204f4e
000e6c  2000    
000e6e  00                DCB      0
000e6f  00                DCB      0
                  |L1.3696|
000e70  4176746f          DCB      "Avtomat #8 is ON ",0
000e74  6d617420
000e78  23382069
000e7c  73204f4e
000e80  2000    
000e82  00                DCB      0
000e83  00                DCB      0
                  |L1.3716|
000e84  4176746f          DCB      "Avtomat #9 is ON ",0
000e88  6d617420
000e8c  23392069
000e90  73204f4e
000e94  2000    
000e96  00                DCB      0
000e97  00                DCB      0
                  |L1.3736|
                          DCD      main_1Hz_cnt
                  |L1.3740|
                          DCD      out_U
                  |L1.3744|
                          DCD      UOUT
                  |L1.3748|
                          DCD      overloadHndlCnt
                  |L1.3752|
                          DCD      TZAS
                  |L1.3756|
                          DCD      UOUTMAX
                  |L1.3760|
                          DCD      uAvarHndlOutUMaxCnt
                  |L1.3764|
                          DCD      UOUTMIN
                  |L1.3768|
                          DCD      uAvarHndlOutUMinCnt
                  |L1.3772|
;;;3116   			}
;;;3117   		}
;;;3118   	else uAvarHndlOutUMinCnt=(10*TZAS);
000ebc  eb000080          ADD      r0,r0,r0,LSL #2
000ec0  ea4f0040          LSL      r0,r0,#1
000ec4  8030              STRH     r0,[r6,#0]
000ec6  e00d              B        |L1.3812|
                  |L1.3784|
;;;3119   	}
;;;3120   else 
;;;3121   	{
;;;3122   	if(uAvarHndlOutUMinCnt>0)
000ec8  f9b60000          LDRSH    r0,[r6,#0]  ; uAvarHndlOutUMinCnt
000ecc  2800              CMP      r0,#0
000ece  dd08              BLE      |L1.3810|
;;;3123   		{
;;;3124   		uAvarHndlOutUMinCnt--;
000ed0  f1a00001          SUB      r0,r0,#1
000ed4  b200              SXTH     r0,r0
000ed6  8030              STRH     r0,[r6,#0]
;;;3125   		if(uAvarHndlOutUMinCnt==0)
000ed8  b920              CBNZ     r0,|L1.3812|
;;;3126   			{
;;;3127   			avar_u_out_hndl(0,out_U);
000eda  2000              MOVS     r0,#0
000edc  f7fffffe          BL       avar_u_out_hndl
000ee0  e000              B        |L1.3812|
                  |L1.3810|
;;;3128   			}
;;;3129   		}
;;;3130   	else uAvarHndlOutUMinCnt=0;
000ee2  8035              STRH     r5,[r6,#0]
                  |L1.3812|
;;;3131   	}
;;;3132   
;;;3133   if(in_U>UINMAX)
000ee4  4ec7              LDR      r6,|L1.4612|
000ee6  48c8              LDR      r0,|L1.4616|
;;;3134   	{
;;;3135   	if(uAvarHndlInUMaxCnt<(10*TZAS))
000ee8  4fc8              LDR      r7,|L1.4620|
000eea  f9b61000          LDRSH    r1,[r6,#0]            ;3133  ; in_U
000eee  f9b00000          LDRSH    r0,[r0,#0]            ;3133  ; UINMAX
000ef2  4281              CMP      r1,r0                 ;3133
000ef4  dd19              BLE      |L1.3882|
000ef6  f9b40000          LDRSH    r0,[r4,#0]  ; TZAS
000efa  f9b72000          LDRSH    r2,[r7,#0]  ; uAvarHndlInUMaxCnt
000efe  eb000380          ADD      r3,r0,r0,LSL #2
000f02  ebb20f43          CMP      r2,r3,LSL #1
000f06  da0a              BGE      |L1.3870|
;;;3136   		{
;;;3137   		uAvarHndlInUMaxCnt++;
000f08  f1020201          ADD      r2,r2,#1
000f0c  b210              SXTH     r0,r2
000f0e  8038              STRH     r0,[r7,#0]
;;;3138   		if(uAvarHndlInUMaxCnt>=(10*TZAS))
000f10  ebb00f43          CMP      r0,r3,LSL #1
000f14  db17              BLT      |L1.3910|
;;;3139   			{
;;;3140   			avar_u_in_hndl(1,in_U);
000f16  2001              MOVS     r0,#1
000f18  f7fffffe          BL       avar_u_in_hndl
000f1c  e013              B        |L1.3910|
                  |L1.3870|
;;;3141   			}
;;;3142   		}
;;;3143   	else uAvarHndlInUMaxCnt=(10*TZAS);
000f1e  eb000080          ADD      r0,r0,r0,LSL #2
000f22  ea4f0040          LSL      r0,r0,#1
000f26  8038              STRH     r0,[r7,#0]
000f28  e00d              B        |L1.3910|
                  |L1.3882|
;;;3144   	}
;;;3145   else 
;;;3146   	{
;;;3147   	if(uAvarHndlInUMaxCnt>0)
000f2a  f9b70000          LDRSH    r0,[r7,#0]  ; uAvarHndlInUMaxCnt
000f2e  2800              CMP      r0,#0
000f30  dd08              BLE      |L1.3908|
;;;3148   		{
;;;3149   		uAvarHndlInUMaxCnt--;
000f32  f1a00001          SUB      r0,r0,#1
000f36  b200              SXTH     r0,r0
000f38  8038              STRH     r0,[r7,#0]
;;;3150   		if(uAvarHndlInUMaxCnt==0)
000f3a  b920              CBNZ     r0,|L1.3910|
;;;3151   			{
;;;3152   			avar_u_in_hndl(0,in_U);
000f3c  2000              MOVS     r0,#0
000f3e  f7fffffe          BL       avar_u_in_hndl
000f42  e000              B        |L1.3910|
                  |L1.3908|
;;;3153   			}
;;;3154   		}
;;;3155   	else uAvarHndlInUMaxCnt=0;
000f44  803d              STRH     r5,[r7,#0]
                  |L1.3910|
;;;3156   	}
;;;3157   
;;;3158   if(in_U<UINMIN)
000f46  48b2              LDR      r0,|L1.4624|
000f48  f9b61000          LDRSH    r1,[r6,#0]  ; in_U
;;;3159   	{
;;;3160   	if(uAvarHndlInUMinCnt<(10*TZAS))
000f4c  4eb1              LDR      r6,|L1.4628|
000f4e  f9b00000          LDRSH    r0,[r0,#0]            ;3158  ; UINMIN
000f52  4281              CMP      r1,r0                 ;3158
000f54  da1a              BGE      |L1.3980|
000f56  f9b40000          LDRSH    r0,[r4,#0]  ; TZAS
000f5a  f9b62000          LDRSH    r2,[r6,#0]  ; uAvarHndlInUMinCnt
000f5e  eb000380          ADD      r3,r0,r0,LSL #2
000f62  ebb20f43          CMP      r2,r3,LSL #1
000f66  da0b              BGE      |L1.3968|
;;;3161   		{
;;;3162   		uAvarHndlInUMinCnt++;
000f68  f1020201          ADD      r2,r2,#1
000f6c  b210              SXTH     r0,r2
000f6e  8030              STRH     r0,[r6,#0]
;;;3163   		if(uAvarHndlInUMinCnt>=(10*TZAS))
000f70  ebb00f43          CMP      r0,r3,LSL #1
000f74  db09              BLT      |L1.3978|
;;;3164   			{
;;;3165   			avar_u_in_hndl(2,in_U);
000f76  e8bd41f0          POP      {r4-r8,lr}
000f7a  2002              MOVS     r0,#2
000f7c  f7ffbffe          B.W      avar_u_in_hndl
                  |L1.3968|
;;;3166   			}
;;;3167   		}
;;;3168   	else uAvarHndlInUMinCnt=(10*TZAS);
000f80  eb000080          ADD      r0,r0,r0,LSL #2
000f84  ea4f0040          LSL      r0,r0,#1
000f88  8030              STRH     r0,[r6,#0]
                  |L1.3978|
;;;3169   	}
;;;3170   else 
;;;3171   	{
;;;3172   	if(uAvarHndlInUMinCnt>0)
;;;3173   		{
;;;3174   		uAvarHndlInUMinCnt--;
;;;3175   		if(uAvarHndlInUMinCnt==0)
;;;3176   			{
;;;3177   			avar_u_in_hndl(0,in_U);
;;;3178   			}
;;;3179   		}
;;;3180   	else uAvarHndlInUMinCnt=0;
;;;3181   	}
;;;3182   }
000f8a  e4f3              B        |L1.2420|
                  |L1.3980|
000f8c  f9b60000          LDRSH    r0,[r6,#0]            ;3172  ; uAvarHndlInUMinCnt
000f90  2800              CMP      r0,#0                 ;3172
000f92  dd09              BLE      |L1.4008|
000f94  f1a00001          SUB      r0,r0,#1              ;3174
000f98  b200              SXTH     r0,r0                 ;3174
000f9a  8030              STRH     r0,[r6,#0]            ;3174
000f9c  2800              CMP      r0,#0                 ;3175
000f9e  d1f4              BNE      |L1.3978|
000fa0  e8bd41f0          POP      {r4-r8,lr}            ;3177
000fa4  f7ffbffe          B.W      avar_u_in_hndl
                  |L1.4008|
000fa8  8035              STRH     r5,[r6,#0]            ;3180
000faa  e4e3              B        |L1.2420|
;;;3183   
                          ENDP

                  t_sys_avar_hndl PROC
;;;3184   //-----------------------------------------------
;;;3185   void t_sys_avar_hndl(void)
000fac  b430              PUSH     {r4,r5}
;;;3186   {
;;;3187   
;;;3188   if(main_1Hz_cnt<10)return;
000fae  489a              LDR      r0,|L1.4632|
000fb0  f9b00000          LDRSH    r0,[r0,#0]  ; main_1Hz_cnt
000fb4  280a              CMP      r0,#0xa
000fb6  db22              BLT      |L1.4094|
;;;3189   
;;;3190   if(sys_T>TSYSMAX)
000fb8  4898              LDR      r0,|L1.4636|
;;;3191   	{
;;;3192   	if(sysTAvarHndlCnt<(10*TZAS))
000fba  4c9a              LDR      r4,|L1.4644|
000fbc  f9b01000          LDRSH    r1,[r0,#0]            ;3190  ; sys_T
000fc0  4897              LDR      r0,|L1.4640|
000fc2  f9b02000          LDRSH    r2,[r0,#0]            ;3190  ; TSYSMAX
000fc6  f9b40000          LDRSH    r0,[r4,#0]
000fca  4291              CMP      r1,r2                 ;3190
000fcc  dd18              BLE      |L1.4096|
000fce  4a96              LDR      r2,|L1.4648|
000fd0  f9b22000          LDRSH    r2,[r2,#0]  ; TZAS
000fd4  eb020382          ADD      r3,r2,r2,LSL #2
000fd8  ebb00f43          CMP      r0,r3,LSL #1
000fdc  da0a              BGE      |L1.4084|
;;;3193   		{
;;;3194   		sysTAvarHndlCnt++;
000fde  f1000001          ADD      r0,r0,#1
000fe2  b200              SXTH     r0,r0
000fe4  8020              STRH     r0,[r4,#0]
;;;3195   		if(sysTAvarHndlCnt>=(10*TZAS))
000fe6  ebb00f43          CMP      r0,r3,LSL #1
000fea  db08              BLT      |L1.4094|
;;;3196   			{
;;;3197   			avar_sys_t_hndl(1,sys_T);
000fec  bc30              POP      {r4,r5}
000fee  2001              MOVS     r0,#1
000ff0  f7ffbffe          B.W      avar_sys_t_hndl
                  |L1.4084|
;;;3198   			}
;;;3199   		}
;;;3200   	else sysTAvarHndlCnt=(10*TZAS);
000ff4  eb020082          ADD      r0,r2,r2,LSL #2
000ff8  ea4f0040          LSL      r0,r0,#1
000ffc  8020              STRH     r0,[r4,#0]
                  |L1.4094|
;;;3201   	}
;;;3202   else 
;;;3203   	{
;;;3204   	if(sysTAvarHndlCnt>0)
;;;3205   		{
;;;3206   		sysTAvarHndlCnt--;
;;;3207   		if(sysTAvarHndlCnt==0)
;;;3208   			{
;;;3209   			avar_sys_t_hndl(0,sys_T);
;;;3210   			}
;;;3211   		}
;;;3212   	else sysTAvarHndlCnt=0;
;;;3213   	}
;;;3214   }
000ffe  e624              B        |L1.3146|
                  |L1.4096|
001000  2800              CMP      r0,#0                 ;3204
001002  dd08              BLE      |L1.4118|
001004  f1a00001          SUB      r0,r0,#1              ;3206
001008  b200              SXTH     r0,r0                 ;3206
00100a  8020              STRH     r0,[r4,#0]            ;3206
00100c  2800              CMP      r0,#0                 ;3207
00100e  d1f6              BNE      |L1.4094|
001010  bc30              POP      {r4,r5}               ;3209
001012  f7ffbffe          B.W      avar_sys_t_hndl
                  |L1.4118|
001016  f04f0000          MOV      r0,#0                 ;3212
00101a  8020              STRH     r0,[r4,#0]            ;3212
00101c  e615              B        |L1.3146|
;;;3215   
                          ENDP

                  num_necc_hndl PROC
;;;3216   //-----------------------------------------------
;;;3217   void num_necc_hndl(void)
00101e  e92d41f0          PUSH     {r4-r8,lr}
;;;3218   {
;;;3219   
;;;3220   static short num_necc_block_cnt;
;;;3221   if(num_necc_block_cnt) num_necc_block_cnt--;
001022  4c82              LDR      r4,|L1.4652|
001024  f9b40010          LDRSH    r0,[r4,#0x10]  ; num_necc_block_cnt
001028  b110              CBZ      r0,|L1.4144|
00102a  f1a00001          SUB      r0,r0,#1
00102e  8220              STRH     r0,[r4,#0x10]
                  |L1.4144|
;;;3222   
;;;3223   Isumm_=Isumm;
001030  487f              LDR      r0,|L1.4656|
001032  4d80              LDR      r5,|L1.4660|
001034  8800              LDRH     r0,[r0,#0]  ; Isumm
001036  8028              STRH     r0,[r5,#0]
;;;3224   
;;;3225   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
001038  4e7f              LDR      r6,|L1.4664|
00103a  270a              MOVS     r7,#0xa
00103c  f9b60008          LDRSH    r0,[r6,#8]  ; bat
001040  2800              CMP      r0,#0
001042  da06              BGE      |L1.4178|
001044  f7fffffe          BL       abs
001048  fb90f0f7          SDIV     r0,r0,r7
00104c  8829              LDRH     r1,[r5,#0]  ; Isumm_
00104e  4408              ADD      r0,r0,r1
001050  8028              STRH     r0,[r5,#0]
                  |L1.4178|
;;;3226   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
001052  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
001056  2800              CMP      r0,#0
001058  da06              BGE      |L1.4200|
00105a  f7fffffe          BL       abs
00105e  fb90f0f7          SDIV     r0,r0,r7
001062  8829              LDRH     r1,[r5,#0]  ; Isumm_
001064  4408              ADD      r0,r0,r1
001066  8028              STRH     r0,[r5,#0]
                  |L1.4200|
;;;3227   
;;;3228   num_necc_up=(Isumm_/((signed short)IMAX))+1;
001068  4874              LDR      r0,|L1.4668|
00106a  f9b51000          LDRSH    r1,[r5,#0]  ; Isumm_
00106e  f9b00000          LDRSH    r0,[r0,#0]  ; IMAX
001072  fb91f0f0          SDIV     r0,r1,r0
001076  f1000001          ADD      r0,r0,#1
00107a  b2c0              UXTB     r0,r0
00107c  7260              STRB     r0,[r4,#9]
;;;3229   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;3230   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;3231   
;;;3232   num_necc_down=(Isumm_/((signed short)IMIN))+1;
00107e  4a70              LDR      r2,|L1.4672|
001080  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
001084  fb91f1f2          SDIV     r1,r1,r2
001088  f1010101          ADD      r1,r1,#1
00108c  b2c9              UXTB     r1,r1
00108e  72a1              STRB     r1,[r4,#0xa]
;;;3233   
;;;3234   if(num_necc_up>num_necc)
001090  4b6c              LDR      r3,|L1.4676|
;;;3235   	{
;;;3236   	num_necc=num_necc_up;
;;;3237   	num_necc_block_cnt=60;
001092  f04f053c          MOV      r5,#0x3c
001096  f9b32000          LDRSH    r2,[r3,#0]            ;3234  ; num_necc
00109a  4290              CMP      r0,r2                 ;3234
00109c  dd02              BLE      |L1.4260|
00109e  8018              STRH     r0,[r3,#0]            ;3236
0010a0  8225              STRH     r5,[r4,#0x10]
0010a2  e005              B        |L1.4272|
                  |L1.4260|
;;;3238   	}
;;;3239   else if(num_necc_down<num_necc)
0010a4  4291              CMP      r1,r2
0010a6  da03              BGE      |L1.4272|
;;;3240   	{
;;;3241   	if(!num_necc_block_cnt)
0010a8  8a20              LDRH     r0,[r4,#0x10]  ; num_necc_block_cnt
0010aa  b908              CBNZ     r0,|L1.4272|
;;;3242   		{
;;;3243   		num_necc=num_necc_down;
0010ac  8019              STRH     r1,[r3,#0]
;;;3244   		num_necc_block_cnt=60;
0010ae  8225              STRH     r5,[r4,#0x10]
                  |L1.4272|
;;;3245   		}
;;;3246   	}
;;;3247   
;;;3248   /*if(PAR)*/ num_necc=NUMIST;
0010b0  4865              LDR      r0,|L1.4680|
0010b2  f9b02000          LDRSH    r2,[r0,#0]  ; NUMIST
0010b6  801a              STRH     r2,[r3,#0]
;;;3249   
;;;3250   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3251   //if(bPARALLEL) num_necc=NUMIST;
;;;3252   #endif
;;;3253   
;;;3254   num_necc=NUMIST;
;;;3255   
;;;3256   gran(&num_necc,1,NUMIST);
0010b8  e8bd41f0          POP      {r4-r8,lr}
0010bc  2101              MOVS     r1,#1
0010be  4861              LDR      r0,|L1.4676|
0010c0  f7ffbffe          B.W      gran
;;;3257   
;;;3258   }
;;;3259   
                          ENDP

                  cntrl_hndl PROC
;;;3261   //-----------------------------------------------
;;;3262   void cntrl_hndl(void)
0010c4  e92d41f0          PUSH     {r4-r8,lr}
;;;3263   {
;;;3264   
;;;3265   IZMAX_=IZMAX;
0010c8  4860              LDR      r0,|L1.4684|
0010ca  4c58              LDR      r4,|L1.4652|
0010cc  f9b01000          LDRSH    r1,[r0,#0]  ; IZMAX
0010d0  8461              STRH     r1,[r4,#0x22]
;;;3266   
;;;3267   //cntrl_hndl_plazma=10;
;;;3268   
;;;3269   if(speedChIsOn)IZMAX_=speedChrgCurr;
0010d2  485f              LDR      r0,|L1.4688|
0010d4  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
0010d6  b110              CBZ      r0,|L1.4318|
0010d8  485e              LDR      r0,|L1.4692|
0010da  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
0010dc  8460              STRH     r0,[r4,#0x22]
                  |L1.4318|
;;;3270   
;;;3271   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
0010de  f9b40026          LDRSH    r0,[r4,#0x26]  ; cntrl_stat_blok_cnt
0010e2  b110              CBZ      r0,|L1.4330|
0010e4  f1a00001          SUB      r0,r0,#1
0010e8  84e0              STRH     r0,[r4,#0x26]
                  |L1.4330|
;;;3272   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
0010ea  f9b40028          LDRSH    r0,[r4,#0x28]  ; cntrl_stat_blok_cnt_
0010ee  b110              CBZ      r0,|L1.4342|
0010f0  f1a00001          SUB      r0,r0,#1
0010f4  8520              STRH     r0,[r4,#0x28]
                  |L1.4342|
;;;3273   
;;;3274   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX/10;
0010f6  4850              LDR      r0,|L1.4664|
0010f8  f890203f          LDRB     r2,[r0,#0x3f]  ; bat
0010fc  0792              LSLS     r2,r2,#30
0010fe  d103              BNE      |L1.4360|
001100  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
001104  0780              LSLS     r0,r0,#30
001106  d004              BEQ      |L1.4370|
                  |L1.4360|
001108  f04f000a          MOV      r0,#0xa
00110c  fb91f0f0          SDIV     r0,r1,r0
001110  8460              STRH     r0,[r4,#0x22]
                  |L1.4370|
;;;3275   
;;;3276   
;;;3277   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3278   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
;;;3279   if(ch_cnt0<(10*REG_SPEED))
;;;3280   	{
;;;3281   	ch_cnt0++;
;;;3282   	if(ch_cnt0>=10*REG_SPEED)
;;;3283   		{
;;;3284   		ch_cnt0=0;
;;;3285   		b1Hz_ch=1;
;;;3286   		}
;;;3287   	}
;;;3288   #endif
;;;3289   
;;;3290   
;;;3291   if(mess_find_unvol(MESS2CNTRL_HNDL))
001112  20e1              MOVS     r0,#0xe1
001114  f7fffffe          BL       mess_find_unvol
001118  2500              MOVS     r5,#0                 ;3269
00111a  b380              CBZ      r0,|L1.4478|
;;;3292   	{
;;;3293   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
00111c  494e              LDR      r1,|L1.4696|
00111e  6808              LDR      r0,[r1,#0]  ; mess_data
001120  2864              CMP      r0,#0x64
001122  d006              BEQ      |L1.4402|
;;;3294   		{
;;;3295   		cntrl_stat=cntrl_stat_old+mess_data[1];
;;;3296   		}
;;;3297   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
001124  2869              CMP      r0,#0x69
001126  d009              BEQ      |L1.4412|
;;;3298   		{
;;;3299   		cntrl_stat=cntrl_stat_old-mess_data[1];
;;;3300   		}
;;;3301   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
001128  286e              CMP      r0,#0x6e
00112a  d00d              BEQ      |L1.4424|
;;;3302   		{
;;;3303   		static char cntrlStatIsDownCnt;
;;;3304   		cntrl_stat--;
;;;3305   
;;;3306   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;3307   			{
;;;3308   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;3309   			}
;;;3310   		else 
;;;3311   			{
;;;3312   			cntrlStatIsDownCnt=0;
;;;3313   			}
;;;3314   
;;;3315   		}
;;;3316   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
00112c  28e5              CMP      r0,#0xe5
00112e  d029              BEQ      |L1.4484|
001130  e02a              B        |L1.4488|
                  |L1.4402|
001132  6848              LDR      r0,[r1,#4]            ;3295  ; mess_data
001134  89e1              LDRH     r1,[r4,#0xe]          ;3295  ; cntrl_stat_old
001136  4408              ADD      r0,r0,r1              ;3295
001138  81a0              STRH     r0,[r4,#0xc]          ;3295
00113a  e025              B        |L1.4488|
                  |L1.4412|
00113c  6848              LDR      r0,[r1,#4]            ;3299  ; mess_data
00113e  89e1              LDRH     r1,[r4,#0xe]          ;3299  ; cntrl_stat_old
001140  eba10000          SUB      r0,r1,r0              ;3299
001144  81a0              STRH     r0,[r4,#0xc]          ;3299
001146  e01f              B        |L1.4488|
                  |L1.4424|
001148  89a0              LDRH     r0,[r4,#0xc]          ;3304  ; cntrl_stat
00114a  f1a00001          SUB      r0,r0,#1              ;3304
00114e  b200              SXTH     r0,r0                 ;3304
001150  81a0              STRH     r0,[r4,#0xc]          ;3304
001152  281e              CMP      r0,#0x1e              ;3306
001154  dd07              BLE      |L1.4454|
001156  4841              LDR      r0,|L1.4700|
001158  4941              LDR      r1,|L1.4704|
00115a  f9b00000          LDRSH    r0,[r0,#0]            ;3306  ; load_U
00115e  f9b11000          LDRSH    r1,[r1,#0]            ;3306  ; USIGN
001162  4288              CMP      r0,r1                 ;3306
001164  da0c              BGE      |L1.4480|
                  |L1.4454|
001166  7820              LDRB     r0,[r4,#0]            ;3308  ; cntrlStatIsDownCnt
001168  1c40              ADDS     r0,r0,#1              ;3308
00116a  b2c0              UXTB     r0,r0                 ;3308
00116c  7020              STRB     r0,[r4,#0]            ;3308
00116e  28fa              CMP      r0,#0xfa              ;3308
001170  d10a              BNE      |L1.4488|
001172  230a              MOVS     r3,#0xa               ;3308
001174  2200              MOVS     r2,#0                 ;3308
001176  21e7              MOVS     r1,#0xe7              ;3308
001178  20e6              MOVS     r0,#0xe6              ;3308
00117a  f7fffffe          BL       mess_send
                  |L1.4478|
00117e  e003              B        |L1.4488|
                  |L1.4480|
001180  7025              STRB     r5,[r4,#0]            ;3312
001182  e001              B        |L1.4488|
                  |L1.4484|
;;;3317   		{
;;;3318   		cntrl_stat=mess_data[1];
001184  6848              LDR      r0,[r1,#4]  ; mess_data
001186  81a0              STRH     r0,[r4,#0xc]
                  |L1.4488|
;;;3319   		}
;;;3320   
;;;3321   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;3322   		{
;;;3323   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3324   		if(load_U>u_necc)
;;;3325   			{
;;;3326   			cntrl_hndl_plazma=11;
;;;3327   			if(((bps_U-u_necc)>40)&&(cntrl_stat>0))cntrl_stat-=5;
;;;3328   			else if((cntrl_stat)&&b1Hz_ch)cntrl_stat--;
;;;3329   			}
;;;3330   		else if(bps_U<u_necc)
;;;3331   			{
;;;3332   			cntrl_hndl_plazma=12;	
;;;3333   			if(((u_necc-bps_U)>40)&&(cntrl_stat<2015))cntrl_stat+=5;
;;;3334   			else	if((cntrl_stat<2020)&&b1Hz_ch)cntrl_stat++;
;;;3335   			}
;;;3336   		#endif	
;;;3337   	 	}
;;;3338   	}
;;;3339   
;;;3340   #ifdef UKU_VD
;;;3341   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;3342   	{
;;;3343   	cntrl_stat_new=cntrl_stat_old;
;;;3344   	cntrl_hndl_plazma=19;
;;;3345   	if((Ibmax/10)>(2*IZMAX_))
;;;3346   		{
;;;3347   		cntrl_hndl_plazma=20;
;;;3348             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;3349   		else	cntrl_stat_new-=10;
;;;3350   		}		
;;;3351   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;3352   		{
;;;3353   		cntrl_hndl_plazma=21;
;;;3354             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;3355             else	cntrl_stat_new-=3;
;;;3356   		}   
;;;3357   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;3358   		{
;;;3359   		cntrl_hndl_plazma=22;
;;;3360   		cntrl_stat_new--;
;;;3361   		}
;;;3362   		
;;;3363   	else if(bps_U<u_necc)
;;;3364   		{
;;;3365   		cntrl_hndl_plazma=23;
;;;3366   /*		if(bps_U<(u_necc-(UB0-UB20)))
;;;3367   			{
;;;3368   			cntrl_hndl_plazma=24;
;;;3369   			if(Ibmax<0)
;;;3370   				{
;;;3371   				cntrl_hndl_plazma=25;
;;;3372                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;3373   				else cntrl_stat_new+=10;
;;;3374   				}
;;;3375   			else if(Ibmax<(IZMAX_*5))
;;;3376   				{
;;;3377   				cntrl_hndl_plazma=26;
;;;3378                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;3379   				else	cntrl_stat_new+=2;
;;;3380   				}
;;;3381   			else if(Ibmax<((IZMAX_*10)))//(Ibmax<((IZMAX_*95)/10))
;;;3382   				{
;;;3383   				cntrl_hndl_plazma=27;
;;;3384   				cntrl_stat_new++;
;;;3385   				}					
;;;3386   			}	*/
;;;3387   /*		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;3388   			{
;;;3389   			cntrl_hndl_plazma=28;
;;;3390   			if(Ibmax<(IZMAX_*5))
;;;3391   				{
;;;3392   				cntrl_hndl_plazma=29;
;;;3393                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;3394   				else	cntrl_stat_new+=2;
;;;3395   				}
;;;3396   			else if(Ibmax<((IZMAX_*10)))//(Ibmax<((IZMAX_*95)/10))
;;;3397   				{
;;;3398   				cntrl_hndl_plazma=30;
;;;3399   				cntrl_stat_new++;
;;;3400   				}					
;;;3401   			}
;;;3402   		else if(bps_U<(u_necc-1))
;;;3403   			{
;;;3404   			cntrl_hndl_plazma=31;
;;;3405   			if(Ibmax<((IZMAX_*10)))//(Ibmax<((IZMAX_*95)/10))
;;;3406   				{
;;;3407   				cntrl_hndl_plazma=32;
;;;3408   				cntrl_stat_new++;
;;;3409   				}					
;;;3410   			}	*/					
;;;3411   		}	
;;;3412   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;3413   		{ 	
;;;3414   		cntrl_hndl_plazma=33;
;;;3415   /*		if(bps_U>(u_necc+(UB0-UB20)))
;;;3416   			{
;;;3417   			cntrl_hndl_plazma=34;
;;;3418                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;3419   			else	cntrl_stat_new-=10;
;;;3420   			}
;;;3421   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;3422   			{
;;;3423   			cntrl_hndl_plazma=35;
;;;3424                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;3425   			else cntrl_stat_new-=2;
;;;3426   			}	
;;;3427   		else if(bps_U>(u_necc+1))
;;;3428   			{
;;;3429   			cntrl_hndl_plazma=36;
;;;3430   			cntrl_stat_new--;
;;;3431   			}*/					
;;;3432   		}
;;;3433   
;;;3434   	cntrl_stat_new=(short)((2000L*((long)(UOUT_-in_U)))/650L);
;;;3435   	gran(&cntrl_stat_new,10,2010);			
;;;3436   	cntrl_stat_old=cntrl_stat_new;
;;;3437   	cntrl_stat=cntrl_stat_new;
;;;3438   	cntrl_stat_buff[cntrl_stat_buff_ptr]=cntrl_stat_new;  //pwm_u_buff[pwm_u_buff_ptr]=pwm_u_;
;;;3439   	cntrl_stat_buff_ptr++;								   //pwm_u_buff_ptr++;
;;;3440   	
;;;3441   	if(cntrl_stat_buff_ptr>=16)cntrl_stat_buff_ptr=0;	//if(pwm_u_buff_ptr>=16)pwm_u_buff_ptr=0;
;;;3442   		{
;;;3443   		char i;
;;;3444   		signed long tempSL;
;;;3445   		tempSL=0;
;;;3446   		for(i=0;i<16;i++)
;;;3447   			{
;;;3448   			tempSL+=(signed long)cntrl_stat_buff[i];			//tempSL+=(signed long)pwm_u_buff[i];
;;;3449   			}
;;;3450   		tempSL>>=4;
;;;3451   		cntrl_stat_buff_=(signed short)tempSL;
;;;3452   		}
;;;3453   	if(NUMSK)cntrl_stat=cntrl_stat_buff_;
;;;3454   
;;;3455   	}
;;;3456   
;;;3457   #endif
;;;3458   
;;;3459   iiii=0;
001188  7225              STRB     r5,[r4,#8]
;;;3460   for(i=0;i<NUMIST;i++)
00118a  71e5              STRB     r5,[r4,#7]
00118c  482e              LDR      r0,|L1.4680|
;;;3461        {
;;;3462        if(bps[i]._cnt<30)iiii=1;
00118e  4a35              LDR      r2,|L1.4708|
001190  f9b03000          LDRSH    r3,[r0,#0]            ;3460
001194  e01a              B        |L1.4556|
                  |L1.4502|
001196  eb010081          ADD      r0,r1,r1,LSL #2
00119a  eb0000c1          ADD      r0,r0,r1,LSL #3
00119e  eb0200c0          ADD      r0,r2,r0,LSL #3
0011a2  78c6              LDRB     r6,[r0,#3]
0011a4  2e1e              CMP      r6,#0x1e
0011a6  d202              BCS      |L1.4526|
0011a8  f04f0601          MOV      r6,#1
0011ac  7226              STRB     r6,[r4,#8]
                  |L1.4526|
;;;3463   
;;;3464   	 bps[i]._cntrl_stat=cntrl_stat+bps[i]._x_;
0011ae  f100002c          ADD      r0,r0,#0x2c
0011b2  89a7              LDRH     r7,[r4,#0xc]  ; cntrl_stat
0011b4  8d06              LDRH     r6,[r0,#0x28]
0011b6  443e              ADD      r6,r6,r7
0011b8  8706              STRH     r6,[r0,#0x38]
;;;3465   	 if(bps[i]._flags_tu&0x01) bps[i]._cntrl_stat=0;
0011ba  f810692c          LDRB     r6,[r0],#-0x2c
0011be  07f6              LSLS     r6,r6,#31
0011c0  d001              BEQ      |L1.4550|
0011c2  f8a05064          STRH     r5,[r0,#0x64]
                  |L1.4550|
0011c6  f1010101          ADD      r1,r1,#1              ;3460
0011ca  71e1              STRB     r1,[r4,#7]            ;3460
                  |L1.4556|
0011cc  79e1              LDRB     r1,[r4,#7]            ;3460  ; i
0011ce  4299              CMP      r1,r3                 ;3460
0011d0  dbe1              BLT      |L1.4502|
;;;3466        }
;;;3467   
;;;3468   if(iiii==0)
0011d2  7a20              LDRB     r0,[r4,#8]  ; iiii
0011d4  b920              CBNZ     r0,|L1.4576|
;;;3469        {
;;;3470        cntrl_stat=1200;	
0011d6  f44f6096          MOV      r0,#0x4b0
0011da  81a0              STRH     r0,[r4,#0xc]
;;;3471        cntrl_stat_old=1200;
0011dc  81e0              STRH     r0,[r4,#0xe]
;;;3472        cntrl_stat_new=1200;
0011de  83e0              STRH     r0,[r4,#0x1e]
                  |L1.4576|
;;;3473        }
;;;3474   gran(&cntrl_stat,10,2010); 
0011e0  4812              LDR      r0,|L1.4652|
0011e2  f24072da          MOV      r2,#0x7da
0011e6  210a              MOVS     r1,#0xa
0011e8  300c              ADDS     r0,r0,#0xc
0011ea  f7fffffe          BL       gran
;;;3475   b1Hz_ch=0;
0011ee  71a5              STRB     r5,[r4,#6]
;;;3476   }
0011f0  e6cb              B        |L1.3978|
;;;3477   
                          ENDP

                  ext_drv PROC
;;;3479   //-----------------------------------------------
;;;3480   void ext_drv(void)
0011f2  4770              BX       lr
;;;3481   {
;;;3482   char i;
;;;3483   }
;;;3484   
                          ENDP

                  zar_superviser_drv PROC
;;;3486   //-----------------------------------------------
;;;3487   void zar_superviser_drv(void)
0011f4  4770              BX       lr
;;;3488   {
;;;3489   
;;;3490   
;;;3491   }
;;;3492   
                          ENDP

                  npn_hndl PROC
;;;3503   //-----------------------------------------------
;;;3504   void npn_hndl(void)
0011f6  4770              BX       lr
;;;3505   {
;;;3506   }
;;;3507   
                          ENDP

                  numOfForvardBps_hndl PROC
;;;3521   //-----------------------------------------------
;;;3522   void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
0011f8  4770              BX       lr
;;;3523   {
;;;3524   
;;;3525   }
;;;3526   
                          ENDP

                  numOfForvardBps_init PROC
;;;3527   //-----------------------------------------------
;;;3528   void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
0011fa  4770              BX       lr
;;;3529   {									//Должна вызываться при изменении кол-ва источников в структуре
;;;3530   
;;;3531   }
;;;3532   
                          ENDP

                  vent_resurs_hndl PROC
;;;3534   //-----------------------------------------------
;;;3535   void vent_resurs_hndl(void)
0011fc  4770              BX       lr
;;;3536   {
;;;3537   
;;;3538   }
;;;3539   
                          ENDP

                  vent_hndl PROC
;;;3540   //-----------------------------------------------
;;;3541   void vent_hndl(void)
0011fe  4770              BX       lr
;;;3542   {
;;;3543   
;;;3544   }
;;;3545   
                          ENDP

                  vd_is_work_hndl PROC
;;;3546   //-----------------------------------------------
;;;3547   void vd_is_work_hndl(void)
001200  4770              BX       lr
;;;3548   {
;;;3549   
;;;3550   }
;;;3551   
                          ENDP

001202  0000              DCW      0x0000
                  |L1.4612|
                          DCD      in_U
                  |L1.4616|
                          DCD      UINMAX
                  |L1.4620|
                          DCD      uAvarHndlInUMaxCnt
                  |L1.4624|
                          DCD      UINMIN
                  |L1.4628|
                          DCD      uAvarHndlInUMinCnt
                  |L1.4632|
                          DCD      main_1Hz_cnt
                  |L1.4636|
                          DCD      sys_T
                  |L1.4640|
                          DCD      TSYSMAX
                  |L1.4644|
                          DCD      sysTAvarHndlCnt
                  |L1.4648|
                          DCD      TZAS
                  |L1.4652|
                          DCD      ||area_number.31||
                  |L1.4656|
                          DCD      Isumm
                  |L1.4660|
                          DCD      Isumm_
                  |L1.4664|
                          DCD      bat
                  |L1.4668|
                          DCD      IMAX
                  |L1.4672|
                          DCD      IMIN
                  |L1.4676|
                          DCD      num_necc
                  |L1.4680|
                          DCD      NUMIST
                  |L1.4684|
                          DCD      IZMAX
                  |L1.4688|
                          DCD      speedChIsOn
                  |L1.4692|
                          DCD      speedChrgCurr
                  |L1.4696|
                          DCD      mess_data
                  |L1.4700|
                          DCD      load_U
                  |L1.4704|
                          DCD      USIGN
                  |L1.4708|
                          DCD      bps

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  4902              LDR      r1,|L2.12|
000002  f24060f9          MOV      r0,#0x6f9
000006  8488              STRH     r0,[r1,#0x24]
000008  4770              BX       lr
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      ||area_number.31||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4c80              LDR      r4,|L3.520|
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1
00000c  b200              SXTH     r0,r0
00000e  f7fffffe          BL       abs_pal
000012  1da5              ADDS     r5,r4,#6
000014  8028              STRH     r0,[r5,#0]
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]
000032  f44f7196          MOV      r1,#0x12c
000036  f1a4062a          SUB      r6,r4,#0x2a
00003a  4288              CMP      r0,r1
00003c  da02              BGE      |L3.68|
00003e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000040  82b0              STRH     r0,[r6,#0x14]
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]  ; adc_self_ch_disp
000048  4288              CMP      r0,r1
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
00004e  82b0              STRH     r0,[r6,#0x14]
000050  e005              B        |L3.94|
                  |L3.82|
000052  f9b50000          LDRSH    r0,[r5,#0]  ; adc_self_ch_disp
000056  4288              CMP      r0,r1
000058  da01              BGE      |L3.94|
00005a  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
00005c  82b0              STRH     r0,[r6,#0x14]
                  |L3.94|
00005e  78b7              LDRB     r7,[r6,#2]  ; adc_ch_net
000060  2200              MOVS     r2,#0
000062  b3f7              CBZ      r7,|L3.226|
000064  7973              LDRB     r3,[r6,#5]  ; adc_window_flag
000066  4869              LDR      r0,|L3.524|
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b61014          LDRSH    r1,[r6,#0x14]  ; adc_result
00006e  6804              LDR      r4,[r0,#0]  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2
000074  6004              STR      r4,[r0,#0]  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2
00007c  6044              STR      r4,[r0,#4]  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2
000084  6084              STR      r4,[r0,#8]  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]  ; main_power_buffer
000088  eb0401a1          ADD      r1,r4,r1,ASR #2
00008c  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
                  |L3.142|
00008e  f9b61014          LDRSH    r1,[r6,#0x14]  ; adc_result
000092  2964              CMP      r1,#0x64
000094  da04              BGE      |L3.160|
000096  8b31              LDRH     r1,[r6,#0x18]  ; adc_zero_cnt
000098  f1010101          ADD      r1,r1,#1
00009c  8331              STRH     r1,[r6,#0x18]
00009e  e000              B        |L3.162|
                  |L3.160|
0000a0  8332              STRH     r2,[r6,#0x18]
                  |L3.162|
0000a2  f9b64018          LDRSH    r4,[r6,#0x18]  ; adc_zero_cnt
0000a6  f44f61fa          MOV      r1,#0x7d0
0000aa  428c              CMP      r4,r1
0000ac  db05              BLT      |L3.186|
0000ae  8331              STRH     r1,[r6,#0x18]
0000b0  6002              STR      r2,[r0,#0]  ; main_power_buffer
0000b2  6042              STR      r2,[r0,#4]  ; main_power_buffer
0000b4  6082              STR      r2,[r0,#8]  ; main_power_buffer
0000b6  60c2              STR      r2,[r0,#0xc]  ; main_power_buffer
0000b8  8272              STRH     r2,[r6,#0x12]
                  |L3.186|
0000ba  8b31              LDRH     r1,[r6,#0x18]  ; adc_zero_cnt
0000bc  2905              CMP      r1,#5
0000be  d14f              BNE      |L3.352|
0000c0  b1bb              CBZ      r3,|L3.242|
0000c2  8af1              LDRH     r1,[r6,#0x16]  ; adc_gorb_cnt
0000c4  f1010101          ADD      r1,r1,#1
0000c8  b209              SXTH     r1,r1
0000ca  82f1              STRH     r1,[r6,#0x16]
0000cc  f5b17f00          CMP      r1,#0x200
0000d0  db00              BLT      |L3.212|
0000d2  82f2              STRH     r2,[r6,#0x16]
                  |L3.212|
0000d4  f9b61016          LDRSH    r1,[r6,#0x16]  ; adc_gorb_cnt
0000d8  064c              LSLS     r4,r1,#25
0000da  d10a              BNE      |L3.242|
0000dc  ea4f11e1          ASR      r1,r1,#7
0000e0  e000              B        |L3.228|
                  |L3.226|
0000e2  e015              B        |L3.272|
                  |L3.228|
0000e4  f8504021          LDR      r4,[r0,r1,LSL #2]
0000e8  ea4f2424          ASR      r4,r4,#8
0000ec  8274              STRH     r4,[r6,#0x12]
0000ee  f8402021          STR      r2,[r0,r1,LSL #2]
                  |L3.242|
0000f2  f9b6001a          LDRSH    r0,[r6,#0x1a]  ; adc_window_cnt
0000f6  2896              CMP      r0,#0x96
0000f8  dd01              BLE      |L3.254|
0000fa  b103              CBZ      r3,|L3.254|
0000fc  7172              STRB     r2,[r6,#5]
                  |L3.254|
0000fe  381f              SUBS     r0,r0,#0x1f
000100  2827              CMP      r0,#0x27
000102  d22d              BCS      |L3.352|
000104  7970              LDRB     r0,[r6,#5]  ; adc_window_flag
000106  bb58              CBNZ     r0,|L3.352|
000108  f04f0001          MOV      r0,#1
00010c  7170              STRB     r0,[r6,#5]
00010e  e027              B        |L3.352|
                  |L3.272|
000110  483f              LDR      r0,|L3.528|
000112  78f5              LDRB     r5,[r6,#3]  ; adc_ch
000114  7933              LDRB     r3,[r6,#4]  ; adc_ch_cnt
000116  eb001485          ADD      r4,r0,r5,LSL #6
00011a  f9b61014          LDRSH    r1,[r6,#0x14]  ; adc_result
00011e  f8441023          STR      r1,[r4,r3,LSL #2]
000122  0798              LSLS     r0,r3,#30
000124  d10f              BNE      |L3.326|
000126  4601              MOV      r1,r0
                  |L3.296|
000128  f854c020          LDR      r12,[r4,r0,LSL #2]
00012c  4461              ADD      r1,r1,r12
00012e  f1000001          ADD      r0,r0,#1
000132  b2c0              UXTB     r0,r0
000134  2810              CMP      r0,#0x10
000136  d3f7              BCC      |L3.296|
000138  ea4f1021          ASR      r0,r1,#4
00013c  4933              LDR      r1,|L3.524|
00013e  f1a10120          SUB      r1,r1,#0x20
000142  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L3.326|
000146  1c6d              ADDS     r5,r5,#1
000148  b2e8              UXTB     r0,r5
00014a  70f0              STRB     r0,[r6,#3]
00014c  2810              CMP      r0,#0x10
00014e  d307              BCC      |L3.352|
000150  70f2              STRB     r2,[r6,#3]
000152  f1030301          ADD      r3,r3,#1
000156  b2d8              UXTB     r0,r3
000158  7130              STRB     r0,[r6,#4]
00015a  2810              CMP      r0,#0x10
00015c  d300              BCC      |L3.352|
00015e  7132              STRB     r2,[r6,#4]
                  |L3.352|
000160  7072              STRB     r2,[r6,#1]
000162  f1070701          ADD      r7,r7,#1
000166  f0070001          AND      r0,r7,#1
00016a  70b0              STRB     r0,[r6,#2]
00016c  4a29              LDR      r2,|L3.532|
00016e  b130              CBZ      r0,|L3.382|
000170  6810              LDR      r0,[r2,#0]
000172  f02000ff          BIC      r0,r0,#0xff
000176  f1000004          ADD      r0,r0,#4
00017a  6010              STR      r0,[r2,#0]
00017c  e03d              B        |L3.506|
                  |L3.382|
00017e  78f1              LDRB     r1,[r6,#3]  ; adc_ch
000180  0708              LSLS     r0,r1,#28
000182  d406              BMI      |L3.402|
000184  6810              LDR      r0,[r2,#0]
000186  f02000ff          BIC      r0,r0,#0xff
00018a  f1000001          ADD      r0,r0,#1
00018e  6010              STR      r0,[r2,#0]
000190  e005              B        |L3.414|
                  |L3.402|
000192  6810              LDR      r0,[r2,#0]
000194  f02000ff          BIC      r0,r0,#0xff
000198  f1000002          ADD      r0,r0,#2
00019c  6010              STR      r0,[r2,#0]
                  |L3.414|
00019e  481e              LDR      r0,|L3.536|
0001a0  6803              LDR      r3,[r0,#0]
0001a2  f0435380          ORR      r3,r3,#0x10000000
0001a6  6003              STR      r3,[r0,#0]
0001a8  6a03              LDR      r3,[r0,#0x20]
0001aa  f0434380          ORR      r3,r3,#0x40000000
0001ae  6203              STR      r3,[r0,#0x20]
0001b0  6e03              LDR      r3,[r0,#0x60]
0001b2  f0436380          ORR      r3,r3,#0x4000000
0001b6  6603              STR      r3,[r0,#0x60]
0001b8  07cb              LSLS     r3,r1,#31
0001ba  d00a              BEQ      |L3.466|
0001bc  6943              LDR      r3,[r0,#0x14]
0001be  f0435380          ORR      r3,r3,#0x10000000
0001c2  6143              STR      r3,[r0,#0x14]
                  |L3.452|
0001c4  078b              LSLS     r3,r1,#30
0001c6  d409              BMI      |L3.476|
0001c8  6b43              LDR      r3,[r0,#0x34]
0001ca  f0234380          BIC      r3,r3,#0x40000000
0001ce  6343              STR      r3,[r0,#0x34]
0001d0  e008              B        |L3.484|
                  |L3.466|
0001d2  6943              LDR      r3,[r0,#0x14]
0001d4  f0235380          BIC      r3,r3,#0x10000000
0001d8  6143              STR      r3,[r0,#0x14]
0001da  e7f3              B        |L3.452|
                  |L3.476|
0001dc  6b43              LDR      r3,[r0,#0x34]
0001de  f0434380          ORR      r3,r3,#0x40000000
0001e2  6343              STR      r3,[r0,#0x34]
                  |L3.484|
0001e4  0749              LSLS     r1,r1,#29
0001e6  d404              BMI      |L3.498|
0001e8  6f41              LDR      r1,[r0,#0x74]
0001ea  f0216180          BIC      r1,r1,#0x4000000
0001ee  6741              STR      r1,[r0,#0x74]
0001f0  e003              B        |L3.506|
                  |L3.498|
0001f2  6f41              LDR      r1,[r0,#0x74]
0001f4  f0416180          ORR      r1,r1,#0x4000000
0001f8  6741              STR      r1,[r0,#0x74]
                  |L3.506|
0001fa  6810              LDR      r0,[r2,#0]
0001fc  f0407080          ORR      r0,r0,#0x1000000
000200  6010              STR      r0,[r2,#0]
000202  e8bd81f0          POP      {r4-r8,pc}
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP

000206  0000              DCW      0x0000
                  |L3.520|
                          DCD      ||area_number.31||+0x2a
                  |L3.524|
                          DCD      ||.bss||+0x420
                  |L3.528|
                          DCD      ||.bss||
                  |L3.532|
                          DCD      0x40034000
                  |L3.536|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  bps_hndl PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  4770              BX       lr
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  4770              BX       lr
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP


                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  ipsBlckHndl PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  b510              PUSH     {r4,lr}
000002  4b15              LDR      r3,|L6.88|
000004  f04f0000          MOV      r0,#0
000008  8018              STRH     r0,[r3,#0]
00000a  4814              LDR      r0,|L6.92|
00000c  f04f0401          MOV      r4,#1
000010  f44f62fa          MOV      r2,#0x7d0
000014  f9b01000          LDRSH    r1,[r0,#0]  ; ipsBlckSrc
000018  4811              LDR      r0,|L6.96|
00001a  2901              CMP      r1,#1
00001c  f9b00000          LDRSH    r0,[r0,#0]
000020  d006              BEQ      |L6.48|
000022  2902              CMP      r1,#2
000024  d10f              BNE      |L6.70|
000026  490f              LDR      r1,|L6.100|
000028  f9b1101a          LDRSH    r1,[r1,#0x1a]
00002c  b160              CBZ      r0,|L6.72|
00002e  e00d              B        |L6.76|
                  |L6.48|
000030  490c              LDR      r1,|L6.100|
000032  f9b11016          LDRSH    r1,[r1,#0x16]
000036  b908              CBNZ     r0,|L6.60|
000038  4291              CMP      r1,r2
00003a  dc03              BGT      |L6.68|
                  |L6.60|
00003c  2801              CMP      r0,#1
00003e  d102              BNE      |L6.70|
000040  4291              CMP      r1,r2
000042  da00              BGE      |L6.70|
                  |L6.68|
000044  801c              STRH     r4,[r3,#0]
                  |L6.70|
000046  bd10              POP      {r4,pc}
                  |L6.72|
000048  4291              CMP      r1,r2
00004a  dc03              BGT      |L6.84|
                  |L6.76|
00004c  2801              CMP      r0,#1
00004e  d1fa              BNE      |L6.70|
000050  4291              CMP      r1,r2
000052  daf8              BGE      |L6.70|
                  |L6.84|
000054  801c              STRH     r4,[r3,#0]
000056  bd10              POP      {r4,pc}
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP

                  |L6.88|
                          DCD      ipsBlckStat
                  |L6.92|
                          DCD      ipsBlckSrc
                  |L6.96|
                          DCD      ipsBlckLog
                  |L6.100|
                          DCD      ||.bss||+0x400

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  bps_drv PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  eb060086          ADD      r0,r6,r6,LSL #2
00000a  eb0001c6          ADD      r1,r0,r6,LSL #3
00000e  4863              LDR      r0,|L7.412|
000010  f8102031          LDRB     r2,[r0,r1,LSL #3]
000014  2a03              CMP      r2,#3
000016  d177              BNE      |L7.264|
000018  eb0004c1          ADD      r4,r0,r1,LSL #3
00001c  f8945046          LDRB     r5,[r4,#0x46]
000020  07a8              LSLS     r0,r5,#30
000022  d517              BPL      |L7.84|
000024  f9b4104a          LDRSH    r1,[r4,#0x4a]
000028  f44f6296          MOV      r2,#0x4b0
00002c  4291              CMP      r1,r2
00002e  da22              BGE      |L7.118|
000030  f1010101          ADD      r1,r1,#1
000034  b208              SXTH     r0,r1
000036  f8a4004a          STRH     r0,[r4,#0x4a]
00003a  4290              CMP      r0,r2
00003c  db1b              BLT      |L7.118|
00003e  f8a4204a          STRH     r2,[r4,#0x4a]
000042  7860              LDRB     r0,[r4,#1]
000044  07c0              LSLS     r0,r0,#31
000046  d116              BNE      |L7.118|
000048  2201              MOVS     r2,#1
00004a  2100              MOVS     r1,#0
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       avar_bps_hndl
000052  e010              B        |L7.118|
                  |L7.84|
000054  f9b4104a          LDRSH    r1,[r4,#0x4a]
000058  b169              CBZ      r1,|L7.118|
00005a  f1a10101          SUB      r1,r1,#1
00005e  b208              SXTH     r0,r1
000060  f8a4004a          STRH     r0,[r4,#0x4a]
000064  b938              CBNZ     r0,|L7.118|
000066  7860              LDRB     r0,[r4,#1]
000068  07c0              LSLS     r0,r0,#31
00006a  d004              BEQ      |L7.118|
00006c  2200              MOVS     r2,#0
00006e  4611              MOV      r1,r2
000070  4630              MOV      r0,r6
000072  f7fffffe          BL       avar_bps_hndl
                  |L7.118|
000076  0728              LSLS     r0,r5,#28
000078  f04f070a          MOV      r7,#0xa
00007c  f04f0800          MOV      r8,#0
000080  d515              BPL      |L7.174|
000082  f9b4104c          LDRSH    r1,[r4,#0x4c]
000086  290a              CMP      r1,#0xa
000088  da26              BGE      |L7.216|
00008a  f1010101          ADD      r1,r1,#1
00008e  b208              SXTH     r0,r1
000090  f8a4004c          STRH     r0,[r4,#0x4c]
000094  280a              CMP      r0,#0xa
000096  db1f              BLT      |L7.216|
000098  f8a4704c          STRH     r7,[r4,#0x4c]
00009c  7860              LDRB     r0,[r4,#1]
00009e  0780              LSLS     r0,r0,#30
0000a0  d41a              BMI      |L7.216|
0000a2  2201              MOVS     r2,#1
0000a4  4611              MOV      r1,r2
0000a6  4630              MOV      r0,r6
0000a8  f7fffffe          BL       avar_bps_hndl
0000ac  e014              B        |L7.216|
                  |L7.174|
0000ae  f9b4104c          LDRSH    r1,[r4,#0x4c]
0000b2  2900              CMP      r1,#0
0000b4  dd0d              BLE      |L7.210|
0000b6  f1a10101          SUB      r1,r1,#1
0000ba  b208              SXTH     r0,r1
0000bc  f8a4004c          STRH     r0,[r4,#0x4c]
0000c0  b950              CBNZ     r0,|L7.216|
0000c2  f04f0200          MOV      r2,#0
0000c6  f04f0101          MOV      r1,#1
0000ca  4630              MOV      r0,r6
0000cc  f7fffffe          BL       avar_bps_hndl
0000d0  e002              B        |L7.216|
                  |L7.210|
0000d2  da01              BGE      |L7.216|
0000d4  f8a4804c          STRH     r8,[r4,#0x4c]
                  |L7.216|
0000d8  06e8              LSLS     r0,r5,#27
0000da  d516              BPL      |L7.266|
0000dc  f9b4004e          LDRSH    r0,[r4,#0x4e]
0000e0  280a              CMP      r0,#0xa
0000e2  da20              BGE      |L7.294|
0000e4  f1000001          ADD      r0,r0,#1
0000e8  b200              SXTH     r0,r0
0000ea  f8a4004e          STRH     r0,[r4,#0x4e]
0000ee  280a              CMP      r0,#0xa
0000f0  db19              BLT      |L7.294|
0000f2  f8a4704e          STRH     r7,[r4,#0x4e]
0000f6  7860              LDRB     r0,[r4,#1]
0000f8  0740              LSLS     r0,r0,#29
0000fa  d414              BMI      |L7.294|
0000fc  2201              MOVS     r2,#1
0000fe  2102              MOVS     r1,#2
000100  4630              MOV      r0,r6
000102  f7fffffe          BL       avar_bps_hndl
000106  e00e              B        |L7.294|
                  |L7.264|
000108  e045              B        |L7.406|
                  |L7.266|
00010a  f9b4004e          LDRSH    r0,[r4,#0x4e]
00010e  b150              CBZ      r0,|L7.294|
000110  f1a00001          SUB      r0,r0,#1
000114  b200              SXTH     r0,r0
000116  f8a4004e          STRH     r0,[r4,#0x4e]
00011a  b920              CBNZ     r0,|L7.294|
00011c  2200              MOVS     r2,#0
00011e  2102              MOVS     r1,#2
000120  4630              MOV      r0,r6
000122  f7fffffe          BL       avar_bps_hndl
                  |L7.294|
000126  7860              LDRB     r0,[r4,#1]
000128  0700              LSLS     r0,r0,#28
00012a  d003              BEQ      |L7.308|
00012c  f04f0005          MOV      r0,#5
000130  70a0              STRB     r0,[r4,#2]
000132  e016              B        |L7.354|
                  |L7.308|
000134  481a              LDR      r0,|L7.416|
000136  7800              LDRB     r0,[r0,#0]  ; net_av
000138  b128              CBZ      r0,|L7.326|
00013a  78e0              LDRB     r0,[r4,#3]
00013c  2814              CMP      r0,#0x14
00013e  d902              BLS      |L7.326|
000140  f8848002          STRB     r8,[r4,#2]
000144  e00d              B        |L7.354|
                  |L7.326|
000146  f8940046          LDRB     r0,[r4,#0x46]
00014a  0680              LSLS     r0,r0,#26
00014c  d503              BPL      |L7.342|
00014e  f04f0003          MOV      r0,#3
000152  70a0              STRB     r0,[r4,#2]
000154  e005              B        |L7.354|
                  |L7.342|
000156  78e0              LDRB     r0,[r4,#3]
000158  2814              CMP      r0,#0x14
00015a  d202              BCS      |L7.354|
00015c  f04f0002          MOV      r0,#2
000160  70a0              STRB     r0,[r4,#2]
                  |L7.354|
000162  78e0              LDRB     r0,[r4,#3]
000164  280a              CMP      r0,#0xa
000166  d306              BCC      |L7.374|
000168  f894002c          LDRB     r0,[r4,#0x2c]
00016c  f0400080          ORR      r0,r0,#0x80
000170  f884002c          STRB     r0,[r4,#0x2c]
000174  e005              B        |L7.386|
                  |L7.374|
000176  f894002c          LDRB     r0,[r4,#0x2c]
00017a  f000007f          AND      r0,r0,#0x7f
00017e  f884002c          STRB     r0,[r4,#0x2c]
                  |L7.386|
000182  4908              LDR      r1,|L7.420|
000184  f9b40054          LDRSH    r0,[r4,#0x54]
000188  f9b1100c          LDRSH    r1,[r1,#0xc]  ; cntrl_stat
00018c  4408              ADD      r0,r0,r1
00018e  6360              STR      r0,[r4,#0x34]
000190  f44f60fa          MOV      r0,#0x7d0
000194  63a0              STR      r0,[r4,#0x38]
                  |L7.406|
000196  e8bd81f0          POP      {r4-r8,pc}
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP

00019a  0000              DCW      0x0000
                  |L7.412|
                          DCD      bps
                  |L7.416|
                          DCD      net_av
                  |L7.420|
                          DCD      ||area_number.31||

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  bat_hndl PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  b570              PUSH     {r4-r6,lr}
000002  20c8              MOVS     r0,#0xc8
000004  f7fffffe          BL       mess_find_unvol
000008  493a              LDR      r1,|L8.244|
00000a  2200              MOVS     r2,#0
00000c  b3a8              CBZ      r0,|L8.122|
00000e  4b3a              LDR      r3,|L8.248|
000010  2401              MOVS     r4,#1
000012  6818              LDR      r0,[r3,#0]  ; mess_data
000014  28c9              CMP      r0,#0xc9
000016  d01c              BEQ      |L8.82|
000018  28ca              CMP      r0,#0xca
00001a  d02f              BEQ      |L8.124|
00001c  4610              MOV      r0,r2
                  |L8.30|
00001e  eb000340          ADD      r3,r0,r0,LSL #1
000022  eb031300          ADD      r3,r3,r0,LSL #4
000026  f8012023          STRB     r2,[r1,r3,LSL #2]
00002a  f1000001          ADD      r0,r0,#1
00002e  b2c0              UXTB     r0,r0
000030  2802              CMP      r0,#2
000032  d3f4              BCC      |L8.30|
                  |L8.52|
000034  f04f0000          MOV      r0,#0
                  |L8.56|
000038  eb000340          ADD      r3,r0,r0,LSL #1
00003c  eb031300          ADD      r3,r3,r0,LSL #4
000040  f8115023          LDRB     r5,[r1,r3,LSL #2]
000044  2d14              CMP      r5,#0x14
000046  d939              BLS      |L8.188|
000048  eb010383          ADD      r3,r1,r3,LSL #2
00004c  f883403c          STRB     r4,[r3,#0x3c]
000050  e038              B        |L8.196|
                  |L8.82|
000052  f04f0000          MOV      r0,#0
                  |L8.86|
000056  eb000340          ADD      r3,r0,r0,LSL #1
00005a  eb031500          ADD      r5,r3,r0,LSL #4
00005e  f8113025          LDRB     r3,[r1,r5,LSL #2]
000062  2b32              CMP      r3,#0x32
000064  d203              BCS      |L8.110|
000066  f1030301          ADD      r3,r3,#1
00006a  f8013025          STRB     r3,[r1,r5,LSL #2]
                  |L8.110|
00006e  f1000001          ADD      r0,r0,#1
000072  b2c0              UXTB     r0,r0
000074  2802              CMP      r0,#2
000076  d3ee              BCC      |L8.86|
000078  e7dc              B        |L8.52|
                  |L8.122|
00007a  e029              B        |L8.208|
                  |L8.124|
00007c  f04f0000          MOV      r0,#0
000080  685e              LDR      r6,[r3,#4]
                  |L8.130|
000082  fa04f300          LSL      r3,r4,r0
000086  421e              TST      r6,r3
000088  d00c              BEQ      |L8.164|
00008a  eb000340          ADD      r3,r0,r0,LSL #1
00008e  eb031500          ADD      r5,r3,r0,LSL #4
000092  f8113025          LDRB     r3,[r1,r5,LSL #2]
000096  2b32              CMP      r3,#0x32
000098  d20a              BCS      |L8.176|
00009a  f1030301          ADD      r3,r3,#1
00009e  f8013025          STRB     r3,[r1,r5,LSL #2]
0000a2  e005              B        |L8.176|
                  |L8.164|
0000a4  eb000340          ADD      r3,r0,r0,LSL #1
0000a8  eb031300          ADD      r3,r3,r0,LSL #4
0000ac  f8012023          STRB     r2,[r1,r3,LSL #2]
                  |L8.176|
0000b0  f1000001          ADD      r0,r0,#1
0000b4  b2c0              UXTB     r0,r0
0000b6  2802              CMP      r0,#2
0000b8  d3e3              BCC      |L8.130|
0000ba  e7bb              B        |L8.52|
                  |L8.188|
0000bc  eb010383          ADD      r3,r1,r3,LSL #2
0000c0  f883203c          STRB     r2,[r3,#0x3c]
                  |L8.196|
0000c4  f1000001          ADD      r0,r0,#1
0000c8  b2c0              UXTB     r0,r0
0000ca  2802              CMP      r0,#2
0000cc  d3b4              BCC      |L8.56|
0000ce  bd70              POP      {r4-r6,pc}
                  |L8.208|
0000d0  f04f0000          MOV      r0,#0
                  |L8.212|
0000d4  eb000340          ADD      r3,r0,r0,LSL #1
0000d8  eb031300          ADD      r3,r3,r0,LSL #4
0000dc  f8012023          STRB     r2,[r1,r3,LSL #2]
0000e0  eb010383          ADD      r3,r1,r3,LSL #2
0000e4  f883203c          STRB     r2,[r3,#0x3c]
0000e8  f1000001          ADD      r0,r0,#1
0000ec  b2c0              UXTB     r0,r0
0000ee  2802              CMP      r0,#2
0000f0  d3f0              BCC      |L8.212|
0000f2  bd70              POP      {r4-r6,pc}
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP

                  |L8.244|
                          DCD      bat
                  |L8.248|
                          DCD      mess_data

                          AREA ||area_number.9||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.text||
                  klimat_hndl PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4d66              LDR      r5,|L9.416|
000006  4867              LDR      r0,|L9.420|
000008  4c67              LDR      r4,|L9.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
00000e  f9b02000          LDRSH    r2,[r0,#0]  ; TBOXMAX
000012  f9b40000          LDRSH    r0,[r4,#0]
000016  4291              CMP      r1,r2
000018  dd03              BLE      |L9.34|
00001a  f1000001          ADD      r0,r0,#1
00001e  8020              STRH     r0,[r4,#0]
000020  e003              B        |L9.42|
                  |L9.34|
000022  da02              BGE      |L9.42|
000024  f1a00001          SUB      r0,r0,#1
000028  8020              STRH     r0,[r4,#0]
                  |L9.42|
00002a  2206              MOVS     r2,#6
00002c  2100              MOVS     r1,#0
00002e  485e              LDR      r0,|L9.424|
000030  f7fffffe          BL       gran
000034  f9b40000          LDRSH    r0,[r4,#0]  ; av_tbox_cnt
000038  495c              LDR      r1,|L9.428|
00003a  2601              MOVS     r6,#1
00003c  2805              CMP      r0,#5
00003e  dd00              BLE      |L9.66|
000040  700e              STRB     r6,[r1,#0]
                  |L9.66|
000042  2400              MOVS     r4,#0
000044  2801              CMP      r0,#1
000046  da00              BGE      |L9.74|
000048  700c              STRB     r4,[r1,#0]
                  |L9.74|
00004a  4959              LDR      r1,|L9.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]  ; t_box
000050  4a58              LDR      r2,|L9.436|
000052  f9b11000          LDRSH    r1,[r1,#0]  ; TBOXREG
000056  4f58              LDR      r7,|L9.440|
000058  1e8b              SUBS     r3,r1,#2
00005a  4298              CMP      r0,r3
00005c  da0f              BGE      |L9.126|
00005e  f9921000          LDRSB    r1,[r2,#0]  ; t_box_cnt
000062  291e              CMP      r1,#0x1e
000064  da1e              BGE      |L9.164|
000066  f1010101          ADD      r1,r1,#1
00006a  b249              SXTB     r1,r1
00006c  7011              STRB     r1,[r2,#0]
00006e  291e              CMP      r1,#0x1e
000070  db18              BLT      |L9.164|
000072  8839              LDRH     r1,[r7,#0]  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1
000078  8039              STRH     r1,[r7,#0]
00007a  7014              STRB     r4,[r2,#0]
00007c  e012              B        |L9.164|
                  |L9.126|
00007e  4288              CMP      r0,r1
000080  dd0f              BLE      |L9.162|
000082  f9921000          LDRSB    r1,[r2,#0]  ; t_box_cnt
000086  291e              CMP      r1,#0x1e
000088  da0c              BGE      |L9.164|
00008a  f1010101          ADD      r1,r1,#1
00008e  b249              SXTB     r1,r1
000090  7011              STRB     r1,[r2,#0]
000092  291e              CMP      r1,#0x1e
000094  db06              BLT      |L9.164|
000096  8839              LDRH     r1,[r7,#0]  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1
00009c  8039              STRH     r1,[r7,#0]
00009e  7014              STRB     r4,[r2,#0]
0000a0  e000              B        |L9.164|
                  |L9.162|
0000a2  7014              STRB     r4,[r2,#0]
                  |L9.164|
0000a4  4945              LDR      r1,|L9.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]  ; TBOXVENTMAX
0000aa  4288              CMP      r0,r1
0000ac  dd05              BLE      |L9.186|
0000ae  2214              MOVS     r2,#0x14
0000b0  2100              MOVS     r1,#0
0000b2  4841              LDR      r0,|L9.440|
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L9.202|
                  |L9.186|
0000ba  4841              LDR      r0,|L9.448|
0000bc  2100              MOVS     r1,#0
0000be  8800              LDRH     r0,[r0,#0]  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9
0000c2  b202              SXTH     r2,r0
0000c4  483c              LDR      r0,|L9.440|
0000c6  f7fffffe          BL       gran
                  |L9.202|
0000ca  20f0              MOVS     r0,#0xf0
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L9.222|
0000d2  483c              LDR      r0,|L9.452|
0000d4  6801              LDR      r1,[r0,#0]  ; mess_data
0000d6  29f1              CMP      r1,#0xf1
0000d8  d101              BNE      |L9.222|
0000da  6840              LDR      r0,[r0,#4]  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]
                  |L9.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]  ; main_vent_pos
0000e2  4839              LDR      r0,|L9.456|
0000e4  2901              CMP      r1,#1
0000e6  dc01              BGT      |L9.236|
0000e8  7006              STRB     r6,[r0,#0]
0000ea  e000              B        |L9.238|
                  |L9.236|
0000ec  7004              STRB     r4,[r0,#0]
                  |L9.238|
0000ee  4837              LDR      r0,|L9.460|
0000f0  f8df80dc          LDR      r8,|L9.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]  ; TBATDISABLE
0000f8  f1a00132          SUB      r1,r0,#0x32
0000fc  2928              CMP      r1,#0x28
0000fe  d821              BHI      |L9.324|
000100  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
000104  4f33              LDR      r7,|L9.468|
000106  4281              CMP      r1,r0
000108  dd03              BLE      |L9.274|
00010a  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1
000110  8038              STRH     r0,[r7,#0]
                  |L9.274|
000112  4831              LDR      r0,|L9.472|
000114  f9b00000          LDRSH    r0,[r0,#0]  ; TBATENABLE
000118  4281              CMP      r1,r0
00011a  da03              BGE      |L9.292|
00011c  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
00011e  f1a00001          SUB      r0,r0,#1
000122  8038              STRH     r0,[r7,#0]
                  |L9.292|
000124  2206              MOVS     r2,#6
000126  2100              MOVS     r1,#0
000128  482a              LDR      r0,|L9.468|
00012a  f7fffffe          BL       gran
00012e  f9b70000          LDRSH    r0,[r7,#0]  ; tbatdisable_cnt
000132  2805              CMP      r0,#5
000134  dd01              BLE      |L9.314|
000136  f8886000          STRB     r6,[r8,#0]
                  |L9.314|
00013a  2801              CMP      r0,#1
00013c  da04              BGE      |L9.328|
00013e  f8884000          STRB     r4,[r8,#0]
000142  e001              B        |L9.328|
                  |L9.324|
000144  f8884000          STRB     r4,[r8,#0]
                  |L9.328|
000148  4824              LDR      r0,|L9.476|
00014a  4f25              LDR      r7,|L9.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32
000154  291e              CMP      r1,#0x1e
000156  d820              BHI      |L9.410|
000158  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
00015c  4d21              LDR      r5,|L9.484|
00015e  4281              CMP      r1,r0
000160  dd03              BLE      |L9.362|
000162  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000164  f1000001          ADD      r0,r0,#1
000168  8028              STRH     r0,[r5,#0]
                  |L9.362|
00016a  481f              LDR      r0,|L9.488|
00016c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADENABLE
000170  4281              CMP      r1,r0
000172  da03              BGE      |L9.380|
000174  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1
00017a  8028              STRH     r0,[r5,#0]
                  |L9.380|
00017c  2206              MOVS     r2,#6
00017e  2100              MOVS     r1,#0
000180  4818              LDR      r0,|L9.484|
000182  f7fffffe          BL       gran
000186  f9b50000          LDRSH    r0,[r5,#0]  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5
00018c  dd00              BLE      |L9.400|
00018e  703e              STRB     r6,[r7,#0]
                  |L9.400|
000190  2801              CMP      r0,#1
000192  da00              BGE      |L9.406|
000194  703c              STRB     r4,[r7,#0]
                  |L9.406|
000196  e8bd81f0          POP      {r4-r8,pc}
                  |L9.410|
00019a  703c              STRB     r4,[r7,#0]
00019c  e7fb              B        |L9.406|
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP

00019e  0000              DCW      0x0000
                  |L9.416|
                          DCD      t_box
                  |L9.420|
                          DCD      TBOXMAX
                  |L9.424|
                          DCD      av_tbox_cnt
                  |L9.428|
                          DCD      av_tbox_stat
                  |L9.432|
                          DCD      TBOXREG
                  |L9.436|
                          DCD      t_box_cnt
                  |L9.440|
                          DCD      main_vent_pos
                  |L9.444|
                          DCD      TBOXVENTMAX
                  |L9.448|
                          DCD      pos_vent
                  |L9.452|
                          DCD      mess_data
                  |L9.456|
                          DCD      mixer_vent_stat
                  |L9.460|
                          DCD      TBATDISABLE
                  |L9.464|
                          DCD      tbatdisable_stat
                  |L9.468|
                          DCD      tbatdisable_cnt
                  |L9.472|
                          DCD      TBATENABLE
                  |L9.476|
                          DCD      TLOADDISABLE
                  |L9.480|
                          DCD      tloaddisable_stat
                  |L9.484|
                          DCD      tloaddisable_cnt
                  |L9.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.10||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.text||
                  zar_superviser_start PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  4a04              LDR      r2,|L10.20|
000002  f04f0001          MOV      r0,#1
000006  7010              STRB     r0,[r2,#0]
000008  4903              LDR      r1,|L10.24|
00000a  7008              STRB     r0,[r1,#0]
00000c  7050              STRB     r0,[r2,#1]
00000e  7048              STRB     r0,[r1,#1]
000010  4770              BX       lr
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      sign_U
                  |L10.24|
                          DCD      sign_I

                          AREA ||area_number.11||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.text||
                  speedChargeHndl PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  4770              BX       lr
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP


                          AREA ||area_number.12||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.text||
                  speedChargeStartStop PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  4770              BX       lr
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32

                          AREA ||area_number.15||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.15||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.16||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.16||, ||.bss||
                  net_buff
                          %        64

                          AREA ||area_number.17||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.17||, ||.bss||
                  cntrl_stat_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.21||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.21||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.22||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.22||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.23||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.24||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.24||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.25||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.25||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.29||, DATA, ALIGN=1

                          EXPORTAS ||area_number.29||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  vent_stat
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  cntrlStatIsDownCnt
000000  00                DCB      0x00
                  adc_self_ch_cnt
000001  00                DCB      0x00
                  adc_ch_net
000002  00                DCB      0x00
                  adc_ch
000003  00                DCB      0x00
                  adc_ch_cnt
000004  00                DCB      0x00
                  adc_window_flag
000005  00                DCB      0x00
                  b1Hz_ch
000006  00                DCB      0x00
                  i
000007  00                DCB      0x00
                  iiii
000008  00                DCB      0x00
                  num_necc_up
000009  00                DCB      0x00
                  num_necc_down
00000a  0000              DCB      0x00,0x00
                  cntrl_stat
00000c  04b0              DCW      0x04b0
                  cntrl_stat_old
00000e  04b0              DCW      0x04b0
                  num_necc_block_cnt
000010  0000              DCB      0x00,0x00
                  net_buff_
000012  0000              DCB      0x00,0x00
                  adc_result
000014  0000              DCB      0x00,0x00
                  adc_gorb_cnt
000016  0000              DCB      0x00,0x00
                  adc_zero_cnt
000018  0000              DCB      0x00,0x00
                  adc_window_cnt
00001a  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
00001c  0000              DCB      0x00,0x00
                  cntrl_stat_new
00001e  0000              DCB      0x00,0x00
                  Ibmax
000020  0000              DCB      0x00,0x00
                  IZMAX_
000022  0000              DCB      0x00,0x00
                  samokalibr_cnt
000024  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
000026  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000028  0000              DCB      0x00,0x00
                  adc_self_ch_buff
00002a  0000              DCB      0x00,0x00
                          DCDU     0x00000000
                  adc_self_ch_disp
                          DCDU     0x00000000
000034  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=1

                          EXPORTAS ||area_number.32||, ||.data||
                  avg_main_cnt
000000  0014              DCW      0x0014

                          AREA ||area_number.33||, DATA, ALIGN=1

                          EXPORTAS ||area_number.33||, ||.data||
                  u_out_reg_main_cnt
000000  000a              DCW      0x000a

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=0

                          EXPORTAS ||area_number.36||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  net_metr_buff_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=1

                          EXPORTAS ||area_number.40||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.41||, DATA, ALIGN=1

                          EXPORTAS ||area_number.41||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=0

                          EXPORTAS ||area_number.43||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.44||, DATA, ALIGN=0

                          EXPORTAS ||area_number.44||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.45||, DATA, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.46||, DATA, ALIGN=1

                          EXPORTAS ||area_number.46||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.47||, DATA, ALIGN=1

                          EXPORTAS ||area_number.47||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.48||, DATA, ALIGN=1

                          EXPORTAS ||area_number.48||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.49||, DATA, ALIGN=1

                          EXPORTAS ||area_number.49||, ||.data||
                  plazma_sk
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=0

                          EXPORTAS ||area_number.52||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.53||, DATA, ALIGN=0

                          EXPORTAS ||area_number.53||, ||.data||
                  ch_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.54||, DATA, ALIGN=0

                          EXPORTAS ||area_number.54||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.55||, DATA, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=1

                          EXPORTAS ||area_number.58||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.59||, DATA, ALIGN=1

                          EXPORTAS ||area_number.59||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.60||, DATA, ALIGN=1

                          EXPORTAS ||area_number.60||, ||.data||
                  Ubpsmax
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.61||, DATA, ALIGN=1

                          EXPORTAS ||area_number.61||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.62||, DATA, ALIGN=1

                          EXPORTAS ||area_number.62||, ||.data||
                  cntrl_stat_buff_
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.63||, DATA, ALIGN=0

                          EXPORTAS ||area_number.63||, ||.data||
                  cntrl_stat_buff_ptr
000000  00                DCB      0x00

                          AREA ||area_number.64||, DATA, ALIGN=2

                          EXPORTAS ||area_number.64||, ||.data||
                  i_avg_max
                          DCD      0x00000000

                          AREA ||area_number.65||, DATA, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.data||
                  i_avg_min
                          DCD      0x00000000

                          AREA ||area_number.66||, DATA, ALIGN=2

                          EXPORTAS ||area_number.66||, ||.data||
                  i_avg_summ
                          DCD      0x00000000

                          AREA ||area_number.67||, DATA, ALIGN=2

                          EXPORTAS ||area_number.67||, ||.data||
                  i_avg
                          DCD      0x00000000

                          AREA ||area_number.68||, DATA, ALIGN=2

                          EXPORTAS ||area_number.68||, ||.data||
                  avg
                          DCD      0x00000000

                          AREA ||area_number.69||, DATA, ALIGN=0

                          EXPORTAS ||area_number.69||, ||.data||
                  bAVG
000000  00                DCB      0x00

                          AREA ||area_number.70||, DATA, ALIGN=0

                          EXPORTAS ||area_number.70||, ||.data||
                  avg_cnt_
000000  00                DCB      0x00

                          AREA ||area_number.71||, DATA, ALIGN=0

                          EXPORTAS ||area_number.71||, ||.data||
                  avg_num
000000  00                DCB      0x00

                          AREA ||area_number.72||, DATA, ALIGN=0

                          EXPORTAS ||area_number.72||, ||.data||
                  bAVG_BLOCK
000000  00                DCB      0x00

                          AREA ||area_number.73||, DATA, ALIGN=0

                          EXPORTAS ||area_number.73||, ||.data||
                  bAVG_DIR
000000  00                DCB      0x00

                          AREA ||area_number.74||, DATA, ALIGN=1

                          EXPORTAS ||area_number.74||, ||.data||
                  main_kb_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.75||, DATA, ALIGN=1

                          EXPORTAS ||area_number.75||, ||.data||
                  kb_cnt_1lev
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.76||, DATA, ALIGN=1

                          EXPORTAS ||area_number.76||, ||.data||
                  kb_cnt_2lev
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.77||, DATA, ALIGN=0

                          EXPORTAS ||area_number.77||, ||.data||
                  kb_full_ver
000000  00                DCB      0x00

                          AREA ||area_number.78||, DATA, ALIGN=0

                          EXPORTAS ||area_number.78||, ||.data||
                  kb_start
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.79||, DATA, ALIGN=0

                          EXPORTAS ||area_number.79||, ||.data||
                  kb_start_ips
000000  00                DCB      0x00

                          AREA ||area_number.80||, DATA, ALIGN=1

                          EXPORTAS ||area_number.80||, ||.data||
                  ibat_ips
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.81||, DATA, ALIGN=1

                          EXPORTAS ||area_number.81||, ||.data||
                  ibat_ips_
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.82||, DATA, ALIGN=0

                          EXPORTAS ||area_number.82||, ||.data||
                  num_of_wrks_bps
000000  00                DCB      0x00

                          AREA ||area_number.83||, DATA, ALIGN=0

                          EXPORTAS ||area_number.83||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.84||, DATA, ALIGN=0

                          EXPORTAS ||area_number.84||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.85||, DATA, ALIGN=0

                          EXPORTAS ||area_number.85||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.86||, DATA, ALIGN=0

                          EXPORTAS ||area_number.86||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.87||, DATA, ALIGN=1

                          EXPORTAS ||area_number.87||, ||.data||
                  bps_on_mask
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.88||, DATA, ALIGN=1

                          EXPORTAS ||area_number.88||, ||.data||
                  bps_off_mask
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.89||, DATA, ALIGN=0

                          EXPORTAS ||area_number.89||, ||.data||
                  sh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.90||, DATA, ALIGN=0

                          EXPORTAS ||area_number.90||, ||.data||
                  b1Hz_sh
000000  00                DCB      0x00

                          AREA ||area_number.91||, DATA, ALIGN=0

                          EXPORTAS ||area_number.91||, ||.data||
                  spc_stat
000000  00                DCB      0x00

                          AREA ||area_number.92||, DATA, ALIGN=0

                          EXPORTAS ||area_number.92||, ||.data||
                  spc_bat
000000  00                DCB      0x00

                          AREA ||area_number.93||, DATA, ALIGN=0

                          EXPORTAS ||area_number.93||, ||.data||
                  spc_phase
000000  00                DCB      0x00

                          AREA ||area_number.94||, DATA, ALIGN=1

                          EXPORTAS ||area_number.94||, ||.data||
                  vz_cnt_s
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.95||, DATA, ALIGN=1

                          EXPORTAS ||area_number.95||, ||.data||
                  vz_cnt_s_
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.96||, DATA, ALIGN=1

                          EXPORTAS ||area_number.96||, ||.data||
                  vz_cnt_h
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.97||, DATA, ALIGN=1

                          EXPORTAS ||area_number.97||, ||.data||
                  vz_cnt_h_
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.98||, DATA, ALIGN=0

                          EXPORTAS ||area_number.98||, ||.data||
                  bAVZ
000000  00                DCB      0x00

                          AREA ||area_number.99||, DATA, ALIGN=0

                          EXPORTAS ||area_number.99||, ||.data||
                  ke_start_stat
000000  00                DCB      0x00

                          AREA ||area_number.100||, DATA, ALIGN=1

                          EXPORTAS ||area_number.100||, ||.data||
                  cnt_end_ke
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.101||, DATA, ALIGN=2

                          EXPORTAS ||area_number.101||, ||.data||
                  ke_date
                          %        8

                          AREA ||area_number.102||, DATA, ALIGN=1

                          EXPORTAS ||area_number.102||, ||.data||
                  __ee_vz_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.103||, DATA, ALIGN=1

                          EXPORTAS ||area_number.103||, ||.data||
                  __ee_spc_stat
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.104||, DATA, ALIGN=1

                          EXPORTAS ||area_number.104||, ||.data||
                  __ee_spc_bat
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.105||, DATA, ALIGN=1

                          EXPORTAS ||area_number.105||, ||.data||
                  __ee_spc_phase
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.106||, DATA, ALIGN=1

                          EXPORTAS ||area_number.106||, ||.data||
                  cntrl_stat_blok_cnt_plus
                          DCDU     0x00000000

                          AREA ||area_number.107||, DATA, ALIGN=1

                          EXPORTAS ||area_number.107||, ||.data||
                  cntrl_stat_blok_cnt_minus
                          DCDU     0x00000000

                          AREA ||area_number.108||, DATA, ALIGN=0

                          EXPORTAS ||area_number.108||, ||.data||
                  plazma_inv
                          DCDU     0x00000000

                          AREA ||area_number.109||, DATA, ALIGN=0

                          EXPORTAS ||area_number.109||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.110||, DATA, ALIGN=0

                          EXPORTAS ||area_number.110||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.111||, DATA, ALIGN=0

                          EXPORTAS ||area_number.111||, ||.data||
                  numOfForvardBps
000000  00                DCB      0x00

                          AREA ||area_number.112||, DATA, ALIGN=0

                          EXPORTAS ||area_number.112||, ||.data||
                  numOfForvardBps_old
000000  00                DCB      0x00

                          AREA ||area_number.113||, DATA, ALIGN=0

                          EXPORTAS ||area_number.113||, ||.data||
                  numOfForvardBps_minCnt
000000  00                DCB      0x00

                          AREA ||area_number.114||, DATA, ALIGN=1

                          EXPORTAS ||area_number.114||, ||.data||
                  numOfForvardBps_hourCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.115||, DATA, ALIGN=0

                          EXPORTAS ||area_number.115||, ||.data||
                  cntrl_hndl_plazma
000000  00                DCB      0x00
