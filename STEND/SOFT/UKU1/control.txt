; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\STEND.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_VD -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  ke_start PROC
;;;226    //-----------------------------------------------
;;;227    void ke_start(char in)
000000  4770              BX       lr
;;;228    {          
;;;229    
;;;230    }
;;;231    
                          ENDP


                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;226    //-----------------------------------------------
;;;227    void ke_start(char in)
000000  4902              LDR      r1,|L2.12|
;;;228    {          
;;;229    
;;;230    }
000002  f24060f9          MOV      r0,#0x6f9
000006  8248              STRH     r0,[r1,#0x12]
000008  4770              BX       lr
;;;231    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      ||area_number.34||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  samokalibr_hndl PROC
;;;226    //-----------------------------------------------
;;;227    void ke_start(char in)
000000  b570              PUSH     {r4-r6,lr}
;;;228    {          
;;;229    
;;;230    }
000002  4cff              LDR      r4,|L3.1024|
000004  8a60              LDRH     r0,[r4,#0x12]  ; samokalibr_cnt
000006  1c40              ADDS     r0,r0,#1
000008  b200              SXTH     r0,r0
00000a  8260              STRH     r0,[r4,#0x12]
00000c  f5b06fe1          CMP      r0,#0x708
000010  db02              BLT      |L3.24|
000012  f04f0000          MOV      r0,#0
000016  8260              STRH     r0,[r4,#0x12]
                  |L3.24|
000018  f9b40012          LDRSH    r0,[r4,#0x12]  ; samokalibr_cnt
00001c  f5b06fdf          CMP      r0,#0x6f8
000020  d911              BLS      |L3.70|
000022  230f              MOVS     r3,#0xf
000024  2201              MOVS     r2,#1
000026  2164              MOVS     r1,#0x64
000028  20d2              MOVS     r0,#0xd2
00002a  f7fffffe          BL       mess_send
00002e  230f              MOVS     r3,#0xf
000030  2200              MOVS     r2,#0
000032  21d8              MOVS     r1,#0xd8
000034  20d7              MOVS     r0,#0xd7
000036  f7fffffe          BL       mess_send
00003a  230f              MOVS     r3,#0xf
00003c  2200              MOVS     r2,#0
00003e  21d8              MOVS     r1,#0xd8
000040  20dc              MOVS     r0,#0xdc
000042  f7fffffe          BL       mess_send
                  |L3.70|
000046  f9b40012          LDRSH    r0,[r4,#0x12]  ; samokalibr_cnt
00004a  f5a061e0          SUB      r1,r0,#0x700
00004e  3907              SUBS     r1,#7
000050  d118              BNE      |L3.132|
000052  4eec              LDR      r6,|L3.1028|
000054  4cec              LDR      r4,|L3.1032|
000056  4ded              LDR      r5,|L3.1036|
000058  8830              LDRH     r0,[r6,#0]  ; Kibat0
00005a  8821              LDRH     r1,[r4,#0]  ; ad7705_buff_
00005c  4288              CMP      r0,r1
00005e  d005              BEQ      |L3.108|
000060  f9b41000          LDRSH    r1,[r4,#0]  ; ad7705_buff_
000064  f9b50000          LDRSH    r0,[r5,#0]  ; ADR_KI0BAT
000068  f7fffffe          BL       lc640_write_int
                  |L3.108|
00006c  8870              LDRH     r0,[r6,#2]  ; Kibat0
00006e  8861              LDRH     r1,[r4,#2]  ; ad7705_buff_
000070  4288              CMP      r0,r1
000072  d007              BEQ      |L3.132|
000074  f9b41002          LDRSH    r1,[r4,#2]  ; ad7705_buff_
000078  f9b50002          LDRSH    r0,[r5,#2]  ; ADR_KI0BAT
00007c  e8bd4070          POP      {r4-r6,lr}
000080  f7ffbffe          B.W      lc640_write_int
                  |L3.132|
000084  bd70              POP      {r4-r6,pc}
;;;231    
                          ENDP

                  matemat PROC
;;;266    //-----------------------------------------------
;;;267    void matemat(void)
000086  b5f0              PUSH     {r4-r7,lr}
;;;268    {
;;;269    //signed short temp_SS;
;;;270    signed long temp_SL/*,temp_SL_*/;
;;;271    //signed short temp_SS;
;;;272    
;;;273    #ifdef UKU_MGTS
;;;274    //напряжение сети
;;;275    temp_SL=(signed long)net_buff_;
;;;276    temp_SL*=Kunet;
;;;277    temp_SL/=110000L;
;;;278    net_U=(signed short)temp_SL;
;;;279    #endif
;;;280    
;;;281    #ifdef UKU_RSTKM
;;;282    //напряжение сети
;;;283    temp_SL=(signed long)net_buff_;
;;;284    temp_SL*=Kunet;
;;;285    temp_SL/=110000L;
;;;286    net_U=(signed short)temp_SL;
;;;287    #endif
;;;288    
;;;289    #ifdef UKU_3U
;;;290    //напряжение сети
;;;291    temp_SL=(signed long)net_buff_;
;;;292    temp_SL*=Kunet;
;;;293    temp_SL/=36000L;
;;;294    net_U=(signed short)temp_SL;
;;;295    #endif
;;;296    
;;;297    #ifdef UKU_6U
;;;298    //напряжение сети
;;;299    
;;;300    if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;301    	{
;;;302    
;;;303    	if(bps[11]._device==dNET_METR)
;;;304    		{
;;;305    		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;306    		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;307    		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;308    
;;;309    		temp_SL=(signed long)net_metr_buff_[0];
;;;310    		temp_SL*=KunetA;
;;;311    		temp_SL/=6000L;
;;;312    		net_Ua=(signed short)temp_SL;
;;;313    	
;;;314    		temp_SL=(signed long)net_metr_buff_[1];
;;;315    		temp_SL*=KunetB;
;;;316    		temp_SL/=6000L;
;;;317    		net_Ub=(signed short)temp_SL;
;;;318    	
;;;319    		temp_SL=(signed long)net_metr_buff_[2];
;;;320    		temp_SL*=KunetC;
;;;321    		temp_SL/=6000L;
;;;322    		net_Uc=(signed short)temp_SL;
;;;323    		}
;;;324    	else
;;;325    		{
;;;326    		temp_SL=(signed long)net_buff_;
;;;327    		temp_SL*=KunetA;
;;;328    		temp_SL/=110000L;
;;;329    		net_Ua=(signed short)temp_SL;
;;;330    	
;;;331    		temp_SL=(signed long)adc_buff_[3];
;;;332    		temp_SL*=KunetB;
;;;333    		temp_SL/=6000L;
;;;334    		net_Ub=(signed short)temp_SL;
;;;335    	
;;;336    		temp_SL=(signed long)adc_buff_[10];
;;;337    		temp_SL*=KunetC;
;;;338    		temp_SL/=6000L;
;;;339    		net_Uc=(signed short)temp_SL;
;;;340    		}
;;;341    
;;;342    	net_U=net_Ua;
;;;343    	if(net_Ub<net_U)net_U=net_Ub;
;;;344    	if(net_Uc<net_U)net_U=net_Uc;
;;;345    	}
;;;346    else 
;;;347    	{
;;;348    	temp_SL=(signed long)net_buff_;
;;;349    	temp_SL*=Kunet;
;;;350    	temp_SL/=110000L;
;;;351    	net_U=(signed short)temp_SL;
;;;352    	}
;;;353    
;;;354    
;;;355    
;;;356    
;;;357    #endif
;;;358    
;;;359    #ifdef UKU_GLONASS
;;;360    //напряжение сети
;;;361    temp_SL=(signed long)net_buff_;
;;;362    temp_SL*=Kunet;
;;;363    temp_SL/=110000L;
;;;364    net_U=(signed short)temp_SL;
;;;365    #endif
;;;366    
;;;367    #ifdef UKU_KONTUR
;;;368    //напряжение сети
;;;369    temp_SL=(signed long)net_buff_;
;;;370    temp_SL*=Kunet;
;;;371    temp_SL/=110000L;
;;;372    net_U=(signed short)temp_SL;
;;;373    #endif
;;;374    
;;;375    
;;;376    #ifdef UKU_220_V2
;;;377    //напряжение сети
;;;378    
;;;379    if(AUSW_MAIN==22033)
;;;380    	{
;;;381    	temp_SL=(signed long)net_buff_;
;;;382    	temp_SL*=KunetA;
;;;383    	temp_SL/=6000L;
;;;384    	net_Ua=(signed short)temp_SL;
;;;385    
;;;386    	temp_SL=(signed long)adc_buff_[3];
;;;387    	temp_SL*=KunetB;
;;;388    	temp_SL/=6000L;
;;;389    	net_Ub=(signed short)temp_SL;
;;;390    
;;;391    	temp_SL=(signed long)adc_buff_[10];
;;;392    	temp_SL*=KunetC;
;;;393    	temp_SL/=6000L;
;;;394    	net_Uc=(signed short)temp_SL;
;;;395    
;;;396    	net_U=net_Ua;
;;;397    	if(net_Ub<net_U)net_U=net_Ub;
;;;398    	if(net_Uc<net_U)net_U=net_Uc;
;;;399    	}
;;;400    else
;;;401    	{
;;;402    	temp_SL=(signed long)net_buff_;
;;;403    	temp_SL*=Kunet;
;;;404    	temp_SL/=5000L;
;;;405    	net_U=(signed short)temp_SL;
;;;406    	}
;;;407    #endif
;;;408    
;;;409    
;;;410    #ifdef UKU_220
;;;411    //напряжение сети
;;;412    
;;;413    if(AUSW_MAIN==22035)
;;;414    	{
;;;415    	temp_SL=(signed long)net_buff_;
;;;416    	temp_SL*=KunetA;
;;;417    	temp_SL/=6000L;
;;;418    	net_Ua=(signed short)temp_SL;
;;;419    
;;;420    	temp_SL=(signed long)adc_buff_[3];
;;;421    	temp_SL*=KunetB;
;;;422    	temp_SL/=6000L;
;;;423    	net_Ub=(signed short)temp_SL;
;;;424    
;;;425    	temp_SL=(signed long)adc_buff_[10];
;;;426    	temp_SL*=KunetC;
;;;427    	temp_SL/=6000L;
;;;428    	net_Uc=(signed short)temp_SL;
;;;429    
;;;430    	net_U=net_Ua;
;;;431    	if(net_Ub<net_U)net_U=net_Ub;
;;;432    	if(net_Uc<net_U)net_U=net_Uc;
;;;433    	}
;;;434    else
;;;435    	{
;;;436    	temp_SL=(signed long)net_buff_;
;;;437    	temp_SL*=Kunet;
;;;438    	#ifdef _ACDC_
;;;439    	temp_SL/=500L;
;;;440    	#else
;;;441    	temp_SL/=5000L;
;;;442    	#endif
;;;443    	net_U=(signed short)temp_SL;
;;;444    	
;;;445    	}
;;;446    #endif
;;;447    
;;;448    #ifdef UKU_TELECORE2015
;;;449    //напряжение сети
;;;450    temp_SL=(signed long)net_buff_;
;;;451    temp_SL*=Kunet;
;;;452    temp_SL/=110000L;
;;;453    net_U=(signed short)temp_SL;
;;;454    #endif
;;;455    
;;;456    #ifdef UKU_TELECORE2017
;;;457    //напряжение сети
;;;458    temp_SL=(signed long)net_buff_;
;;;459    temp_SL*=Kunet;
;;;460    temp_SL/=110000L;
;;;461    net_U=(signed short)temp_SL;
;;;462    #endif
;;;463    
;;;464    
;;;465    
;;;466    
;;;467    //Напряжение нагрузки
;;;468    temp_SL=(signed long)adc_buff_[2];
000088  4be1              LDR      r3,|L3.1040|
00008a  f9b30004          LDRSH    r0,[r3,#4]  ; adc_buff_
;;;469    temp_SL*=Kuload;
00008e  49e1              LDR      r1,|L3.1044|
000090  f9b11000          LDRSH    r1,[r1,#0]  ; Kuload
000094  4341              MULS     r1,r0,r1
;;;470    temp_SL/=2000L;
000096  f44f62fa          MOV      r2,#0x7d0
00009a  fb91f1f2          SDIV     r1,r1,r2
;;;471    load_U=(signed short)temp_SL;
00009e  4ade              LDR      r2,|L3.1048|
0000a0  8011              STRH     r1,[r2,#0]
;;;472    
;;;473    #ifdef UKU_220 
;;;474    //Напряжение нагрузки
;;;475    temp_SL=(signed long)adc_buff_[2];
;;;476    temp_SL*=Kuload;
;;;477    temp_SL/=350L;
;;;478    load_U=(signed short)temp_SL;
;;;479    #endif
;;;480    
;;;481    #ifdef UKU_220_V2 
;;;482    //Напряжение нагрузки
;;;483    temp_SL=(signed long)adc_buff_[2];
;;;484    temp_SL*=Kuload;
;;;485    temp_SL/=350L;
;;;486    load_U=(signed short)temp_SL;
;;;487    #endif
;;;488    
;;;489    #ifdef UKU_VD
;;;490    //Напряжение выхода
;;;491    temp_SL=(signed long)adc_buff_[1];
0000a2  f9b31002          LDRSH    r1,[r3,#2]  ; adc_buff_
;;;492    temp_SL*=Kuout;
0000a6  4add              LDR      r2,|L3.1052|
0000a8  f9b22000          LDRSH    r2,[r2,#0]  ; Kuout
0000ac  fb01f102          MUL      r1,r1,r2
;;;493    temp_SL/=500L;
0000b0  f44f74fa          MOV      r4,#0x1f4
0000b4  fb91f1f4          SDIV     r1,r1,r4
;;;494    out_U=(signed short)temp_SL;
0000b8  4ad9              LDR      r2,|L3.1056|
0000ba  8011              STRH     r1,[r2,#0]
;;;495    
;;;496    
;;;497    //Напряжение вольтдобавки
;;;498    temp_SL=(signed long)adc_buff_[2];
;;;499    temp_SL*=Kuvd;
0000bc  4ad9              LDR      r2,|L3.1060|
0000be  f9b22000          LDRSH    r2,[r2,#0]  ; Kuvd
0000c2  fb00f202          MUL      r2,r0,r2
;;;500    temp_SL/=500L;
0000c6  fb92f2f4          SDIV     r2,r2,r4
;;;501    vd_U=(signed short)temp_SL;
0000ca  4dd7              LDR      r5,|L3.1064|
0000cc  802a              STRH     r2,[r5,#0]
;;;502    
;;;503    //Напряжение входа
;;;504    in_U=out_U-vd_U;
0000ce  eba10102          SUB      r1,r1,r2
0000d2  4ad6              LDR      r2,|L3.1068|
0000d4  8011              STRH     r1,[r2,#0]
;;;505    
;;;506    //Напряжение выпрямителей
;;;507    temp_SL=(signed long)adc_buff_[2];
;;;508    temp_SL*=Kubps;
0000d6  49d6              LDR      r1,|L3.1072|
0000d8  f9b11000          LDRSH    r1,[r1,#0]  ; Kubps
0000dc  fb00f001          MUL      r0,r0,r1
;;;509    if(AUSW_MAIN==22010)temp_SL/=400L;
0000e0  49d4              LDR      r1,|L3.1076|
0000e2  8809              LDRH     r1,[r1,#0]  ; AUSW_MAIN
0000e4  f5a142aa          SUB      r2,r1,#0x5500
0000e8  3afa              SUBS     r2,r2,#0xfa
0000ea  d104              BNE      |L3.246|
0000ec  f44f71c8          MOV      r1,#0x190
0000f0  fb90f0f1          SDIV     r0,r0,r1
0000f4  e001              B        |L3.250|
                  |L3.246|
;;;510    else temp_SL/=500L;
0000f6  fb90f0f4          SDIV     r0,r0,r4
                  |L3.250|
;;;511    bps_U=(signed short)temp_SL;
0000fa  49cf              LDR      r1,|L3.1080|
0000fc  8008              STRH     r0,[r1,#0]
;;;512    
;;;513    
;;;514    #endif
;;;515    
;;;516    
;;;517    #ifdef UKU_KONTUR
;;;518    //Внешний датчик температуры №1(температура внешнего воздуха)
;;;519    if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;520    else ND_EXT[0]=1;
;;;521    temp_SL=(signed long)adc_buff_[5];
;;;522    temp_SL*=Ktext[0];
;;;523    temp_SL/=20000L;
;;;524    temp_SL-=273L;
;;;525    t_ext[0]=(signed short)temp_SL;
;;;526    #else 
;;;527    //Внешний датчик температуры №1(температура внешнего воздуха)
;;;528    if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
0000fe  f9b3100a          LDRSH    r1,[r3,#0xa]  ; adc_buff_
000102  f64034b7          MOV      r4,#0xbb7
000106  f2a13021          SUB      r0,r1,#0x321
;;;529    else ND_EXT[0]=1;
00010a  2601              MOVS     r6,#1
00010c  2500              MOVS     r5,#0                 ;528
00010e  4acb              LDR      r2,|L3.1084|
000110  42a0              CMP      r0,r4                 ;528
000112  d201              BCS      |L3.280|
000114  7015              STRB     r5,[r2,#0]            ;528
000116  e000              B        |L3.282|
                  |L3.280|
000118  7016              STRB     r6,[r2,#0]
                  |L3.282|
;;;530    temp_SL=(signed long)adc_buff_[5];
;;;531    temp_SL*=Ktext[0];
00011a  48c9              LDR      r0,|L3.1088|
00011c  f9b00000          LDRSH    r0,[r0,#0]  ; Ktext
000120  4341              MULS     r1,r0,r1
;;;532    temp_SL/=20000L;
000122  f6446c20          MOV      r12,#0x4e20
000126  fb91f1fc          SDIV     r1,r1,r12
;;;533    temp_SL-=273L;
00012a  f2a11111          SUB      r1,r1,#0x111
;;;534    t_ext[0]=(signed short)temp_SL;
00012e  4fc5              LDR      r7,|L3.1092|
000130  8039              STRH     r1,[r7,#0]
;;;535    /*
;;;536    if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;537    else ND_EXT[1]=1;
;;;538    temp_SL=(signed long)adc_buff_[6];
;;;539    temp_SL*=Ktext[1];
;;;540    temp_SL/=20000L;
;;;541    temp_SL-=273L;
;;;542    t_ext[1]=(signed short)temp_SL;	*/
;;;543    #endif
;;;544    
;;;545    #ifdef UKU_220
;;;546    
;;;547    //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;548    if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;549    else ND_EXT[1]=1;
;;;550    temp_SL=(signed long)adc_buff_[3];
;;;551    temp_SL*=Ktext[1];
;;;552    temp_SL/=20000L;
;;;553    temp_SL-=273L;
;;;554    t_ext[1]=(signed short)temp_SL;
;;;555    
;;;556    //Внешний датчик температуры №3(температура отсека MSAN)
;;;557    if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;558    else ND_EXT[2]=1;
;;;559    temp_SL=(signed long)adc_buff_[10];
;;;560    temp_SL*=Ktext[2];
;;;561    temp_SL/=20000L;
;;;562    temp_SL-=273L;
;;;563    t_ext[2]=(signed short)temp_SL;
;;;564    
;;;565    #else
;;;566    
;;;567    
;;;568    #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;569    
;;;570    //Внешний датчик температуры 
;;;571    if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
000132  f9b3100c          LDRSH    r1,[r3,#0xc]  ; adc_buff_
000136  f2a13321          SUB      r3,r1,#0x321
00013a  42a3              CMP      r3,r4
00013c  d201              BCS      |L3.322|
00013e  7015              STRB     r5,[r2,#0]
000140  e000              B        |L3.324|
                  |L3.322|
;;;572    else ND_EXT[0]=1;
000142  7016              STRB     r6,[r2,#0]
                  |L3.324|
;;;573    temp_SL=(signed long)adc_buff_[6];
;;;574    temp_SL*=Ktext[0];
000144  4348              MULS     r0,r1,r0
;;;575    temp_SL/=20000L;
000146  fb90f0fc          SDIV     r0,r0,r12
;;;576    temp_SL-=273L;
00014a  f2a01011          SUB      r0,r0,#0x111
;;;577    t_ext[0]=(signed short)temp_SL;
00014e  8038              STRH     r0,[r7,#0]
;;;578    sys_T=t_ext[0];
000150  49bd              LDR      r1,|L3.1096|
000152  8008              STRH     r0,[r1,#0]
;;;579    #else
;;;580    
;;;581    
;;;582    
;;;583    //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;584    if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;585    else ND_EXT[1]=1;
;;;586    temp_SL=(signed long)adc_buff_[6];
;;;587    temp_SL*=Ktext[1];
;;;588    temp_SL/=20000L;
;;;589    temp_SL-=273L;
;;;590    t_ext[1]=(signed short)temp_SL;
;;;591    
;;;592    //Внешний датчик температуры №3(температура отсека MSAN)
;;;593    if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;594    else ND_EXT[2]=1;
;;;595    temp_SL=(signed long)adc_buff_[3];
;;;596    temp_SL*=Ktext[2];
;;;597    temp_SL/=20000L;
;;;598    temp_SL-=273L;
;;;599    t_ext[2]=(signed short)temp_SL;
;;;600    
;;;601    #endif
;;;602    #endif
;;;603    
;;;604    
;;;605    #ifdef UKU_TELECORE2015
;;;606    
;;;607    //Внешний датчик температуры №1
;;;608    if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;609    else ND_EXT[0]=1;
;;;610    temp_SL=(signed long)adc_buff_[7];
;;;611    temp_SL*=Ktext[0];
;;;612    temp_SL/=20000L;
;;;613    temp_SL-=273L;
;;;614    t_ext[0]=(signed short)temp_SL;
;;;615    
;;;616    
;;;617    //Внешний датчик температуры №2
;;;618    if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;619    else ND_EXT[1]=1;
;;;620    temp_SL=(signed long)adc_buff_[6];
;;;621    temp_SL*=Ktext[1];
;;;622    temp_SL/=20000L;
;;;623    temp_SL-=273L;
;;;624    t_ext[1]=(signed short)temp_SL;
;;;625    
;;;626    #endif
;;;627    
;;;628    #ifdef UKU_TELECORE2017
;;;629    
;;;630    //Внешний датчик температуры №1
;;;631    if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;632    else ND_EXT[0]=1;
;;;633    temp_SL=(signed long)adc_buff_[7];
;;;634    temp_SL*=Ktext[0];
;;;635    temp_SL/=20000L;
;;;636    temp_SL-=273L;
;;;637    t_ext[0]=(signed short)temp_SL;
;;;638    
;;;639    
;;;640    //Внешний датчик температуры №2
;;;641    if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;642    else ND_EXT[1]=1;
;;;643    temp_SL=(signed long)adc_buff_[6];
;;;644    temp_SL*=Ktext[1];
;;;645    temp_SL/=20000L;
;;;646    temp_SL-=273L;
;;;647    t_ext[1]=(signed short)temp_SL;
;;;648    
;;;649    #endif
;;;650    
;;;651    //напряжение ввода
;;;652    temp_SL=(signed long)adc_buff_ext_[0];
000154  f8dfc2f4          LDR      r12,|L3.1100|
000158  f8bc1000          LDRH     r1,[r12,#0]  ; adc_buff_ext_
;;;653    temp_SL*=Kunet_ext[0];
00015c  4ebc              LDR      r6,|L3.1104|
00015e  f9b60000          LDRSH    r0,[r6,#0]  ; Kunet_ext
000162  fb00f001          MUL      r0,r0,r1
;;;654    temp_SL/=4000L;
000166  f44f647a          MOV      r4,#0xfa0
00016a  fb90f0f4          SDIV     r0,r0,r4
;;;655    Uvv[0]=(signed short)temp_SL;
00016e  4bb9              LDR      r3,|L3.1108|
000170  b280              UXTH     r0,r0
000172  8018              STRH     r0,[r3,#0]
;;;656    if(Uvv[0]<100) Uvv0=Uvv[0];
000174  49b8              LDR      r1,|L3.1112|
000176  2864              CMP      r0,#0x64
000178  d201              BCS      |L3.382|
00017a  8008              STRH     r0,[r1,#0]
00017c  e002              B        |L3.388|
                  |L3.382|
;;;657    else Uvv0=net_U;
00017e  48b7              LDR      r0,|L3.1116|
000180  8800              LDRH     r0,[r0,#0]  ; net_U
000182  8008              STRH     r0,[r1,#0]
                  |L3.388|
;;;658    
;;;659    //напряжение пэс
;;;660    temp_SL=(signed long)adc_buff_ext_[1];
000184  f8bc1002          LDRH     r1,[r12,#2]  ; adc_buff_ext_
;;;661    temp_SL*=Kunet_ext[1];
000188  f9b60002          LDRSH    r0,[r6,#2]  ; Kunet_ext
00018c  4348              MULS     r0,r1,r0
;;;662    temp_SL/=4000L;
00018e  fb90f0f4          SDIV     r0,r0,r4
;;;663    Uvv[1]=(signed short)temp_SL;
000192  8058              STRH     r0,[r3,#2]
;;;664    
;;;665    
;;;666    //напряжение ввода трехфазное
;;;667    temp_SL=(signed long)eb2_data_short[0];
000194  48b2              LDR      r0,|L3.1120|
000196  f9b01000          LDRSH    r1,[r0,#0]  ; eb2_data_short
;;;668    temp_SL*=Kvv_eb2[0];
00019a  4bb2              LDR      r3,|L3.1124|
00019c  f9b34000          LDRSH    r4,[r3,#0]  ; Kvv_eb2
0001a0  434c              MULS     r4,r1,r4
;;;669    temp_SL/=6000L;
0001a2  f2417170          MOV      r1,#0x1770
0001a6  fb94f6f1          SDIV     r6,r4,r1
;;;670    Uvv_eb2[0]=(signed short)temp_SL;
0001aa  4caf              LDR      r4,|L3.1128|
0001ac  8026              STRH     r6,[r4,#0]
;;;671    
;;;672    temp_SL=(signed long)eb2_data_short[1];
0001ae  f9b0c002          LDRSH    r12,[r0,#2]  ; eb2_data_short
;;;673    temp_SL*=Kvv_eb2[1];
0001b2  f9b36002          LDRSH    r6,[r3,#2]  ; Kvv_eb2
0001b6  fb06f60c          MUL      r6,r6,r12
;;;674    temp_SL/=6000L;
0001ba  fb96f6f1          SDIV     r6,r6,r1
;;;675    Uvv_eb2[1]=(signed short)temp_SL;
0001be  8066              STRH     r6,[r4,#2]
;;;676    
;;;677    temp_SL=(signed long)eb2_data_short[2];
0001c0  f9b06004          LDRSH    r6,[r0,#4]  ; eb2_data_short
;;;678    temp_SL*=Kvv_eb2[2];
0001c4  f9b33004          LDRSH    r3,[r3,#4]  ; Kvv_eb2
0001c8  fb03f306          MUL      r3,r3,r6
;;;679    temp_SL/=6000L;
0001cc  fb93f3f1          SDIV     r3,r3,r1
;;;680    Uvv_eb2[2]=(signed short)temp_SL;
0001d0  80a3              STRH     r3,[r4,#4]
;;;681    
;;;682    //напряжение пэс трехфазное
;;;683    temp_SL=(signed long)eb2_data_short[3];
0001d2  f9b04006          LDRSH    r4,[r0,#6]  ; eb2_data_short
;;;684    temp_SL*=Kpes_eb2[0];
0001d6  4ba5              LDR      r3,|L3.1132|
0001d8  f9b36000          LDRSH    r6,[r3,#0]  ; Kpes_eb2
0001dc  fb06f604          MUL      r6,r6,r4
;;;685    temp_SL/=6000L;
0001e0  fb96f6f1          SDIV     r6,r6,r1
;;;686    Upes_eb2[0]=(signed short)temp_SL;
0001e4  4ca2              LDR      r4,|L3.1136|
0001e6  8026              STRH     r6,[r4,#0]
;;;687    
;;;688    temp_SL=(signed long)eb2_data_short[4];
0001e8  f9b0c008          LDRSH    r12,[r0,#8]  ; eb2_data_short
;;;689    temp_SL*=Kpes_eb2[1];
0001ec  f9b36002          LDRSH    r6,[r3,#2]  ; Kpes_eb2
0001f0  fb06f60c          MUL      r6,r6,r12
;;;690    temp_SL/=6000L;
0001f4  fb96f6f1          SDIV     r6,r6,r1
;;;691    Upes_eb2[1]=(signed short)temp_SL;
0001f8  8066              STRH     r6,[r4,#2]
;;;692    
;;;693    temp_SL=(signed long)eb2_data_short[5];
0001fa  f9b0600a          LDRSH    r6,[r0,#0xa]  ; eb2_data_short
;;;694    temp_SL*=Kpes_eb2[2];
0001fe  f9b30004          LDRSH    r0,[r3,#4]  ; Kpes_eb2
000202  fb00f006          MUL      r0,r0,r6
;;;695    temp_SL/=6000L;
000206  fb90f0f1          SDIV     r0,r0,r1
;;;696    Upes_eb2[2]=(signed short)temp_SL;
00020a  80a0              STRH     r0,[r4,#4]
;;;697    
;;;698    //Вычисление температуры шкафа
;;;699    
;;;700    ibt._T[0]=t_ext[1]+273;
00020c  8878              LDRH     r0,[r7,#2]  ; t_ext
00020e  4e99              LDR      r6,|L3.1140|
000210  f2001011          ADD      r0,r0,#0x111
000214  b203              SXTH     r3,r0
000216  8033              STRH     r3,[r6,#0]
;;;701    ibt._T[1]=t_ext[2]+273;
000218  88b8              LDRH     r0,[r7,#4]  ; t_ext
00021a  f2001011          ADD      r0,r0,#0x111
00021e  b204              SXTH     r4,r0
000220  8074              STRH     r4,[r6,#2]
;;;702    
;;;703    ibt._nd[0]=ND_EXT[1];
000222  7851              LDRB     r1,[r2,#1]  ; ND_EXT
000224  7231              STRB     r1,[r6,#8]
;;;704    ibt._nd[1]=ND_EXT[2];
000226  7890              LDRB     r0,[r2,#2]  ; ND_EXT
000228  7270              STRB     r0,[r6,#9]
;;;705    
;;;706    #ifndef UKU_TELECORE2015
;;;707    if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;708    	{
;;;709    	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
00022a  4a93              LDR      r2,|L3.1144|
00022c  b901              CBNZ     r1,|L3.560|
00022e  b110              CBZ      r0,|L3.566|
                  |L3.560|
;;;710    	}
;;;711    else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
000230  2901              CMP      r1,#1
000232  d00a              BEQ      |L3.586|
000234  e00a              B        |L3.588|
                  |L3.566|
000236  eb030004          ADD      r0,r3,r4              ;709
00023a  eb0070d0          ADD      r0,r0,r0,LSR #31      ;709
00023e  f46f7188          MVN      r1,#0x110             ;709
000242  eb010060          ADD      r0,r1,r0,ASR #1       ;709
000246  8010              STRH     r0,[r2,#0]            ;709
000248  e01c              B        |L3.644|
                  |L3.586|
00024a  b108              CBZ      r0,|L3.592|
                  |L3.588|
;;;712    	{
;;;713    	t_box=ibt._T[1]-273;
;;;714    	}
;;;715    else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
00024c  b121              CBZ      r1,|L3.600|
00024e  e005              B        |L3.604|
                  |L3.592|
000250  f2a41411          SUB      r4,r4,#0x111          ;713
000254  8014              STRH     r4,[r2,#0]            ;713
000256  e015              B        |L3.644|
                  |L3.600|
000258  2801              CMP      r0,#1
00025a  d002              BEQ      |L3.610|
                  |L3.604|
;;;716    	{
;;;717    	t_box=ibt._T[0]-273;
;;;718    	}
;;;719    else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
00025c  2901              CMP      r1,#1
00025e  d004              BEQ      |L3.618|
000260  e010              B        |L3.644|
                  |L3.610|
000262  f2a31311          SUB      r3,r3,#0x111          ;717
000266  8013              STRH     r3,[r2,#0]            ;717
000268  e00c              B        |L3.644|
                  |L3.618|
00026a  2801              CMP      r0,#1
00026c  d10a              BNE      |L3.644|
;;;720    	{
;;;721    	if(t_ext_can_nd<5)t_box= t_ext_can;
00026e  4883              LDR      r0,|L3.1148|
000270  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
000272  2805              CMP      r0,#5
000274  d203              BCS      |L3.638|
000276  4882              LDR      r0,|L3.1152|
000278  8800              LDRH     r0,[r0,#0]  ; t_ext_can
00027a  8010              STRH     r0,[r2,#0]
00027c  e002              B        |L3.644|
                  |L3.638|
;;;722    	else t_box=20;
00027e  f04f0014          MOV      r0,#0x14
000282  8010              STRH     r0,[r2,#0]
                  |L3.644|
;;;723    	}
;;;724    #endif
;;;725    /*
;;;726    //Вычисление температуры шкафа
;;;727    
;;;728    ibt._T[0]=bat[0]._Tb+273;
;;;729    ibt._T[1]=bat[1]._Tb+273;
;;;730    ibt._T[2]=t_ext[1]+273;
;;;731    ibt._T[3]=t_ext[2]+273;
;;;732    
;;;733    ibt._nd[0]=bat[0]._nd;
;;;734    ibt._nd[1]=bat[1]._nd;
;;;735    ibt._nd[2]=ND_EXT[1];
;;;736    ibt._nd[3]=ND_EXT[2];
;;;737    
;;;738    ibt._avg1=0;
;;;739    ibt._avg_cnt=4;
;;;740    
;;;741    if(ibt._nd[0]==0)
;;;742    	{
;;;743    	ibt._avg1+=ibt._T[0];
;;;744    	}
;;;745    else 
;;;746    	{
;;;747    	ibt._avg_cnt--;
;;;748    	}
;;;749    
;;;750    if(ibt._nd[1]==0)
;;;751    	{
;;;752    	ibt._avg1+=ibt._T[1];
;;;753    	}
;;;754    else 
;;;755    	{
;;;756    	ibt._avg_cnt--;
;;;757    	}
;;;758    
;;;759    if(ibt._nd[2]==0)
;;;760    	{
;;;761    	ibt._avg1+=ibt._T[2];
;;;762    	}
;;;763    else 
;;;764    	{
;;;765    	ibt._avg_cnt--;
;;;766    	}
;;;767    
;;;768    if(ibt._nd[3]==0)
;;;769    	{
;;;770    	ibt._avg1+=ibt._T[3];
;;;771    	}
;;;772    else 
;;;773    	{
;;;774    	ibt._avg_cnt--;
;;;775    	}
;;;776    
;;;777    if(ibt._avg_cnt==0)
;;;778    	{
;;;779    	}
;;;780    else
;;;781    	{
;;;782    	ibt._avg1/=ibt._avg_cnt;
;;;783    	}
;;;784    
;;;785    
;;;786    if(ibt._nd[0]!=0)
;;;787    	{
;;;788    	ibt._T_dispers[0]=0;
;;;789    	}
;;;790    else 
;;;791    	{
;;;792    	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;793    	}
;;;794    
;;;795    if(ibt._nd[1]!=0)
;;;796    	{
;;;797    	ibt._T_dispers[1]=0;
;;;798    	}
;;;799    else 
;;;800    	{
;;;801    	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;802    	}
;;;803    
;;;804    if(ibt._nd[2]!=0)
;;;805    	{
;;;806    	ibt._T_dispers[2]=0;
;;;807    	}
;;;808    else 
;;;809    	{
;;;810    	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;811    	}
;;;812    
;;;813    if(ibt._nd[3]!=0)
;;;814    	{
;;;815    	ibt._T_dispers[3]=0;
;;;816    	}
;;;817    else 
;;;818    	{
;;;819    	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;820    	}
;;;821    
;;;822    if(	ibt._nd[0]&&
;;;823    	ibt._nd[1]&&
;;;824    	ibt._nd[2]&&
;;;825    	ibt._nd[3]
;;;826    	)
;;;827    	{
;;;828    	t_box=(bps[0]._Ti);
;;;829    	}
;;;830    
;;;831    else if(	ibt._nd[0]||
;;;832    	ibt._nd[1]||
;;;833    	ibt._nd[2]||
;;;834    	ibt._nd[3]
;;;835    	)
;;;836    	{
;;;837    	t_box=(ibt._avg1-273);
;;;838    	}
;;;839    else 
;;;840    	{
;;;841    	ibt._max_dispers_num=0;
;;;842    	ibt._max_dispers=ibt._T_dispers[0];
;;;843    
;;;844    	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;845    		{
;;;846    		ibt._max_dispers_num=1;
;;;847    		ibt._max_dispers=ibt._T_dispers[1];
;;;848    		}
;;;849    	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;850    		{
;;;851    		ibt._max_dispers_num=2;
;;;852    		ibt._max_dispers=ibt._T_dispers[2];
;;;853    		}
;;;854    	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;855    		{
;;;856    		ibt._max_dispers_num=3;
;;;857    		ibt._max_dispers=ibt._T_dispers[3];
;;;858    		}
;;;859    
;;;860    	ibt._avg2=0;
;;;861    
;;;862    	if(ibt._max_dispers_num!=0)
;;;863    		{
;;;864    		ibt._avg2+=ibt._T[0];
;;;865    		}
;;;866    	if(ibt._max_dispers_num!=1)
;;;867    		{
;;;868    		ibt._avg2+=ibt._T[1];
;;;869    		}
;;;870    	if(ibt._max_dispers_num!=2)
;;;871    		{
;;;872    		ibt._avg2+=ibt._T[2];
;;;873    		}
;;;874    	if(ibt._max_dispers_num!=3)
;;;875    		{
;;;876    		ibt._avg2+=ibt._T[3];
;;;877    		}
;;;878    
;;;879    	t_box=(ibt._avg2/3)-273;
;;;880    
;;;881    	}*/
;;;882    
;;;883    
;;;884    //*********************************************
;;;885    
;;;886    
;;;887    #ifdef TELECORE
;;;888    Ibmax=0;
;;;889    /*
;;;890    if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;891    if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;892    if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;893    */
;;;894    if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;895    if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;896    //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;897    //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;898    #endif
;;;899    //Ibmax=bat[0]._Ib;
;;;900    //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;901    
;;;902    #ifdef UKU_TELECORE2017
;;;903    Ibmax=0;
;;;904    if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;905    if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;906    #endif
;;;907    
;;;908    
;;;909    load_I=0;
000284  487f              LDR      r0,|L3.1156|
000286  8005              STRH     r5,[r0,#0]
;;;910    Isumm=0;
000288  487f              LDR      r0,|L3.1160|
00028a  8005              STRH     r5,[r0,#0]
;;;911    
;;;912    
;;;913    
;;;914    
;;;915    #ifdef UKU_GLONASS
;;;916    inv[0]._Uio=6;
;;;917    if (NUMINV)
;;;918    	{
;;;919    	for(i=0;i<NUMINV;i++)
;;;920    		{
;;;921    		if(bps[i+first_inv_slot]._cnt<25)
;;;922         		{
;;;923         		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;924         		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;925         		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;926         		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;927         		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;928    	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;929    			inv[i]._cnt=0;    
;;;930         		} 
;;;931    		else 
;;;932         		{
;;;933         		inv[i]._Uio=0; 
;;;934         		inv[i]._Ii=0;
;;;935         		inv[i]._Uin=0;
;;;936         		inv[i]._Ti=0;
;;;937         		inv[i]._flags_tm=0; 
;;;938    //	     	inv[i]._rotor0;
;;;939    			inv[i]._cnt=25;    
;;;940         		}
;;;941         	}
;;;942       	}
;;;943    #endif
;;;944    
;;;945    
;;;946    
;;;947    #ifdef UKU_TELECORE2015
;;;948    //вычисление параметров работы батареи
;;;949    //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;950    li_bat._batStat=bsOK;
;;;951    if(BAT_TYPE==1) //COSLIGHT
;;;952    	{
;;;953    	if(li_bat._batStat==bsOK)
;;;954    		{
;;;955    		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;956    
;;;957    		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;958    		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;959    	
;;;960    		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;961    		li_bat._soc=lakb[0]._s_o_c;
;;;962    		li_bat._soh=lakb[0]._s_o_h;
;;;963    		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;964    		li_bat._Tb=lakb[0]._max_cell_temp;
;;;965    		li_bat._rbt=lakb[0]._r_b_t;
;;;966    		}
;;;967    	else 
;;;968    		{
;;;969    		li_bat._Ub=bat[0]._Ub;
;;;970    		li_bat._Ib=bat[0]._Ib/10;
;;;971    		li_bat._Tb=bat[0]._Tb;
;;;972    		}
;;;973    
;;;974    	if((li_bat._485Error)||(li_bat._canError))
;;;975    		{
;;;976    		li_bat._batStat=bsOFF;
;;;977    		}
;;;978    	else li_bat._batStat=bsOK;
;;;979    	}
;;;980    else if(BAT_TYPE==2) //SACRED SUN
;;;981    	{
;;;982    	}
;;;983    else if(BAT_TYPE==3) //ZTT
;;;984    	{
;;;985    	if(li_bat._batStat==bsOK)
;;;986    		{
;;;987    
;;;988    		}
;;;989    	}
;;;990    #endif
;;;991    
;;;992    
;;;993    /*
;;;994    if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;995    	{
;;;996    
;;;997    
;;;998    	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;999    	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;1000   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;1001   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;1002   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;1003   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;1004   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;1005   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;1006   
;;;1007   	tempSS=0;
;;;1008   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;1009   
;;;1010   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;1011   
;;;1012   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;1013   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;1014   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;1015   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;1016   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;1017   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;1018   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;1019   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;1020   
;;;1021   	tempSS=0;
;;;1022   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;1023   
;;;1024   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;1025   
;;;1026   
;;;1027   	}*/
;;;1028   
;;;1029   
;;;1030   
;;;1031   }
00028c  bdf0              POP      {r4-r7,pc}
;;;1032   
                          ENDP

                  adc_init PROC
;;;1035   //-----------------------------------------------
;;;1036   void adc_init(void)
00028e  487f              LDR      r0,|L3.1164|
;;;1037   {
;;;1038   
;;;1039   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
000290  6841              LDR      r1,[r0,#4]
000292  f4212140          BIC      r1,r1,#0xc0000
000296  f4412180          ORR      r1,r1,#0x40000
00029a  6041              STR      r1,[r0,#4]
;;;1040   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
00029c  6841              LDR      r1,[r0,#4]
00029e  f4213140          BIC      r1,r1,#0x30000
0002a2  f4413180          ORR      r1,r1,#0x10000
0002a6  6041              STR      r1,[r0,#4]
;;;1041   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
0002a8  6841              LDR      r1,[r0,#4]
0002aa  f4214140          BIC      r1,r1,#0xc000
0002ae  f4414180          ORR      r1,r1,#0x4000
0002b2  6041              STR      r1,[r0,#4]
;;;1042   
;;;1043   
;;;1044   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
0002b4  6c41              LDR      r1,[r0,#0x44]
0002b6  f4212140          BIC      r1,r1,#0xc0000
0002ba  f4412100          ORR      r1,r1,#0x80000
0002be  6441              STR      r1,[r0,#0x44]
;;;1045   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
0002c0  6c41              LDR      r1,[r0,#0x44]
0002c2  f4213140          BIC      r1,r1,#0x30000
0002c6  f4413100          ORR      r1,r1,#0x20000
0002ca  6441              STR      r1,[r0,#0x44]
;;;1046   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
0002cc  6c41              LDR      r1,[r0,#0x44]
0002ce  f4214140          BIC      r1,r1,#0xc000
0002d2  f4414100          ORR      r1,r1,#0x8000
0002d6  6441              STR      r1,[r0,#0x44]
;;;1047   
;;;1048   SET_REG(LPC_ADC->ADCR,0,24,3);
0002d8  486d              LDR      r0,|L3.1168|
0002da  6801              LDR      r1,[r0,#0]
0002dc  f02161e0          BIC      r1,r1,#0x7000000
0002e0  6001              STR      r1,[r0,#0]
;;;1049   
;;;1050   SET_REG(LPC_ADC->ADCR,1,21,1);
0002e2  6801              LDR      r1,[r0,#0]
0002e4  f4411100          ORR      r1,r1,#0x200000
0002e8  6001              STR      r1,[r0,#0]
;;;1051   SET_REG(LPC_ADC->ADCR,0,16,1);
0002ea  6801              LDR      r1,[r0,#0]
0002ec  f4213180          BIC      r1,r1,#0x10000
0002f0  6001              STR      r1,[r0,#0]
;;;1052   SET_REG(LPC_ADC->ADCR,1,8,8);
0002f2  6801              LDR      r1,[r0,#0]
0002f4  f421417f          BIC      r1,r1,#0xff00
0002f8  f4417180          ORR      r1,r1,#0x100
0002fc  6001              STR      r1,[r0,#0]
;;;1053   
;;;1054   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;1055   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;1056   	
;;;1057   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;1058        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;1059        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;1060   
;;;1061   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
0002fe  f44f7180          MOV      r1,#0x100
000302  60c1              STR      r1,[r0,#0xc]
000304  4863              LDR      r0,|L3.1172|
000306  f44f0180          MOV      r1,#0x400000
00030a  6001              STR      r1,[r0,#0]
;;;1062   
;;;1063   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;1064   
;;;1065   
;;;1066   }
00030c  4770              BX       lr
;;;1067   
                          ENDP

                  adc_drv7 PROC
;;;1068   //-----------------------------------------------
;;;1069   void adc_drv7(void) //(Uсети - постоянка)
00030e  e92d41f0          PUSH     {r4-r8,lr}
;;;1070   {
;;;1071   //int temp_S;
;;;1072   //char i;
;;;1073   //signed short temp_SS;
;;;1074   
;;;1075   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
000312  4c3b              LDR      r4,|L3.1024|
000314  3414              ADDS     r4,r4,#0x14
000316  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000318  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00031a  1a40              SUBS     r0,r0,r1
00031c  b200              SXTH     r0,r0
00031e  f7fffffe          BL       abs_pal
000322  1da6              ADDS     r6,r4,#6
000324  8030              STRH     r0,[r6,#0]
;;;1076   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
000326  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000328  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00032a  1a40              SUBS     r0,r0,r1
00032c  b200              SXTH     r0,r0
00032e  f7fffffe          BL       abs_pal
000332  8070              STRH     r0,[r6,#2]
;;;1077   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
000334  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000336  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
000338  1a40              SUBS     r0,r0,r1
00033a  b200              SXTH     r0,r0
00033c  f7fffffe          BL       abs_pal
000340  80b0              STRH     r0,[r6,#4]
;;;1078   
;;;1079   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;1080   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;1081   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;1082   
;;;1083   
;;;1084   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
000342  f44f7196          MOV      r1,#0x12c
;;;1085   	{
;;;1086   	adc_result=adc_self_ch_buff[2];
000346  4d2e              LDR      r5,|L3.1024|
000348  4288              CMP      r0,r1                 ;1084
00034a  da02              BGE      |L3.850|
00034c  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
00034e  8128              STRH     r0,[r5,#8]
000350  e00c              B        |L3.876|
                  |L3.850|
;;;1087   	} 
;;;1088   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
000352  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
000356  4288              CMP      r0,r1
000358  da02              BGE      |L3.864|
;;;1089   	{
;;;1090   	adc_result=adc_self_ch_buff[1];
00035a  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
00035c  8128              STRH     r0,[r5,#8]
00035e  e005              B        |L3.876|
                  |L3.864|
;;;1091   	}
;;;1092   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
000360  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
000364  4288              CMP      r0,r1
000366  da01              BGE      |L3.876|
;;;1093   	{
;;;1094   	adc_result=adc_self_ch_buff[0];
000368  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
00036a  8128              STRH     r0,[r5,#8]
                  |L3.876|
;;;1095   	}
;;;1096       //adc_result=92;
;;;1097   
;;;1098   if(adc_ch_net)
00036c  78af              LDRB     r7,[r5,#2]  ; adc_ch_net
00036e  2600              MOVS     r6,#0
000370  b337              CBZ      r7,|L3.960|
;;;1099   	{
;;;1100   
;;;1101   	main_power_buffer[0]+=(long)(adc_result);
000372  4827              LDR      r0,|L3.1040|
000374  f9b51008          LDRSH    r1,[r5,#8]  ; adc_result
000378  3020              ADDS     r0,r0,#0x20
00037a  6802              LDR      r2,[r0,#0]  ; main_power_buffer
00037c  440a              ADD      r2,r2,r1
00037e  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;1102   	main_power_buffer[1]+=(long)(adc_result);
000380  6842              LDR      r2,[r0,#4]  ; main_power_buffer
000382  440a              ADD      r2,r2,r1
000384  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;1103   	main_power_buffer[2]+=(long)(adc_result);
000386  6882              LDR      r2,[r0,#8]  ; main_power_buffer
000388  440a              ADD      r2,r2,r1
00038a  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;1104   	main_power_buffer[3]+=(long)(adc_result);
00038c  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
00038e  4411              ADD      r1,r1,r2
000390  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;1105   
;;;1106   	adc_net_buff_cnt++;
000392  8a29              LDRH     r1,[r5,#0x10]  ; adc_net_buff_cnt
000394  f1010101          ADD      r1,r1,#1
000398  b209              SXTH     r1,r1
00039a  8229              STRH     r1,[r5,#0x10]
;;;1107   	if(adc_net_buff_cnt>=0x1000)
00039c  f5b15f80          CMP      r1,#0x1000
0003a0  db00              BLT      |L3.932|
;;;1108   		{
;;;1109   		adc_net_buff_cnt=0;
0003a2  822e              STRH     r6,[r5,#0x10]
                  |L3.932|
;;;1110   		}
;;;1111   	if((adc_net_buff_cnt&0x03ff)==0)
0003a4  f9b51010          LDRSH    r1,[r5,#0x10]  ; adc_net_buff_cnt
0003a8  058a              LSLS     r2,r1,#22
0003aa  d17e              BNE      |L3.1194|
;;;1112   		{
;;;1113   		#ifdef UKU_220
;;;1114   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;1115   		#else
;;;1116   		#ifdef UKU_220_V2
;;;1117   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;1118   		#else
;;;1119   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
0003ac  ea4f21a1          ASR      r1,r1,#10
0003b0  f8502021          LDR      r2,[r0,r1,LSL #2]
0003b4  ea4f2222          ASR      r2,r2,#8
0003b8  80ea              STRH     r2,[r5,#6]
;;;1120   		#endif
;;;1121   		#endif
;;;1122   		main_power_buffer[adc_net_buff_cnt>>10]=0;
0003ba  f8406021          STR      r6,[r0,r1,LSL #2]
0003be  e074              B        |L3.1194|
                  |L3.960|
;;;1123   		}
;;;1124   
;;;1125   
;;;1126   	} 
;;;1127   else if(!adc_ch_net)
;;;1128   	{
;;;1129   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
0003c0  4835              LDR      r0,|L3.1176|
0003c2  78ec              LDRB     r4,[r5,#3]  ; adc_ch
0003c4  792a              LDRB     r2,[r5,#4]  ; adc_ch_cnt
0003c6  eb001384          ADD      r3,r0,r4,LSL #6
0003ca  f9b51008          LDRSH    r1,[r5,#8]  ; adc_result
0003ce  f8431022          STR      r1,[r3,r2,LSL #2]
;;;1130   	
;;;1131   	if((adc_ch_cnt&0x03)==0)
0003d2  0790              LSLS     r0,r2,#30
0003d4  d10d              BNE      |L3.1010|
;;;1132   		{
;;;1133   		long temp_L;
;;;1134   		char i;
;;;1135   		temp_L=0;
0003d6  4601              MOV      r1,r0
                  |L3.984|
;;;1136   		for(i=0;i<16;i++)
;;;1137   			{
;;;1138   			temp_L+=adc_buff[adc_ch][i];
0003d8  f853c020          LDR      r12,[r3,r0,LSL #2]
0003dc  4461              ADD      r1,r1,r12
0003de  f1000001          ADD      r0,r0,#1              ;1136
0003e2  b2c0              UXTB     r0,r0                 ;1136
0003e4  2810              CMP      r0,#0x10              ;1136
0003e6  d3f7              BCC      |L3.984|
;;;1139   			}
;;;1140   		adc_buff_[adc_ch]= (short)(temp_L>>4);
0003e8  ea4f1021          ASR      r0,r1,#4
0003ec  4908              LDR      r1,|L3.1040|
0003ee  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L3.1010|
;;;1141   
;;;1142   		//adc_buff_[3]=346;
;;;1143   		}
;;;1144   	if(++adc_ch>=16) 
0003f2  1c64              ADDS     r4,r4,#1
0003f4  b2e0              UXTB     r0,r4
0003f6  70e8              STRB     r0,[r5,#3]
0003f8  2810              CMP      r0,#0x10
0003fa  d356              BCC      |L3.1194|
;;;1145   		{
;;;1146   		adc_ch=0;
0003fc  70ee              STRB     r6,[r5,#3]
;;;1147   		adc_ch_cnt++;
0003fe  e04d              B        |L3.1180|
                  |L3.1024|
                          DCD      ||area_number.34||
                  |L3.1028|
                          DCD      Kibat0
                  |L3.1032|
                          DCD      ad7705_buff_
                  |L3.1036|
                          DCD      ADR_KI0BAT
                  |L3.1040|
                          DCD      ||.bss||+0x400
                  |L3.1044|
                          DCD      Kuload
                  |L3.1048|
                          DCD      load_U
                  |L3.1052|
                          DCD      Kuout
                  |L3.1056|
                          DCD      out_U
                  |L3.1060|
                          DCD      Kuvd
                  |L3.1064|
                          DCD      vd_U
                  |L3.1068|
                          DCD      in_U
                  |L3.1072|
                          DCD      Kubps
                  |L3.1076|
                          DCD      AUSW_MAIN
                  |L3.1080|
                          DCD      bps_U
                  |L3.1084|
                          DCD      ND_EXT
                  |L3.1088|
                          DCD      Ktext
                  |L3.1092|
                          DCD      t_ext
                  |L3.1096|
                          DCD      sys_T
                  |L3.1100|
                          DCD      adc_buff_ext_
                  |L3.1104|
                          DCD      Kunet_ext
                  |L3.1108|
                          DCD      Uvv
                  |L3.1112|
                          DCD      Uvv0
                  |L3.1116|
                          DCD      net_U
                  |L3.1120|
                          DCD      eb2_data_short
                  |L3.1124|
                          DCD      Kvv_eb2
                  |L3.1128|
                          DCD      Uvv_eb2
                  |L3.1132|
                          DCD      Kpes_eb2
                  |L3.1136|
                          DCD      Upes_eb2
                  |L3.1140|
                          DCD      ibt
                  |L3.1144|
                          DCD      t_box
                  |L3.1148|
                          DCD      t_ext_can_nd
                  |L3.1152|
                          DCD      t_ext_can
                  |L3.1156|
                          DCD      load_I
                  |L3.1160|
                          DCD      Isumm
                  |L3.1164|
                          DCD      0x4002c000
                  |L3.1168|
                          DCD      0x40034000
                  |L3.1172|
                          DCD      0xe000e100
                  |L3.1176|
                          DCD      ||.bss||
                  |L3.1180|
00049c  f1020201          ADD      r2,r2,#1
0004a0  b2d0              UXTB     r0,r2
0004a2  7128              STRB     r0,[r5,#4]
;;;1148   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
0004a4  2810              CMP      r0,#0x10
0004a6  d300              BCC      |L3.1194|
0004a8  712e              STRB     r6,[r5,#4]
                  |L3.1194|
;;;1149   		}
;;;1150   	}
;;;1151   
;;;1152   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;1153   
;;;1154   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;1155   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;1156   /*
;;;1157   	{
;;;1158   	if((adc_cnt1&0x03)==0)
;;;1159   		{
;;;1160   		temp_S=0;
;;;1161   		for(i=0;i<16;i++)
;;;1162   			{
;;;1163   			temp_S+=adc_buff[adc_ch][i];
;;;1164   			} 
;;;1165            	adc_buff_[adc_ch]=temp_S>>4;
;;;1166             }
;;;1167   	}*/
;;;1168   
;;;1169   
;;;1170   		  
;;;1171   
;;;1172   adc_self_ch_cnt=0;
0004aa  706e              STRB     r6,[r5,#1]
;;;1173   
;;;1174   adc_ch_net++;
0004ac  f1070701          ADD      r7,r7,#1
;;;1175   adc_ch_net&=1;
0004b0  f0070001          AND      r0,r7,#1
0004b4  70a8              STRB     r0,[r5,#2]
;;;1176   
;;;1177   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;1178   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;1179   
;;;1180   if(adc_ch_net)
;;;1181   	{
;;;1182   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;1183   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;1184   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
0004b6  4a30              LDR      r2,|L3.1400|
0004b8  b130              CBZ      r0,|L3.1224|
0004ba  6810              LDR      r0,[r2,#0]
0004bc  f02000ff          BIC      r0,r0,#0xff
0004c0  f1000004          ADD      r0,r0,#4
0004c4  6010              STR      r0,[r2,#0]
0004c6  e03d              B        |L3.1348|
                  |L3.1224|
;;;1185   	}
;;;1186   else
;;;1187   	{
;;;1188   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;1189   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;1190   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
0004c8  78e9              LDRB     r1,[r5,#3]  ; adc_ch
0004ca  0708              LSLS     r0,r1,#28
0004cc  d406              BMI      |L3.1244|
0004ce  6810              LDR      r0,[r2,#0]
0004d0  f02000ff          BIC      r0,r0,#0xff
0004d4  f1000001          ADD      r0,r0,#1
0004d8  6010              STR      r0,[r2,#0]
0004da  e005              B        |L3.1256|
                  |L3.1244|
;;;1191   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
0004dc  6810              LDR      r0,[r2,#0]
0004de  f02000ff          BIC      r0,r0,#0xff
0004e2  f1000002          ADD      r0,r0,#2
0004e6  6010              STR      r0,[r2,#0]
                  |L3.1256|
;;;1192   
;;;1193   
;;;1194   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
0004e8  4824              LDR      r0,|L3.1404|
0004ea  6803              LDR      r3,[r0,#0]
0004ec  f0435380          ORR      r3,r3,#0x10000000
0004f0  6003              STR      r3,[r0,#0]
;;;1195   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
0004f2  6a03              LDR      r3,[r0,#0x20]
0004f4  f0434380          ORR      r3,r3,#0x40000000
0004f8  6203              STR      r3,[r0,#0x20]
;;;1196   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
0004fa  6e03              LDR      r3,[r0,#0x60]
0004fc  f0436380          ORR      r3,r3,#0x4000000
000500  6603              STR      r3,[r0,#0x60]
;;;1197   
;;;1198   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
000502  07cb              LSLS     r3,r1,#31
000504  d00a              BEQ      |L3.1308|
;;;1199   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
000506  6943              LDR      r3,[r0,#0x14]
000508  f0435380          ORR      r3,r3,#0x10000000
00050c  6143              STR      r3,[r0,#0x14]
                  |L3.1294|
;;;1200   
;;;1201   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
00050e  078b              LSLS     r3,r1,#30
000510  d409              BMI      |L3.1318|
000512  6b43              LDR      r3,[r0,#0x34]
000514  f0234380          BIC      r3,r3,#0x40000000
000518  6343              STR      r3,[r0,#0x34]
00051a  e008              B        |L3.1326|
                  |L3.1308|
00051c  6943              LDR      r3,[r0,#0x14]         ;1198
00051e  f0235380          BIC      r3,r3,#0x10000000     ;1198
000522  6143              STR      r3,[r0,#0x14]         ;1198
000524  e7f3              B        |L3.1294|
                  |L3.1318|
;;;1202   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
000526  6b43              LDR      r3,[r0,#0x34]
000528  f0434380          ORR      r3,r3,#0x40000000
00052c  6343              STR      r3,[r0,#0x34]
                  |L3.1326|
;;;1203   
;;;1204   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
00052e  0749              LSLS     r1,r1,#29
000530  d404              BMI      |L3.1340|
000532  6f41              LDR      r1,[r0,#0x74]
000534  f0216180          BIC      r1,r1,#0x4000000
000538  6741              STR      r1,[r0,#0x74]
00053a  e003              B        |L3.1348|
                  |L3.1340|
;;;1205   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
00053c  6f41              LDR      r1,[r0,#0x74]
00053e  f0416180          ORR      r1,r1,#0x4000000
000542  6741              STR      r1,[r0,#0x74]
                  |L3.1348|
;;;1206   	}
;;;1207   	
;;;1208   
;;;1209   
;;;1210   
;;;1211   LPC_ADC->ADCR |=  (1<<24);
000544  6810              LDR      r0,[r2,#0]
000546  f0407080          ORR      r0,r0,#0x1000000
00054a  6010              STR      r0,[r2,#0]
;;;1212   
;;;1213   }
00054c  e8bd81f0          POP      {r4-r8,pc}
;;;1214   
                          ENDP

                  rele_drv PROC
;;;1470   //*************-----------------------------------------------
;;;1471   void rele_drv(void)
000550  480a              LDR      r0,|L3.1404|
;;;1472   {
;;;1473   LPC_GPIO0->FIODIR|=(1UL<<8);
000552  6801              LDR      r1,[r0,#0]
000554  f4417180          ORR      r1,r1,#0x100
000558  6001              STR      r1,[r0,#0]
;;;1474   
;;;1475   if(rele_stat)
00055a  4909              LDR      r1,|L3.1408|
00055c  7809              LDRB     r1,[r1,#0]  ; rele_stat
00055e  b121              CBZ      r1,|L3.1386|
;;;1476   	{
;;;1477   	LPC_GPIO0->FIOPIN|=(1UL<<8);
000560  6941              LDR      r1,[r0,#0x14]
000562  f4417180          ORR      r1,r1,#0x100
000566  6141              STR      r1,[r0,#0x14]
;;;1478   	}
;;;1479   else 
;;;1480   	{
;;;1481   	LPC_GPIO0->FIOPIN&=~(1UL<<8);
;;;1482   	}
;;;1483   }
000568  4770              BX       lr
                  |L3.1386|
00056a  6941              LDR      r1,[r0,#0x14]         ;1481
00056c  f4217180          BIC      r1,r1,#0x100          ;1481
000570  6141              STR      r1,[r0,#0x14]         ;1481
000572  4770              BX       lr
;;;1484   
                          ENDP

                  numOfForvardBps_init PROC
;;;2100   //-----------------------------------------------
;;;2101   void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
000574  4770              BX       lr
;;;2102   {									//Должна вызываться при изменении кол-ва источников в структуре
;;;2103   
;;;2104   }
;;;2105   
                          ENDP

000576  0000              DCW      0x0000
                  |L3.1400|
                          DCD      0x40034000
                  |L3.1404|
                          DCD      0x2009c000
                  |L3.1408|
                          DCD      ||area_number.34||

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  ubat_old_drv PROC
;;;2107   //-----------------------------------------------
;;;2108   void vent_resurs_hndl(void)
000000  4770              BX       lr
;;;2109   {
;;;2110   
;;;2111   }
;;;2112   
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  adc_drv6 PROC
;;;2107   //-----------------------------------------------
;;;2108   void vent_resurs_hndl(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2109   {
;;;2110   
;;;2111   }
000004  4c80              LDR      r4,|L5.520|
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1
00000c  b200              SXTH     r0,r0
00000e  f7fffffe          BL       abs_pal
000012  1da5              ADDS     r5,r4,#6
000014  8028              STRH     r0,[r5,#0]
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]
000032  f44f7196          MOV      r1,#0x12c
000036  f1a40614          SUB      r6,r4,#0x14
00003a  4288              CMP      r0,r1
00003c  da02              BGE      |L5.68|
00003e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000040  8130              STRH     r0,[r6,#8]
000042  e00c              B        |L5.94|
                  |L5.68|
000044  f9b50002          LDRSH    r0,[r5,#2]  ; adc_self_ch_disp
000048  4288              CMP      r0,r1
00004a  da02              BGE      |L5.82|
00004c  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
00004e  8130              STRH     r0,[r6,#8]
000050  e005              B        |L5.94|
                  |L5.82|
000052  f9b50000          LDRSH    r0,[r5,#0]  ; adc_self_ch_disp
000056  4288              CMP      r0,r1
000058  da01              BGE      |L5.94|
00005a  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
00005c  8130              STRH     r0,[r6,#8]
                  |L5.94|
00005e  78b7              LDRB     r7,[r6,#2]  ; adc_ch_net
000060  2200              MOVS     r2,#0
000062  b3f7              CBZ      r7,|L5.226|
000064  7973              LDRB     r3,[r6,#5]  ; adc_window_flag
000066  4869              LDR      r0,|L5.524|
000068  b18b              CBZ      r3,|L5.142|
00006a  f9b61008          LDRSH    r1,[r6,#8]  ; adc_result
00006e  6804              LDR      r4,[r0,#0]  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2
000074  6004              STR      r4,[r0,#0]  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2
00007c  6044              STR      r4,[r0,#4]  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2
000084  6084              STR      r4,[r0,#8]  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]  ; main_power_buffer
000088  eb0401a1          ADD      r1,r4,r1,ASR #2
00008c  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
                  |L5.142|
00008e  f9b61008          LDRSH    r1,[r6,#8]  ; adc_result
000092  2964              CMP      r1,#0x64
000094  da04              BGE      |L5.160|
000096  89b1              LDRH     r1,[r6,#0xc]  ; adc_zero_cnt
000098  f1010101          ADD      r1,r1,#1
00009c  81b1              STRH     r1,[r6,#0xc]
00009e  e000              B        |L5.162|
                  |L5.160|
0000a0  81b2              STRH     r2,[r6,#0xc]
                  |L5.162|
0000a2  f9b6400c          LDRSH    r4,[r6,#0xc]  ; adc_zero_cnt
0000a6  f44f61fa          MOV      r1,#0x7d0
0000aa  428c              CMP      r4,r1
0000ac  db05              BLT      |L5.186|
0000ae  81b1              STRH     r1,[r6,#0xc]
0000b0  6002              STR      r2,[r0,#0]  ; main_power_buffer
0000b2  6042              STR      r2,[r0,#4]  ; main_power_buffer
0000b4  6082              STR      r2,[r0,#8]  ; main_power_buffer
0000b6  60c2              STR      r2,[r0,#0xc]  ; main_power_buffer
0000b8  80f2              STRH     r2,[r6,#6]
                  |L5.186|
0000ba  89b1              LDRH     r1,[r6,#0xc]  ; adc_zero_cnt
0000bc  2905              CMP      r1,#5
0000be  d14f              BNE      |L5.352|
0000c0  b1bb              CBZ      r3,|L5.242|
0000c2  8971              LDRH     r1,[r6,#0xa]  ; adc_gorb_cnt
0000c4  f1010101          ADD      r1,r1,#1
0000c8  b209              SXTH     r1,r1
0000ca  8171              STRH     r1,[r6,#0xa]
0000cc  f5b17f00          CMP      r1,#0x200
0000d0  db00              BLT      |L5.212|
0000d2  8172              STRH     r2,[r6,#0xa]
                  |L5.212|
0000d4  f9b6100a          LDRSH    r1,[r6,#0xa]  ; adc_gorb_cnt
0000d8  064c              LSLS     r4,r1,#25
0000da  d10a              BNE      |L5.242|
0000dc  ea4f11e1          ASR      r1,r1,#7
0000e0  e000              B        |L5.228|
                  |L5.226|
0000e2  e015              B        |L5.272|
                  |L5.228|
0000e4  f8504021          LDR      r4,[r0,r1,LSL #2]
0000e8  ea4f2424          ASR      r4,r4,#8
0000ec  80f4              STRH     r4,[r6,#6]
0000ee  f8402021          STR      r2,[r0,r1,LSL #2]
                  |L5.242|
0000f2  f9b6000e          LDRSH    r0,[r6,#0xe]  ; adc_window_cnt
0000f6  2896              CMP      r0,#0x96
0000f8  dd01              BLE      |L5.254|
0000fa  b103              CBZ      r3,|L5.254|
0000fc  7172              STRB     r2,[r6,#5]
                  |L5.254|
0000fe  381f              SUBS     r0,r0,#0x1f
000100  2827              CMP      r0,#0x27
000102  d22d              BCS      |L5.352|
000104  7970              LDRB     r0,[r6,#5]  ; adc_window_flag
000106  bb58              CBNZ     r0,|L5.352|
000108  f04f0001          MOV      r0,#1
00010c  7170              STRB     r0,[r6,#5]
00010e  e027              B        |L5.352|
                  |L5.272|
000110  483f              LDR      r0,|L5.528|
000112  78f5              LDRB     r5,[r6,#3]  ; adc_ch
000114  7933              LDRB     r3,[r6,#4]  ; adc_ch_cnt
000116  eb001485          ADD      r4,r0,r5,LSL #6
00011a  f9b61008          LDRSH    r1,[r6,#8]  ; adc_result
00011e  f8441023          STR      r1,[r4,r3,LSL #2]
000122  0798              LSLS     r0,r3,#30
000124  d10f              BNE      |L5.326|
000126  4601              MOV      r1,r0
                  |L5.296|
000128  f854c020          LDR      r12,[r4,r0,LSL #2]
00012c  4461              ADD      r1,r1,r12
00012e  f1000001          ADD      r0,r0,#1
000132  b2c0              UXTB     r0,r0
000134  2810              CMP      r0,#0x10
000136  d3f7              BCC      |L5.296|
000138  ea4f1021          ASR      r0,r1,#4
00013c  4933              LDR      r1,|L5.524|
00013e  f1a10120          SUB      r1,r1,#0x20
000142  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L5.326|
000146  1c6d              ADDS     r5,r5,#1
000148  b2e8              UXTB     r0,r5
00014a  70f0              STRB     r0,[r6,#3]
00014c  2810              CMP      r0,#0x10
00014e  d307              BCC      |L5.352|
000150  70f2              STRB     r2,[r6,#3]
000152  f1030301          ADD      r3,r3,#1
000156  b2d8              UXTB     r0,r3
000158  7130              STRB     r0,[r6,#4]
00015a  2810              CMP      r0,#0x10
00015c  d300              BCC      |L5.352|
00015e  7132              STRB     r2,[r6,#4]
                  |L5.352|
000160  7072              STRB     r2,[r6,#1]
000162  f1070701          ADD      r7,r7,#1
000166  f0070001          AND      r0,r7,#1
00016a  70b0              STRB     r0,[r6,#2]
00016c  4a29              LDR      r2,|L5.532|
00016e  b130              CBZ      r0,|L5.382|
000170  6810              LDR      r0,[r2,#0]
000172  f02000ff          BIC      r0,r0,#0xff
000176  f1000004          ADD      r0,r0,#4
00017a  6010              STR      r0,[r2,#0]
00017c  e03d              B        |L5.506|
                  |L5.382|
00017e  78f1              LDRB     r1,[r6,#3]  ; adc_ch
000180  0708              LSLS     r0,r1,#28
000182  d406              BMI      |L5.402|
000184  6810              LDR      r0,[r2,#0]
000186  f02000ff          BIC      r0,r0,#0xff
00018a  f1000001          ADD      r0,r0,#1
00018e  6010              STR      r0,[r2,#0]
000190  e005              B        |L5.414|
                  |L5.402|
000192  6810              LDR      r0,[r2,#0]
000194  f02000ff          BIC      r0,r0,#0xff
000198  f1000002          ADD      r0,r0,#2
00019c  6010              STR      r0,[r2,#0]
                  |L5.414|
00019e  481e              LDR      r0,|L5.536|
0001a0  6803              LDR      r3,[r0,#0]
0001a2  f0435380          ORR      r3,r3,#0x10000000
0001a6  6003              STR      r3,[r0,#0]
0001a8  6a03              LDR      r3,[r0,#0x20]
0001aa  f0434380          ORR      r3,r3,#0x40000000
0001ae  6203              STR      r3,[r0,#0x20]
0001b0  6e03              LDR      r3,[r0,#0x60]
0001b2  f0436380          ORR      r3,r3,#0x4000000
0001b6  6603              STR      r3,[r0,#0x60]
0001b8  07cb              LSLS     r3,r1,#31
0001ba  d00a              BEQ      |L5.466|
0001bc  6943              LDR      r3,[r0,#0x14]
0001be  f0435380          ORR      r3,r3,#0x10000000
0001c2  6143              STR      r3,[r0,#0x14]
                  |L5.452|
0001c4  078b              LSLS     r3,r1,#30
0001c6  d409              BMI      |L5.476|
0001c8  6b43              LDR      r3,[r0,#0x34]
0001ca  f0234380          BIC      r3,r3,#0x40000000
0001ce  6343              STR      r3,[r0,#0x34]
0001d0  e008              B        |L5.484|
                  |L5.466|
0001d2  6943              LDR      r3,[r0,#0x14]
0001d4  f0235380          BIC      r3,r3,#0x10000000
0001d8  6143              STR      r3,[r0,#0x14]
0001da  e7f3              B        |L5.452|
                  |L5.476|
0001dc  6b43              LDR      r3,[r0,#0x34]
0001de  f0434380          ORR      r3,r3,#0x40000000
0001e2  6343              STR      r3,[r0,#0x34]
                  |L5.484|
0001e4  0749              LSLS     r1,r1,#29
0001e6  d404              BMI      |L5.498|
0001e8  6f41              LDR      r1,[r0,#0x74]
0001ea  f0216180          BIC      r1,r1,#0x4000000
0001ee  6741              STR      r1,[r0,#0x74]
0001f0  e003              B        |L5.506|
                  |L5.498|
0001f2  6f41              LDR      r1,[r0,#0x74]
0001f4  f0416180          ORR      r1,r1,#0x4000000
0001f8  6741              STR      r1,[r0,#0x74]
                  |L5.506|
0001fa  6810              LDR      r0,[r2,#0]
0001fc  f0407080          ORR      r0,r0,#0x1000000
000200  6010              STR      r0,[r2,#0]
000202  e8bd81f0          POP      {r4-r8,pc}
;;;2112   
                          ENDP

000206  0000              DCW      0x0000
                  |L5.520|
                          DCD      ||area_number.34||+0x14
                  |L5.524|
                          DCD      ||.bss||+0x420
                  |L5.528|
                          DCD      ||.bss||
                  |L5.532|
                          DCD      0x40034000
                  |L5.536|
                          DCD      0x2009c000

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.6||, ||.text||
                  bps_hndl PROC
;;;2107   //-----------------------------------------------
;;;2108   void vent_resurs_hndl(void)
000000  4770              BX       lr
;;;2109   {
;;;2110   
;;;2111   }
;;;2112   
                          ENDP


                          AREA ||area_number.7||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.7||, ||.text||
                  inv_drv PROC
;;;2107   //-----------------------------------------------
;;;2108   void vent_resurs_hndl(void)
000000  4770              BX       lr
;;;2109   {
;;;2110   
;;;2111   }
;;;2112   
                          ENDP


                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  ipsBlckHndl PROC
;;;2107   //-----------------------------------------------
;;;2108   void vent_resurs_hndl(void)
000000  b510              PUSH     {r4,lr}
;;;2109   {
;;;2110   
;;;2111   }
000002  4b15              LDR      r3,|L8.88|
000004  f04f0000          MOV      r0,#0
000008  8018              STRH     r0,[r3,#0]
00000a  4814              LDR      r0,|L8.92|
00000c  f04f0401          MOV      r4,#1
000010  f44f62fa          MOV      r2,#0x7d0
000014  f9b01000          LDRSH    r1,[r0,#0]  ; ipsBlckSrc
000018  4811              LDR      r0,|L8.96|
00001a  2901              CMP      r1,#1
00001c  f9b00000          LDRSH    r0,[r0,#0]
000020  d006              BEQ      |L8.48|
000022  2902              CMP      r1,#2
000024  d10f              BNE      |L8.70|
000026  490f              LDR      r1,|L8.100|
000028  f9b1101a          LDRSH    r1,[r1,#0x1a]
00002c  b160              CBZ      r0,|L8.72|
00002e  e00d              B        |L8.76|
                  |L8.48|
000030  490c              LDR      r1,|L8.100|
000032  f9b11016          LDRSH    r1,[r1,#0x16]
000036  b908              CBNZ     r0,|L8.60|
000038  4291              CMP      r1,r2
00003a  dc03              BGT      |L8.68|
                  |L8.60|
00003c  2801              CMP      r0,#1
00003e  d102              BNE      |L8.70|
000040  4291              CMP      r1,r2
000042  da00              BGE      |L8.70|
                  |L8.68|
000044  801c              STRH     r4,[r3,#0]
                  |L8.70|
000046  bd10              POP      {r4,pc}
                  |L8.72|
000048  4291              CMP      r1,r2
00004a  dc03              BGT      |L8.84|
                  |L8.76|
00004c  2801              CMP      r0,#1
00004e  d1fa              BNE      |L8.70|
000050  4291              CMP      r1,r2
000052  daf8              BGE      |L8.70|
                  |L8.84|
000054  801c              STRH     r4,[r3,#0]
000056  bd10              POP      {r4,pc}
;;;2112   
                          ENDP

                  |L8.88|
                          DCD      ipsBlckStat
                  |L8.92|
                          DCD      ipsBlckSrc
                  |L8.96|
                          DCD      ipsBlckLog
                  |L8.100|
                          DCD      ||.bss||+0x400

                          AREA ||area_number.9||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.9||, ||.text||
                  bat_hndl PROC
;;;2107   //-----------------------------------------------
;;;2108   void vent_resurs_hndl(void)
000000  4770              BX       lr
;;;2109   {
;;;2110   
;;;2111   }
;;;2112   
                          ENDP


                          AREA ||area_number.10||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.text||
                  klimat_hndl PROC
;;;2107   //-----------------------------------------------
;;;2108   void vent_resurs_hndl(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2109   {
;;;2110   
;;;2111   }
000004  4d66              LDR      r5,|L10.416|
000006  4867              LDR      r0,|L10.420|
000008  4c67              LDR      r4,|L10.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
00000e  f9b02000          LDRSH    r2,[r0,#0]  ; TBOXMAX
000012  f9b40000          LDRSH    r0,[r4,#0]
000016  4291              CMP      r1,r2
000018  dd03              BLE      |L10.34|
00001a  f1000001          ADD      r0,r0,#1
00001e  8020              STRH     r0,[r4,#0]
000020  e003              B        |L10.42|
                  |L10.34|
000022  da02              BGE      |L10.42|
000024  f1a00001          SUB      r0,r0,#1
000028  8020              STRH     r0,[r4,#0]
                  |L10.42|
00002a  2206              MOVS     r2,#6
00002c  2100              MOVS     r1,#0
00002e  485e              LDR      r0,|L10.424|
000030  f7fffffe          BL       gran
000034  f9b40000          LDRSH    r0,[r4,#0]  ; av_tbox_cnt
000038  495c              LDR      r1,|L10.428|
00003a  2601              MOVS     r6,#1
00003c  2805              CMP      r0,#5
00003e  dd00              BLE      |L10.66|
000040  700e              STRB     r6,[r1,#0]
                  |L10.66|
000042  2400              MOVS     r4,#0
000044  2801              CMP      r0,#1
000046  da00              BGE      |L10.74|
000048  700c              STRB     r4,[r1,#0]
                  |L10.74|
00004a  4959              LDR      r1,|L10.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]  ; t_box
000050  4a58              LDR      r2,|L10.436|
000052  f9b11000          LDRSH    r1,[r1,#0]  ; TBOXREG
000056  4f58              LDR      r7,|L10.440|
000058  1e8b              SUBS     r3,r1,#2
00005a  4298              CMP      r0,r3
00005c  da0f              BGE      |L10.126|
00005e  f9921000          LDRSB    r1,[r2,#0]  ; t_box_cnt
000062  291e              CMP      r1,#0x1e
000064  da1e              BGE      |L10.164|
000066  f1010101          ADD      r1,r1,#1
00006a  b249              SXTB     r1,r1
00006c  7011              STRB     r1,[r2,#0]
00006e  291e              CMP      r1,#0x1e
000070  db18              BLT      |L10.164|
000072  8839              LDRH     r1,[r7,#0]  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1
000078  8039              STRH     r1,[r7,#0]
00007a  7014              STRB     r4,[r2,#0]
00007c  e012              B        |L10.164|
                  |L10.126|
00007e  4288              CMP      r0,r1
000080  dd0f              BLE      |L10.162|
000082  f9921000          LDRSB    r1,[r2,#0]  ; t_box_cnt
000086  291e              CMP      r1,#0x1e
000088  da0c              BGE      |L10.164|
00008a  f1010101          ADD      r1,r1,#1
00008e  b249              SXTB     r1,r1
000090  7011              STRB     r1,[r2,#0]
000092  291e              CMP      r1,#0x1e
000094  db06              BLT      |L10.164|
000096  8839              LDRH     r1,[r7,#0]  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1
00009c  8039              STRH     r1,[r7,#0]
00009e  7014              STRB     r4,[r2,#0]
0000a0  e000              B        |L10.164|
                  |L10.162|
0000a2  7014              STRB     r4,[r2,#0]
                  |L10.164|
0000a4  4945              LDR      r1,|L10.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]  ; TBOXVENTMAX
0000aa  4288              CMP      r0,r1
0000ac  dd05              BLE      |L10.186|
0000ae  2214              MOVS     r2,#0x14
0000b0  2100              MOVS     r1,#0
0000b2  4841              LDR      r0,|L10.440|
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L10.202|
                  |L10.186|
0000ba  4841              LDR      r0,|L10.448|
0000bc  2100              MOVS     r1,#0
0000be  8800              LDRH     r0,[r0,#0]  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9
0000c2  b202              SXTH     r2,r0
0000c4  483c              LDR      r0,|L10.440|
0000c6  f7fffffe          BL       gran
                  |L10.202|
0000ca  20f0              MOVS     r0,#0xf0
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L10.222|
0000d2  483c              LDR      r0,|L10.452|
0000d4  6801              LDR      r1,[r0,#0]  ; mess_data
0000d6  29f1              CMP      r1,#0xf1
0000d8  d101              BNE      |L10.222|
0000da  6840              LDR      r0,[r0,#4]  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]
                  |L10.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]  ; main_vent_pos
0000e2  4839              LDR      r0,|L10.456|
0000e4  2901              CMP      r1,#1
0000e6  dc01              BGT      |L10.236|
0000e8  7006              STRB     r6,[r0,#0]
0000ea  e000              B        |L10.238|
                  |L10.236|
0000ec  7004              STRB     r4,[r0,#0]
                  |L10.238|
0000ee  4837              LDR      r0,|L10.460|
0000f0  f8df80dc          LDR      r8,|L10.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]  ; TBATDISABLE
0000f8  f1a00132          SUB      r1,r0,#0x32
0000fc  2928              CMP      r1,#0x28
0000fe  d821              BHI      |L10.324|
000100  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
000104  4f33              LDR      r7,|L10.468|
000106  4281              CMP      r1,r0
000108  dd03              BLE      |L10.274|
00010a  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1
000110  8038              STRH     r0,[r7,#0]
                  |L10.274|
000112  4831              LDR      r0,|L10.472|
000114  f9b00000          LDRSH    r0,[r0,#0]  ; TBATENABLE
000118  4281              CMP      r1,r0
00011a  da03              BGE      |L10.292|
00011c  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
00011e  f1a00001          SUB      r0,r0,#1
000122  8038              STRH     r0,[r7,#0]
                  |L10.292|
000124  2206              MOVS     r2,#6
000126  2100              MOVS     r1,#0
000128  482a              LDR      r0,|L10.468|
00012a  f7fffffe          BL       gran
00012e  f9b70000          LDRSH    r0,[r7,#0]  ; tbatdisable_cnt
000132  2805              CMP      r0,#5
000134  dd01              BLE      |L10.314|
000136  f8886000          STRB     r6,[r8,#0]
                  |L10.314|
00013a  2801              CMP      r0,#1
00013c  da04              BGE      |L10.328|
00013e  f8884000          STRB     r4,[r8,#0]
000142  e001              B        |L10.328|
                  |L10.324|
000144  f8884000          STRB     r4,[r8,#0]
                  |L10.328|
000148  4824              LDR      r0,|L10.476|
00014a  4f25              LDR      r7,|L10.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32
000154  291e              CMP      r1,#0x1e
000156  d820              BHI      |L10.410|
000158  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
00015c  4d21              LDR      r5,|L10.484|
00015e  4281              CMP      r1,r0
000160  dd03              BLE      |L10.362|
000162  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000164  f1000001          ADD      r0,r0,#1
000168  8028              STRH     r0,[r5,#0]
                  |L10.362|
00016a  481f              LDR      r0,|L10.488|
00016c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADENABLE
000170  4281              CMP      r1,r0
000172  da03              BGE      |L10.380|
000174  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1
00017a  8028              STRH     r0,[r5,#0]
                  |L10.380|
00017c  2206              MOVS     r2,#6
00017e  2100              MOVS     r1,#0
000180  4818              LDR      r0,|L10.484|
000182  f7fffffe          BL       gran
000186  f9b50000          LDRSH    r0,[r5,#0]  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5
00018c  dd00              BLE      |L10.400|
00018e  703e              STRB     r6,[r7,#0]
                  |L10.400|
000190  2801              CMP      r0,#1
000192  da00              BGE      |L10.406|
000194  703c              STRB     r4,[r7,#0]
                  |L10.406|
000196  e8bd81f0          POP      {r4-r8,pc}
                  |L10.410|
00019a  703c              STRB     r4,[r7,#0]
00019c  e7fb              B        |L10.406|
;;;2112   
                          ENDP

00019e  0000              DCW      0x0000
                  |L10.416|
                          DCD      t_box
                  |L10.420|
                          DCD      TBOXMAX
                  |L10.424|
                          DCD      av_tbox_cnt
                  |L10.428|
                          DCD      av_tbox_stat
                  |L10.432|
                          DCD      TBOXREG
                  |L10.436|
                          DCD      t_box_cnt
                  |L10.440|
                          DCD      main_vent_pos
                  |L10.444|
                          DCD      TBOXVENTMAX
                  |L10.448|
                          DCD      pos_vent
                  |L10.452|
                          DCD      mess_data
                  |L10.456|
                          DCD      mixer_vent_stat
                  |L10.460|
                          DCD      TBATDISABLE
                  |L10.464|
                          DCD      tbatdisable_stat
                  |L10.468|
                          DCD      tbatdisable_cnt
                  |L10.472|
                          DCD      TBATENABLE
                  |L10.476|
                          DCD      TLOADDISABLE
                  |L10.480|
                          DCD      tloaddisable_stat
                  |L10.484|
                          DCD      tloaddisable_cnt
                  |L10.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.11||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.text||
                  ext_drv PROC
;;;2107   //-----------------------------------------------
;;;2108   void vent_resurs_hndl(void)
000000  4770              BX       lr
;;;2109   {
;;;2110   
;;;2111   }
;;;2112   
                          ENDP


                          AREA ||area_number.12||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.text||
                  zar_superviser_drv PROC
;;;2107   //-----------------------------------------------
;;;2108   void vent_resurs_hndl(void)
000000  4770              BX       lr
;;;2109   {
;;;2110   
;;;2111   }
;;;2112   
                          ENDP


                          AREA ||area_number.13||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.text||
                  zar_superviser_start PROC
;;;2107   //-----------------------------------------------
;;;2108   void vent_resurs_hndl(void)
000000  4a04              LDR      r2,|L13.20|
;;;2109   {
;;;2110   
;;;2111   }
000002  f04f0001          MOV      r0,#1
000006  7010              STRB     r0,[r2,#0]
000008  4903              LDR      r1,|L13.24|
00000a  7008              STRB     r0,[r1,#0]
00000c  7050              STRB     r0,[r2,#1]
00000e  7048              STRB     r0,[r1,#1]
000010  4770              BX       lr
;;;2112   
                          ENDP

000012  0000              DCW      0x0000
                  |L13.20|
                          DCD      sign_U
                  |L13.24|
                          DCD      sign_I

                          AREA ||area_number.14||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.14||, ||.text||
                  npn_hndl PROC
;;;2107   //-----------------------------------------------
;;;2108   void vent_resurs_hndl(void)
000000  4770              BX       lr
;;;2109   {
;;;2110   
;;;2111   }
;;;2112   
                          ENDP


                          AREA ||area_number.15||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.15||, ||.text||
                  speedChargeHndl PROC
;;;2107   //-----------------------------------------------
;;;2108   void vent_resurs_hndl(void)
000000  4770              BX       lr
;;;2109   {
;;;2110   
;;;2111   }
;;;2112   
                          ENDP


                          AREA ||area_number.16||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.16||, ||.text||
                  speedChargeStartStop PROC
;;;2107   //-----------------------------------------------
;;;2108   void vent_resurs_hndl(void)
000000  4770              BX       lr
;;;2109   {
;;;2110   
;;;2111   }
;;;2112   
                          ENDP


                          AREA ||area_number.17||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.17||, ||.text||
                  vent_resurs_hndl PROC
;;;2107   //-----------------------------------------------
;;;2108   void vent_resurs_hndl(void)
000000  4770              BX       lr
;;;2109   {
;;;2110   
;;;2111   }
;;;2112   
                          ENDP


                          AREA ||area_number.18||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.18||, ||.text||
                  vent_hndl PROC
;;;2107   //-----------------------------------------------
;;;2108   void vent_resurs_hndl(void)
000000  4770              BX       lr
;;;2109   {
;;;2110   
;;;2111   }
;;;2112   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32

                          AREA ||area_number.21||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.21||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.22||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.25||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.25||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.26||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.27||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.27||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.28||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.29||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.30||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.32||, DATA, ALIGN=1

                          EXPORTAS ||area_number.32||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  rele_stat
000000  01                DCB      0x01
                  adc_self_ch_cnt
000001  00                DCB      0x00
                  adc_ch_net
000002  00                DCB      0x00
                  adc_ch
000003  00                DCB      0x00
                  adc_ch_cnt
000004  00                DCB      0x00
                  adc_window_flag
000005  00                DCB      0x00
                  net_buff_
000006  0000              DCB      0x00,0x00
                  adc_result
000008  0000              DCB      0x00,0x00
                  adc_gorb_cnt
00000a  0000              DCB      0x00,0x00
                  adc_zero_cnt
00000c  0000              DCB      0x00,0x00
                  adc_window_cnt
00000e  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
000010  0000              DCB      0x00,0x00
                  samokalibr_cnt
000012  0000              DCB      0x00,0x00
                  adc_self_ch_buff
                          DCDU     0x00000000
000018  0000              DCB      0x00,0x00
                  adc_self_ch_disp
00001a  0000              DCB      0x00,0x00
                          DCDU     0x00000000

                          AREA ||area_number.35||, DATA, ALIGN=1

                          EXPORTAS ||area_number.35||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.36||, DATA, ALIGN=0

                          EXPORTAS ||area_number.36||, ||.data||
                  vent_stat
000000  00                DCB      0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  avg_main_cnt
000000  0014              DCW      0x0014

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  u_out_reg_main_cnt
000000  000a              DCW      0x000a

                          AREA ||area_number.39||, DATA, ALIGN=1

                          EXPORTAS ||area_number.39||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=0

                          EXPORTAS ||area_number.41||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  net_metr_buff_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=0

                          EXPORTAS ||area_number.44||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.45||, DATA, ALIGN=1

                          EXPORTAS ||area_number.45||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.46||, DATA, ALIGN=1

                          EXPORTAS ||area_number.46||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.47||, DATA, ALIGN=1

                          EXPORTAS ||area_number.47||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.50||, DATA, ALIGN=1

                          EXPORTAS ||area_number.50||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.51||, DATA, ALIGN=1

                          EXPORTAS ||area_number.51||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.52||, DATA, ALIGN=1

                          EXPORTAS ||area_number.52||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  plazma_sk
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=2

                          EXPORTAS ||area_number.54||, ||.data||
                  i_avg_max
                          DCD      0x00000000

                          AREA ||area_number.55||, DATA, ALIGN=2

                          EXPORTAS ||area_number.55||, ||.data||
                  i_avg_min
                          DCD      0x00000000

                          AREA ||area_number.56||, DATA, ALIGN=2

                          EXPORTAS ||area_number.56||, ||.data||
                  i_avg_summ
                          DCD      0x00000000

                          AREA ||area_number.57||, DATA, ALIGN=2

                          EXPORTAS ||area_number.57||, ||.data||
                  i_avg
                          DCD      0x00000000

                          AREA ||area_number.58||, DATA, ALIGN=2

                          EXPORTAS ||area_number.58||, ||.data||
                  avg
                          DCD      0x00000000

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bAVG
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  avg_cnt_
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  avg_num
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=0

                          EXPORTAS ||area_number.62||, ||.data||
                  bAVG_BLOCK
000000  00                DCB      0x00

                          AREA ||area_number.63||, DATA, ALIGN=0

                          EXPORTAS ||area_number.63||, ||.data||
                  bAVG_DIR
000000  00                DCB      0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  main_kb_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=1

                          EXPORTAS ||area_number.65||, ||.data||
                  kb_cnt_1lev
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.66||, DATA, ALIGN=1

                          EXPORTAS ||area_number.66||, ||.data||
                  kb_cnt_2lev
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.67||, DATA, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.data||
                  kb_full_ver
000000  00                DCB      0x00

                          AREA ||area_number.68||, DATA, ALIGN=0

                          EXPORTAS ||area_number.68||, ||.data||
                  kb_start
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.69||, DATA, ALIGN=0

                          EXPORTAS ||area_number.69||, ||.data||
                  kb_start_ips
000000  00                DCB      0x00

                          AREA ||area_number.70||, DATA, ALIGN=1

                          EXPORTAS ||area_number.70||, ||.data||
                  ibat_ips
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.71||, DATA, ALIGN=1

                          EXPORTAS ||area_number.71||, ||.data||
                  ibat_ips_
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.72||, DATA, ALIGN=0

                          EXPORTAS ||area_number.72||, ||.data||
                  num_of_wrks_bps
000000  00                DCB      0x00

                          AREA ||area_number.73||, DATA, ALIGN=0

                          EXPORTAS ||area_number.73||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.74||, DATA, ALIGN=0

                          EXPORTAS ||area_number.74||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.75||, DATA, ALIGN=0

                          EXPORTAS ||area_number.75||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.76||, DATA, ALIGN=0

                          EXPORTAS ||area_number.76||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.77||, DATA, ALIGN=1

                          EXPORTAS ||area_number.77||, ||.data||
                  bps_on_mask
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.78||, DATA, ALIGN=1

                          EXPORTAS ||area_number.78||, ||.data||
                  bps_off_mask
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.79||, DATA, ALIGN=0

                          EXPORTAS ||area_number.79||, ||.data||
                  num_necc_up
000000  00                DCB      0x00

                          AREA ||area_number.80||, DATA, ALIGN=0

                          EXPORTAS ||area_number.80||, ||.data||
                  num_necc_down
000000  00                DCB      0x00

                          AREA ||area_number.81||, DATA, ALIGN=0

                          EXPORTAS ||area_number.81||, ||.data||
                  sh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.82||, DATA, ALIGN=0

                          EXPORTAS ||area_number.82||, ||.data||
                  b1Hz_sh
000000  00                DCB      0x00

                          AREA ||area_number.83||, DATA, ALIGN=0

                          EXPORTAS ||area_number.83||, ||.data||
                  spc_stat
000000  00                DCB      0x00

                          AREA ||area_number.84||, DATA, ALIGN=0

                          EXPORTAS ||area_number.84||, ||.data||
                  spc_bat
000000  00                DCB      0x00

                          AREA ||area_number.85||, DATA, ALIGN=0

                          EXPORTAS ||area_number.85||, ||.data||
                  spc_phase
000000  00                DCB      0x00

                          AREA ||area_number.86||, DATA, ALIGN=1

                          EXPORTAS ||area_number.86||, ||.data||
                  vz_cnt_s
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.87||, DATA, ALIGN=1

                          EXPORTAS ||area_number.87||, ||.data||
                  vz_cnt_s_
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.88||, DATA, ALIGN=1

                          EXPORTAS ||area_number.88||, ||.data||
                  vz_cnt_h
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.89||, DATA, ALIGN=1

                          EXPORTAS ||area_number.89||, ||.data||
                  vz_cnt_h_
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.90||, DATA, ALIGN=0

                          EXPORTAS ||area_number.90||, ||.data||
                  bAVZ
000000  00                DCB      0x00

                          AREA ||area_number.91||, DATA, ALIGN=0

                          EXPORTAS ||area_number.91||, ||.data||
                  ke_start_stat
000000  00                DCB      0x00

                          AREA ||area_number.92||, DATA, ALIGN=1

                          EXPORTAS ||area_number.92||, ||.data||
                  cnt_end_ke
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.93||, DATA, ALIGN=2

                          EXPORTAS ||area_number.93||, ||.data||
                  ke_date
                          %        8

                          AREA ||area_number.94||, DATA, ALIGN=1

                          EXPORTAS ||area_number.94||, ||.data||
                  __ee_vz_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.95||, DATA, ALIGN=1

                          EXPORTAS ||area_number.95||, ||.data||
                  __ee_spc_stat
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.96||, DATA, ALIGN=1

                          EXPORTAS ||area_number.96||, ||.data||
                  __ee_spc_bat
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.97||, DATA, ALIGN=1

                          EXPORTAS ||area_number.97||, ||.data||
                  __ee_spc_phase
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.98||, DATA, ALIGN=1

                          EXPORTAS ||area_number.98||, ||.data||
                  cntrl_stat_blok_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.99||, DATA, ALIGN=1

                          EXPORTAS ||area_number.99||, ||.data||
                  cntrl_stat_blok_cnt_
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.100||, DATA, ALIGN=1

                          EXPORTAS ||area_number.100||, ||.data||
                  cntrl_stat_blok_cnt_plus
                          DCDU     0x00000000

                          AREA ||area_number.101||, DATA, ALIGN=1

                          EXPORTAS ||area_number.101||, ||.data||
                  cntrl_stat_blok_cnt_minus
                          DCDU     0x00000000

                          AREA ||area_number.102||, DATA, ALIGN=0

                          EXPORTAS ||area_number.102||, ||.data||
                  plazma_inv
                          DCDU     0x00000000

                          AREA ||area_number.103||, DATA, ALIGN=0

                          EXPORTAS ||area_number.103||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.104||, DATA, ALIGN=0

                          EXPORTAS ||area_number.104||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.105||, DATA, ALIGN=0

                          EXPORTAS ||area_number.105||, ||.data||
                  numOfForvardBps
000000  00                DCB      0x00

                          AREA ||area_number.106||, DATA, ALIGN=0

                          EXPORTAS ||area_number.106||, ||.data||
                  numOfForvardBps_old
000000  00                DCB      0x00

                          AREA ||area_number.107||, DATA, ALIGN=0

                          EXPORTAS ||area_number.107||, ||.data||
                  numOfForvardBps_minCnt
000000  00                DCB      0x00

                          AREA ||area_number.108||, DATA, ALIGN=1

                          EXPORTAS ||area_number.108||, ||.data||
                  numOfForvardBps_hourCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.109||, DATA, ALIGN=0

                          EXPORTAS ||area_number.109||, ||.data||
                  cntrl_hndl_plazma
000000  00                DCB      0x00
