; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\STEND.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_VD -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ke_start PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  4770              BX       lr
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP

                  samokalibr_hndl PROC
;;;250    //-----------------------------------------------
;;;251    void samokalibr_init(void)
;;;252    {
;;;253    samokalibr_cnt=1785;
000002  e92d47f0          PUSH     {r4-r10,lr}
000006  4cff              LDR      r4,|L1.1028|
;;;254    }
000008  8d20              LDRH     r0,[r4,#0x28]  ; samokalibr_cnt
00000a  1c40              ADDS     r0,r0,#1
00000c  b200              SXTH     r0,r0
00000e  8520              STRH     r0,[r4,#0x28]
000010  f5b06fe1          CMP      r0,#0x708
000014  db02              BLT      |L1.28|
000016  f04f0000          MOV      r0,#0
00001a  8520              STRH     r0,[r4,#0x28]
                  |L1.28|
00001c  f9b40028          LDRSH    r0,[r4,#0x28]  ; samokalibr_cnt
000020  f5b06fdf          CMP      r0,#0x6f8
000024  d911              BLS      |L1.74|
000026  230f              MOVS     r3,#0xf
000028  2201              MOVS     r2,#1
00002a  2164              MOVS     r1,#0x64
00002c  20d2              MOVS     r0,#0xd2
00002e  f7fffffe          BL       mess_send
000032  230f              MOVS     r3,#0xf
000034  2200              MOVS     r2,#0
000036  21d8              MOVS     r1,#0xd8
000038  20d7              MOVS     r0,#0xd7
00003a  f7fffffe          BL       mess_send
00003e  230f              MOVS     r3,#0xf
000040  2200              MOVS     r2,#0
000042  21d8              MOVS     r1,#0xd8
000044  20dc              MOVS     r0,#0xdc
000046  f7fffffe          BL       mess_send
                  |L1.74|
00004a  f9b40028          LDRSH    r0,[r4,#0x28]  ; samokalibr_cnt
00004e  f5a061e0          SUB      r1,r0,#0x700
000052  3907              SUBS     r1,#7
000054  d133              BNE      |L1.190|
000056  4dec              LDR      r5,|L1.1032|
000058  4cec              LDR      r4,|L1.1036|
00005a  4eed              LDR      r6,|L1.1040|
00005c  8828              LDRH     r0,[r5,#0]  ; Kibat0
00005e  8821              LDRH     r1,[r4,#0]  ; ad7705_buff_
000060  270a              MOVS     r7,#0xa
000062  f8df83b0          LDR      r8,|L1.1044|
000066  f8df93b0          LDR      r9,|L1.1048|
00006a  4288              CMP      r0,r1
00006c  d010              BEQ      |L1.144|
00006e  f9b60008          LDRSH    r0,[r6,#8]  ; bat
000072  fb90f0f7          SDIV     r0,r0,r7
000076  b200              SXTH     r0,r0
000078  f7fffffe          BL       abs
00007c  f9b81000          LDRSH    r1,[r8,#0]  ; IZMAX
000080  4288              CMP      r0,r1
000082  da05              BGE      |L1.144|
000084  f9b41000          LDRSH    r1,[r4,#0]  ; ad7705_buff_
000088  f9b90000          LDRSH    r0,[r9,#0]  ; ADR_KI0BAT
00008c  f7fffffe          BL       lc640_write_int
                  |L1.144|
000090  8868              LDRH     r0,[r5,#2]  ; Kibat0
000092  8861              LDRH     r1,[r4,#2]  ; ad7705_buff_
000094  4288              CMP      r0,r1
000096  d012              BEQ      |L1.190|
000098  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00009c  fb90f0f7          SDIV     r0,r0,r7
0000a0  b200              SXTH     r0,r0
0000a2  f7fffffe          BL       abs
0000a6  f9b81000          LDRSH    r1,[r8,#0]  ; IZMAX
0000aa  4288              CMP      r0,r1
0000ac  da07              BGE      |L1.190|
0000ae  f9b41002          LDRSH    r1,[r4,#2]  ; ad7705_buff_
0000b2  f9b90002          LDRSH    r0,[r9,#2]  ; ADR_KI0BAT
0000b6  e8bd47f0          POP      {r4-r10,lr}
0000ba  f7ffbffe          B.W      lc640_write_int
                  |L1.190|
0000be  e8bd87f0          POP      {r4-r10,pc}
;;;255    //-----------------------------------------------
                          ENDP

                  ubat_old_drv PROC
;;;277    //-----------------------------------------------
;;;278    void ubat_old_drv(void)
0000c2  4770              BX       lr
;;;279    {        
;;;280    
;;;281    }
;;;282    
                          ENDP

                  matemat PROC
;;;283    //-----------------------------------------------
;;;284    void matemat(void)
0000c4  e92d4ffe          PUSH     {r1-r11,lr}
;;;285    {
;;;286    //signed short temp_SS;
;;;287    signed long temp_SL/*,temp_SL_*/;
;;;288    char /*temp,*/i;
;;;289    //signed short temp_SS;
;;;290    
;;;291    #ifdef UKU_MGTS
;;;292    //напряжение сети
;;;293    temp_SL=(signed long)net_buff_;
;;;294    temp_SL*=Kunet;
;;;295    temp_SL/=110000L;
;;;296    net_U=(signed short)temp_SL;
;;;297    #endif
;;;298    
;;;299    #ifdef UKU_RSTKM
;;;300    //напряжение сети
;;;301    temp_SL=(signed long)net_buff_;
;;;302    temp_SL*=Kunet;
;;;303    temp_SL/=110000L;
;;;304    net_U=(signed short)temp_SL;
;;;305    #endif
;;;306    
;;;307    #ifdef UKU_3U
;;;308    //напряжение сети
;;;309    temp_SL=(signed long)net_buff_;
;;;310    temp_SL*=Kunet;
;;;311    temp_SL/=36000L;
;;;312    net_U=(signed short)temp_SL;
;;;313    #endif
;;;314    
;;;315    #ifdef UKU_6U
;;;316    //напряжение сети
;;;317    
;;;318    if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;319    	{
;;;320    
;;;321    	if(bps[11]._device==dNET_METR)
;;;322    		{
;;;323    		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;324    		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;325    		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;326    
;;;327    		temp_SL=(signed long)net_metr_buff_[0];
;;;328    		temp_SL*=KunetA;
;;;329    		temp_SL/=6000L;
;;;330    		net_Ua=(signed short)temp_SL;
;;;331    	
;;;332    		temp_SL=(signed long)net_metr_buff_[1];
;;;333    		temp_SL*=KunetB;
;;;334    		temp_SL/=6000L;
;;;335    		net_Ub=(signed short)temp_SL;
;;;336    	
;;;337    		temp_SL=(signed long)net_metr_buff_[2];
;;;338    		temp_SL*=KunetC;
;;;339    		temp_SL/=6000L;
;;;340    		net_Uc=(signed short)temp_SL;
;;;341    		}
;;;342    	else
;;;343    		{
;;;344    		temp_SL=(signed long)net_buff_;
;;;345    		temp_SL*=KunetA;
;;;346    		temp_SL/=110000L;
;;;347    		net_Ua=(signed short)temp_SL;
;;;348    	
;;;349    		temp_SL=(signed long)adc_buff_[3];
;;;350    		temp_SL*=KunetB;
;;;351    		temp_SL/=6000L;
;;;352    		net_Ub=(signed short)temp_SL;
;;;353    	
;;;354    		temp_SL=(signed long)adc_buff_[10];
;;;355    		temp_SL*=KunetC;
;;;356    		temp_SL/=6000L;
;;;357    		net_Uc=(signed short)temp_SL;
;;;358    		}
;;;359    
;;;360    	net_U=net_Ua;
;;;361    	if(net_Ub<net_U)net_U=net_Ub;
;;;362    	if(net_Uc<net_U)net_U=net_Uc;
;;;363    	}
;;;364    else 
;;;365    	{
;;;366    	temp_SL=(signed long)net_buff_;
;;;367    	temp_SL*=Kunet;
;;;368    	temp_SL/=110000L;
;;;369    	net_U=(signed short)temp_SL;
;;;370    	}
;;;371    
;;;372    
;;;373    
;;;374    
;;;375    #endif
;;;376    
;;;377    #ifdef UKU_GLONASS
;;;378    //напряжение сети
;;;379    temp_SL=(signed long)net_buff_;
;;;380    temp_SL*=Kunet;
;;;381    temp_SL/=110000L;
;;;382    net_U=(signed short)temp_SL;
;;;383    #endif
;;;384    
;;;385    #ifdef UKU_KONTUR
;;;386    //напряжение сети
;;;387    temp_SL=(signed long)net_buff_;
;;;388    temp_SL*=Kunet;
;;;389    temp_SL/=110000L;
;;;390    net_U=(signed short)temp_SL;
;;;391    #endif
;;;392    
;;;393    
;;;394    #ifdef UKU_220_V2
;;;395    //напряжение сети
;;;396    
;;;397    if(AUSW_MAIN==22033)
;;;398    	{
;;;399    	temp_SL=(signed long)net_buff_;
;;;400    	temp_SL*=KunetA;
;;;401    	temp_SL/=6000L;
;;;402    	net_Ua=(signed short)temp_SL;
;;;403    
;;;404    	temp_SL=(signed long)adc_buff_[3];
;;;405    	temp_SL*=KunetB;
;;;406    	temp_SL/=6000L;
;;;407    	net_Ub=(signed short)temp_SL;
;;;408    
;;;409    	temp_SL=(signed long)adc_buff_[10];
;;;410    	temp_SL*=KunetC;
;;;411    	temp_SL/=6000L;
;;;412    	net_Uc=(signed short)temp_SL;
;;;413    
;;;414    	net_U=net_Ua;
;;;415    	if(net_Ub<net_U)net_U=net_Ub;
;;;416    	if(net_Uc<net_U)net_U=net_Uc;
;;;417    	}
;;;418    else
;;;419    	{
;;;420    	temp_SL=(signed long)net_buff_;
;;;421    	temp_SL*=Kunet;
;;;422    	temp_SL/=5000L;
;;;423    	net_U=(signed short)temp_SL;
;;;424    	}
;;;425    #endif
;;;426    
;;;427    
;;;428    #ifdef UKU_220
;;;429    //напряжение сети
;;;430    
;;;431    if(AUSW_MAIN==22035)
;;;432    	{
;;;433    	temp_SL=(signed long)net_buff_;
;;;434    	temp_SL*=KunetA;
;;;435    	temp_SL/=6000L;
;;;436    	net_Ua=(signed short)temp_SL;
;;;437    
;;;438    	temp_SL=(signed long)adc_buff_[3];
;;;439    	temp_SL*=KunetB;
;;;440    	temp_SL/=6000L;
;;;441    	net_Ub=(signed short)temp_SL;
;;;442    
;;;443    	temp_SL=(signed long)adc_buff_[10];
;;;444    	temp_SL*=KunetC;
;;;445    	temp_SL/=6000L;
;;;446    	net_Uc=(signed short)temp_SL;
;;;447    
;;;448    	net_U=net_Ua;
;;;449    	if(net_Ub<net_U)net_U=net_Ub;
;;;450    	if(net_Uc<net_U)net_U=net_Uc;
;;;451    	}
;;;452    else
;;;453    	{
;;;454    	temp_SL=(signed long)net_buff_;
;;;455    	temp_SL*=Kunet;
;;;456    	#ifdef _ACDC_
;;;457    	temp_SL/=500L;
;;;458    	#else
;;;459    	temp_SL/=5000L;
;;;460    	#endif
;;;461    	net_U=(signed short)temp_SL;
;;;462    	
;;;463    	}
;;;464    #endif
;;;465    
;;;466    #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;467    //напряжение сети
;;;468    
;;;469    
;;;470    	if(bps[11]._device==dNET_METR)
0000c8  48d4              LDR      r0,|L1.1052|
;;;471    		{
;;;472    		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;473    		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;474    		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;475    
;;;476    		temp_SL=(signed long)net_metr_buff_[2];
;;;477    		temp_SL*=KunetA;
0000ca  4ad5              LDR      r2,|L1.1056|
;;;478    		temp_SL/=6000L;
;;;479    		net_Ua=(signed short)temp_SL;
;;;480    	
;;;481    		temp_SL=(signed long)net_metr_buff_[1];
;;;482    		temp_SL*=KunetB;
0000cc  4bd6              LDR      r3,|L1.1064|
0000ce  f8900478          LDRB     r0,[r0,#0x478]        ;470  ; bps
0000d2  9002              STR      r0,[sp,#8]            ;477
0000d4  f9b2a000          LDRSH    r10,[r2,#0]           ;477
;;;483    		temp_SL/=6000L;
;;;484    		net_Ub=(signed short)temp_SL;
;;;485    	
;;;486    		temp_SL=(signed long)net_metr_buff_[0];
;;;487    		temp_SL*=KunetC;
0000d8  49d4              LDR      r1,|L1.1068|
0000da  f9b32000          LDRSH    r2,[r3,#0]            ;482
0000de  9201              STR      r2,[sp,#4]
0000e0  4dd0              LDR      r5,|L1.1060|
0000e2  f9b11000          LDRSH    r1,[r1,#0]
0000e6  4bd2              LDR      r3,|L1.1072|
;;;488    		temp_SL/=6000L;
;;;489    		net_Uc=(signed short)temp_SL;
0000e8  4fd2              LDR      r7,|L1.1076|
;;;490    
;;;491    		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;492    
;;;493    		net_U=net_Ua;
0000ea  4cd3              LDR      r4,|L1.1080|
;;;494    		if(net_Ub<net_U)net_U=net_Ub;
;;;495    		if(net_Uc<net_U)net_U=net_Uc;
;;;496    		}
;;;497    	  else if(AUSW_MAIN==22033)
0000ec  f8df934c          LDR      r9,|L1.1084|
0000f0  f2456611          MOV      r6,#0x5611
;;;498    	{
;;;499    	temp_SL=(signed long)net_buff_;
;;;500    	temp_SL*=KunetA;
;;;501    	temp_SL/=4000L;
;;;502    	net_Ua=(signed short)temp_SL;
;;;503    
;;;504    	temp_SL=(signed long)adc_buff_[3];
;;;505    	temp_SL*=KunetB;
;;;506    	temp_SL/=6000L;
;;;507    	net_Ub=(signed short)temp_SL;
;;;508    
;;;509    	temp_SL=(signed long)adc_buff_[10];
;;;510    	temp_SL*=KunetC;
;;;511    	temp_SL/=6000L;
;;;512    	net_Uc=(signed short)temp_SL;
;;;513    
;;;514    	net_U=net_Ua;
;;;515    	if(net_Ub<net_U)net_U=net_Ub;
;;;516    	if(net_Uc<net_U)net_U=net_Uc;
;;;517    	}
;;;518    else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22018))
;;;519    	{
;;;520    	temp_SL=(signed long)net_buff_;
;;;521    	temp_SL*=KunetA;
;;;522    	temp_SL/=40000L;
;;;523    	net_Ua=(signed short)temp_SL;
;;;524    
;;;525    	temp_SL=(signed long)adc_buff_[3];
;;;526    	temp_SL*=KunetB;
;;;527    	temp_SL/=6000L;
;;;528    	net_Ub=(signed short)temp_SL;
;;;529    
;;;530    	temp_SL=(signed long)adc_buff_[10];
;;;531    	temp_SL*=KunetC;
;;;532    	temp_SL/=6000L;
;;;533    	net_Uc=(signed short)temp_SL;
;;;534    
;;;535    	net_U=net_Ua;
;;;536    	if(net_Ub<net_U)net_U=net_Ub;
;;;537    	if(net_Uc<net_U)net_U=net_Uc;
;;;538    	}
;;;539    else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
0000f4  f24558fa          MOV      r8,#0x55fa
0000f8  9100              STR      r1,[sp,#0]            ;470
0000fa  2807              CMP      r0,#7                 ;470
0000fc  d038              BEQ      |L1.368|
0000fe  49c1              LDR      r1,|L1.1028|
000100  f8dfc33c          LDR      r12,|L1.1088|
000104  f8dfa320          LDR      r10,|L1.1064|
000108  8a8a              LDRH     r2,[r1,#0x14]         ;499
00010a  49c5              LDR      r1,|L1.1056|
00010c  f9baa000          LDRSH    r10,[r10,#0]          ;482
000110  f2417b70          MOV      r11,#0x1770           ;478
000114  f9b11000          LDRSH    r1,[r1,#0]            ;477
000118  f8b90000          LDRH     r0,[r9,#0]            ;497  ; AUSW_MAIN
00011c  434a              MULS     r2,r1,r2              ;500
00011e  f9bc1006          LDRSH    r1,[r12,#6]           ;504
000122  f9bcc014          LDRSH    r12,[r12,#0x14]       ;509
000126  fb01f10a          MUL      r1,r1,r10             ;505
00012a  f8dfa300          LDR      r10,|L1.1068|
00012e  fb91f1fb          SDIV     r1,r1,r11             ;506
000132  f9baa000          LDRSH    r10,[r10,#0]          ;487
000136  b209              SXTH     r1,r1                 ;507
000138  fb0cfc0a          MUL      r12,r12,r10           ;510
00013c  fb9cfcfb          SDIV     r12,r12,r11           ;511
000140  fa0ffc8c          SXTH     r12,r12               ;512
000144  42b0              CMP      r0,r6                 ;497
000146  d158              BNE      |L1.506|
000148  f44f607a          MOV      r0,#0xfa0             ;501
00014c  fb92f0f0          SDIV     r0,r2,r0              ;501
000150  b200              SXTH     r0,r0                 ;502
000152  8028              STRH     r0,[r5,#0]            ;502
000154  8019              STRH     r1,[r3,#0]            ;507
000156  f8a7c000          STRH     r12,[r7,#0]           ;512
00015a  8020              STRH     r0,[r4,#0]            ;514
00015c  4281              CMP      r1,r0                 ;515
00015e  da00              BGE      |L1.354|
000160  8021              STRH     r1,[r4,#0]            ;515
                  |L1.354|
000162  f9b40000          LDRSH    r0,[r4,#0]            ;516  ; net_U
000166  4584              CMP      r12,r0                ;516
000168  da01              BGE      |L1.366|
00016a  f8a4c000          STRH     r12,[r4,#0]           ;516
                  |L1.366|
00016e  e07d              B        |L1.620|
                  |L1.368|
000170  48b4              LDR      r0,|L1.1092|
000172  f8dfc290          LDR      r12,|L1.1028|
000176  7802              LDRB     r2,[r0,#0]            ;472  ; bps
000178  7841              LDRB     r1,[r0,#1]            ;472  ; bps
00017a  f10c0c2e          ADD      r12,r12,#0x2e         ;472
00017e  eb022101          ADD      r1,r2,r1,LSL #8       ;472
000182  fa1ffb81          UXTH     r11,r1                ;472
000186  f8acb000          STRH     r11,[r12,#0]          ;472
00018a  7881              LDRB     r1,[r0,#2]            ;473  ; bps
00018c  78c2              LDRB     r2,[r0,#3]            ;473  ; bps
00018e  eb012102          ADD      r1,r1,r2,LSL #8       ;473
000192  b28a              UXTH     r2,r1                 ;473
000194  f8ac2002          STRH     r2,[r12,#2]           ;473
000198  7901              LDRB     r1,[r0,#4]            ;474  ; bps
00019a  f890e005          LDRB     lr,[r0,#5]            ;474  ; bps
00019e  eb01210e          ADD      r1,r1,lr,LSL #8       ;474
0001a2  b289              UXTH     r1,r1                 ;474
0001a4  f8ac1004          STRH     r1,[r12,#4]           ;474
0001a8  fb01f10a          MUL      r1,r1,r10             ;477
0001ac  f2417a70          MOV      r10,#0x1770           ;478
0001b0  fb91f1fa          SDIV     r1,r1,r10             ;478
0001b4  fa0ffc81          SXTH     r12,r1                ;479
0001b8  f8a5c000          STRH     r12,[r5,#0]           ;479
0001bc  9901              LDR      r1,[sp,#4]            ;482
0001be  fb02f201          MUL      r2,r2,r1              ;482
0001c2  fb92f1fa          SDIV     r1,r2,r10             ;483
0001c6  b209              SXTH     r1,r1                 ;484
0001c8  8019              STRH     r1,[r3,#0]            ;484
0001ca  9a00              LDR      r2,[sp,#0]            ;487
0001cc  fb0bfb02          MUL      r11,r11,r2            ;487
0001d0  fb9bf2fa          SDIV     r2,r11,r10            ;488
0001d4  b212              SXTH     r2,r2                 ;489
0001d6  803a              STRH     r2,[r7,#0]            ;489
0001d8  7983              LDRB     r3,[r0,#6]            ;491  ; bps
0001da  79c0              LDRB     r0,[r0,#7]            ;491  ; bps
0001dc  eb032000          ADD      r0,r3,r0,LSL #8       ;491
0001e0  4b99              LDR      r3,|L1.1096|
0001e2  8018              STRH     r0,[r3,#0]            ;491
0001e4  f8a4c000          STRH     r12,[r4,#0]           ;493
0001e8  4561              CMP      r1,r12                ;494
0001ea  da00              BGE      |L1.494|
0001ec  8021              STRH     r1,[r4,#0]            ;494
                  |L1.494|
0001ee  f9b40000          LDRSH    r0,[r4,#0]            ;495  ; net_U
0001f2  4282              CMP      r2,r0                 ;495
0001f4  da3a              BGE      |L1.620|
0001f6  8022              STRH     r2,[r4,#0]            ;495
0001f8  e038              B        |L1.620|
                  |L1.506|
0001fa  f5a04aac          SUB      r10,r0,#0x5600        ;518
0001fe  f1ba0a2f          SUBS     r10,r10,#0x2f         ;518
000202  d008              BEQ      |L1.534|
000204  f11a0a28          ADDS     r10,r10,#0x28         ;518
000208  d005              BEQ      |L1.534|
00020a  f1ba0a14          SUBS     r10,r10,#0x14         ;518
00020e  d002              BEQ      |L1.534|
000210  f11a0a19          ADDS     r10,r10,#0x19         ;518
000214  d113              BNE      |L1.574|
                  |L1.534|
000216  f6494040          MOV      r0,#0x9c40            ;522
00021a  fb92f0f0          SDIV     r0,r2,r0              ;522
00021e  b200              SXTH     r0,r0                 ;523
000220  8028              STRH     r0,[r5,#0]            ;523
000222  8019              STRH     r1,[r3,#0]            ;528
000224  f8a7c000          STRH     r12,[r7,#0]           ;533
000228  8020              STRH     r0,[r4,#0]            ;535
00022a  4281              CMP      r1,r0                 ;536
00022c  da00              BGE      |L1.560|
00022e  8021              STRH     r1,[r4,#0]            ;536
                  |L1.560|
000230  f9b40000          LDRSH    r0,[r4,#0]            ;537  ; net_U
000234  4584              CMP      r12,r0                ;537
000236  da19              BGE      |L1.620|
000238  f8a4c000          STRH     r12,[r4,#0]           ;537
00023c  e016              B        |L1.620|
                  |L1.574|
;;;540    	{
;;;541    	temp_SL=(signed long)net_buff_;
;;;542    	temp_SL*=Kunet;
00023e  4983              LDR      r1,|L1.1100|
000240  f9b12000          LDRSH    r2,[r1,#0]
000244  496f              LDR      r1,|L1.1028|
000246  8a89              LDRH     r1,[r1,#0x14]         ;499
000248  4351              MULS     r1,r2,r1
00024a  4540              CMP      r0,r8                 ;539
00024c  d003              BEQ      |L1.598|
00024e  f5a042aa          SUB      r2,r0,#0x5500         ;539
000252  3afb              SUBS     r2,r2,#0xfb           ;539
000254  d105              BNE      |L1.610|
                  |L1.598|
;;;543    	temp_SL/=35000L;
000256  f64800b8          MOV      r0,#0x88b8
00025a  fb91f0f0          SDIV     r0,r1,r0
;;;544    	net_U=(signed short)temp_SL;
00025e  8020              STRH     r0,[r4,#0]
000260  e004              B        |L1.620|
                  |L1.610|
;;;545    	
;;;546    	}
;;;547    else
;;;548    	{
;;;549    	temp_SL=(signed long)net_buff_;
;;;550    	temp_SL*=Kunet;
;;;551    	#ifdef _ACDC_
;;;552    	temp_SL/=500L;
000262  f44f70fa          MOV      r0,#0x1f4
000266  fb91f0f0          SDIV     r0,r1,r0
;;;553    	#else
;;;554    	temp_SL/=5000L;
;;;555    	#endif
;;;556    	net_U=(signed short)temp_SL;
00026a  8020              STRH     r0,[r4,#0]
                  |L1.620|
;;;557    	
;;;558    	}
;;;559    if(bps[11]._device!=dNET_METR) net_F3=net_F;
00026c  9802              LDR      r0,[sp,#8]
00026e  2807              CMP      r0,#7
000270  d003              BEQ      |L1.634|
000272  4877              LDR      r0,|L1.1104|
000274  8801              LDRH     r1,[r0,#0]  ; net_F
000276  4874              LDR      r0,|L1.1096|
000278  8001              STRH     r1,[r0,#0]
                  |L1.634|
;;;560    #endif
;;;561    
;;;562    #ifdef UKU_TELECORE2015
;;;563    //напряжение сети
;;;564    temp_SL=(signed long)net_buff_;
;;;565    temp_SL*=Kunet;
;;;566    temp_SL/=110000L;
;;;567    net_U=(signed short)temp_SL;
;;;568    #endif
;;;569    
;;;570    #ifdef UKU_TELECORE2017
;;;571    //напряжение сети
;;;572    temp_SL=(signed long)net_buff_;
;;;573    temp_SL*=Kunet;
;;;574    temp_SL/=110000L;
;;;575    net_U=(signed short)temp_SL;
;;;576    #endif
;;;577    
;;;578    //Напряжения батарей
;;;579    temp_SL=(signed long)adc_buff_[0];
00027a  f8dfa1c4          LDR      r10,|L1.1088|
00027e  f9ba2000          LDRSH    r2,[r10,#0]  ; adc_buff_
;;;580    temp_SL*=Kubat[0];
000282  4974              LDR      r1,|L1.1108|
000284  f9b10000          LDRSH    r0,[r1,#0]  ; Kubat
000288  4350              MULS     r0,r2,r0
;;;581    temp_SL/=2000L;
00028a  f44f67fa          MOV      r7,#0x7d0
00028e  fb90f0f7          SDIV     r0,r0,r7
;;;582    bat[0]._Ub=(signed short)temp_SL;
000292  4d5f              LDR      r5,|L1.1040|
000294  8068              STRH     r0,[r5,#2]
;;;583    
;;;584    #ifdef UKU_220
;;;585    //Напряжения батарей
;;;586    temp_SL=(signed long)adc_buff_[0];
;;;587    temp_SL*=Kubat[0];
;;;588    temp_SL/=400L;
;;;589    bat[0]._Ub=(signed short)temp_SL;
;;;590    #endif
;;;591    
;;;592    #ifdef UKU_220_V2
;;;593    //Напряжения батарей
;;;594    temp_SL=(signed long)adc_buff_[0];
;;;595    temp_SL*=Kubat[0];
;;;596    temp_SL/=400L;
;;;597    bat[0]._Ub=(signed short)temp_SL;
;;;598    #endif
;;;599    
;;;600    temp_SL=(signed long)adc_buff_[4];
000296  f9ba3008          LDRSH    r3,[r10,#8]  ; adc_buff_
;;;601    temp_SL*=Kubatm[0];
00029a  4a6f              LDR      r2,|L1.1112|
00029c  f9b20000          LDRSH    r0,[r2,#0]  ; Kubatm
0002a0  fb00f003          MUL      r0,r0,r3
;;;602    temp_SL/=700L;
0002a4  f44f732f          MOV      r3,#0x2bc
0002a8  fb90f0f3          SDIV     r0,r0,r3
;;;603    bat[0]._Ubm=(signed short)temp_SL;
0002ac  80a8              STRH     r0,[r5,#4]
;;;604    
;;;605    #ifdef UKU_KONTUR
;;;606    temp_SL=(signed long)adc_buff_[4];
;;;607    temp_SL*=Kubatm[0];
;;;608    temp_SL/=2000L;
;;;609    bat[0]._Ubm=(signed short)temp_SL;
;;;610    #endif
;;;611    
;;;612    temp_SL=(signed long)adc_buff_[12];
0002ae  f9ba0018          LDRSH    r0,[r10,#0x18]  ; adc_buff_
;;;613    temp_SL*=Kubat[1];
0002b2  f9b11002          LDRSH    r1,[r1,#2]  ; Kubat
0002b6  fb01f100          MUL      r1,r1,r0
;;;614    temp_SL/=2000L;
0002ba  fb91f0f7          SDIV     r0,r1,r7
;;;615    bat[1]._Ub=(signed short)temp_SL;
0002be  f8a5004e          STRH     r0,[r5,#0x4e]
;;;616    
;;;617    #ifdef UKU_220
;;;618    temp_SL=(signed long)adc_buff_[12];
;;;619    temp_SL*=Kubat[1];
;;;620    temp_SL/=400L;
;;;621    bat[1]._Ub=(signed short)temp_SL;
;;;622    #endif
;;;623    
;;;624    #ifdef UKU_220_V2
;;;625    temp_SL=(signed long)adc_buff_[12];
;;;626    temp_SL*=Kubat[1];
;;;627    temp_SL/=400L;
;;;628    bat[1]._Ub=(signed short)temp_SL;
;;;629    #endif
;;;630    
;;;631    temp_SL=(signed long)adc_buff_[1];
0002c2  f9ba1002          LDRSH    r1,[r10,#2]  ; adc_buff_
;;;632    temp_SL*=Kubatm[1];
0002c6  f9b20002          LDRSH    r0,[r2,#2]  ; Kubatm
0002ca  fb00f001          MUL      r0,r0,r1
;;;633    temp_SL/=700L;
0002ce  fb90f0f3          SDIV     r0,r0,r3
;;;634    bat[1]._Ubm=(signed short)temp_SL;
0002d2  f8a50050          STRH     r0,[r5,#0x50]
;;;635    #ifdef UKU_KONTUR
;;;636    temp_SL=(signed long)adc_buff_[1];
;;;637    temp_SL*=Kubatm[1];
;;;638    temp_SL/=2000L;
;;;639    bat[1]._Ubm=(signed short)temp_SL;
;;;640    #endif
;;;641    
;;;642    #ifdef UKU_TELECORE2015
;;;643    temp_SL=(signed long)adc_buff_[2];
;;;644    temp_SL*=Kubat[0];
;;;645    temp_SL/=2000L;
;;;646    bat[0]._Ub=(signed short)temp_SL;
;;;647    #endif
;;;648    
;;;649    /*
;;;650    //Токи батарей
;;;651    if(!mess_find_unvol(MESS2MATEMAT))
;;;652    	{
;;;653    	temp_SL=(signed long)ad7705_buff_[0];
;;;654    	temp_SL-=(signed long)Kibat0[0];
;;;655    	temp_SL*=(signed long)Kibat1[0];
;;;656    	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;657    	else temp_SL/=1000L;
;;;658    	bat[0]._Ib=(signed short)temp_SL;
;;;659    
;;;660    	temp_SL=(signed long)ad7705_buff_[1];
;;;661    	temp_SL-=(signed long)Kibat0[1];
;;;662    	temp_SL*=(signed long)Kibat1[1];
;;;663    	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;664    	else temp_SL/=1000L;
;;;665    	bat[1]._Ib=(signed short)temp_SL;
;;;666    	}
;;;667    */
;;;668    
;;;669    
;;;670    //Токи батарей
;;;671    if(!mess_find_unvol(MESS2MATEMAT))
0002d6  f04f00dc          MOV      r0,#0xdc
0002da  f7fffffe          BL       mess_find_unvol
0002de  bbf0              CBNZ     r0,|L1.862|
;;;672    	{
;;;673    	temp_SL=(signed long)ad7705_buff_[0];
0002e0  f8dfb128          LDR      r11,|L1.1036|
0002e4  f8bb0000          LDRH     r0,[r11,#0]  ; ad7705_buff_
;;;674    	temp_SL-=(signed long)Kibat0[0];
0002e8  4947              LDR      r1,|L1.1032|
0002ea  8809              LDRH     r1,[r1,#0]  ; Kibat0
0002ec  eba00001          SUB      r0,r0,r1
;;;675    	temp_SL*=(signed long)Kibat1[0];
0002f0  4a5a              LDR      r2,|L1.1116|
0002f2  f9b21000          LDRSH    r1,[r2,#0]  ; Kibat1
0002f6  fb01f100          MUL      r1,r1,r0
;;;676    	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
0002fa  f8b90000          LDRH     r0,[r9,#0]  ; AUSW_MAIN
0002fe  f6456392          MOV      r3,#0x5e92
000302  f5a04eb0          SUB      lr,r0,#0x5800
;;;677    	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
000306  f2456c13          MOV      r12,#0x5613
00030a  f5be6ec7          SUBS     lr,lr,#0x638          ;676
00030e  d001              BEQ      |L1.788|
000310  4298              CMP      r0,r3                 ;676
000312  d104              BNE      |L1.798|
                  |L1.788|
000314  f44f7e96          MOV      lr,#0x12c             ;676
000318  fb91f1fe          SDIV     r1,r1,lr              ;676
00031c  e00c              B        |L1.824|
                  |L1.798|
00031e  4540              CMP      r0,r8
000320  d003              BEQ      |L1.810|
000322  4560              CMP      r0,r12
000324  d001              BEQ      |L1.810|
000326  42b0              CMP      r0,r6
000328  d102              BNE      |L1.816|
                  |L1.810|
00032a  fb91f1f7          SDIV     r1,r1,r7
00032e  e003              B        |L1.824|
                  |L1.816|
;;;678    	else temp_SL/=1000L;
000330  f44f7e7a          MOV      lr,#0x3e8
000334  fb91f1fe          SDIV     r1,r1,lr
                  |L1.824|
;;;679    	#ifdef UKU_TELECORE2015
;;;680    	temp_SL/=2L;
;;;681    	//temp_SL=-temp_SL;
;;;682    	#endif
;;;683    	//#ifdef UKU_TELECORE2017
;;;684    	//temp_SL/=-2L;
;;;685    	//temp_SL=-temp_SL;
;;;686    	//#endif
;;;687    	bat[0]._Ib=(signed short)temp_SL;
000338  8129              STRH     r1,[r5,#8]
;;;688    
;;;689    	temp_SL=(signed long)ad7705_buff_[1];
00033a  f8bb1002          LDRH     r1,[r11,#2]  ; ad7705_buff_
;;;690    	temp_SL-=(signed long)Kibat0[1];
00033e  f8dfb0c8          LDR      r11,|L1.1032|
000342  f8bbb002          LDRH     r11,[r11,#2]  ; Kibat0
000346  eba10b0b          SUB      r11,r1,r11
;;;691    	temp_SL*=(signed long)Kibat1[1];
00034a  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
00034e  fb01f10b          MUL      r1,r1,r11
;;;692    	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
000352  f5a042bc          SUB      r2,r0,#0x5e00
000356  3a38              SUBS     r2,r2,#0x38
000358  d003              BEQ      |L1.866|
00035a  4298              CMP      r0,r3
00035c  e000              B        |L1.864|
                  |L1.862|
00035e  e014              B        |L1.906|
                  |L1.864|
000360  d104              BNE      |L1.876|
                  |L1.866|
000362  f44f7096          MOV      r0,#0x12c
000366  fb91f0f0          SDIV     r0,r1,r0
00036a  e00c              B        |L1.902|
                  |L1.876|
;;;693    	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
00036c  4540              CMP      r0,r8
00036e  d003              BEQ      |L1.888|
000370  4560              CMP      r0,r12
000372  d001              BEQ      |L1.888|
000374  42b0              CMP      r0,r6
000376  d102              BNE      |L1.894|
                  |L1.888|
000378  fb91f0f7          SDIV     r0,r1,r7
00037c  e003              B        |L1.902|
                  |L1.894|
;;;694    	else temp_SL/=1000L;
00037e  f44f707a          MOV      r0,#0x3e8
000382  fb91f0f0          SDIV     r0,r1,r0
                  |L1.902|
;;;695    	bat[1]._Ib=(signed short)temp_SL;
000386  f8a50054          STRH     r0,[r5,#0x54]
                  |L1.906|
;;;696    	}
;;;697    
;;;698    
;;;699    
;;;700    
;;;701    
;;;702    //Температуры батарей
;;;703    
;;;704    #ifdef UKU_KONTUR
;;;705    if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;706    else bat[0]._nd=1;
;;;707    temp_SL=(signed long)adc_buff_[6];
;;;708    temp_SL*=Ktbat[0];
;;;709    temp_SL/=20000L;
;;;710    temp_SL-=273L;
;;;711    bat[0]._Tb=(signed short)temp_SL;
;;;712    #else
;;;713    if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
00038a  f9ba000c          LDRSH    r0,[r10,#0xc]  ; adc_buff_
00038e  4651              MOV      r1,r10
000390  4606              MOV      r6,r0
000392  f2a03021          SUB      r0,r0,#0x321
000396  f6403eb7          MOV      lr,#0xbb7
00039a  2200              MOVS     r2,#0
00039c  4682              MOV      r10,r0
;;;714    else bat[0]._nd=1;
00039e  f04f0c01          MOV      r12,#1
0003a2  4570              CMP      r0,lr                 ;713
0003a4  d201              BCS      |L1.938|
0003a6  732a              STRB     r2,[r5,#0xc]          ;713
0003a8  e001              B        |L1.942|
                  |L1.938|
0003aa  f885c00c          STRB     r12,[r5,#0xc]
                  |L1.942|
;;;715    temp_SL=(signed long)adc_buff_[6];
;;;716    temp_SL*=Ktbat[0];
0003ae  482c              LDR      r0,|L1.1120|
0003b0  f9b00000          LDRSH    r0,[r0,#0]  ; Ktbat
0003b4  4370              MULS     r0,r6,r0
;;;717    temp_SL/=20000L;
0003b6  f6446b20          MOV      r11,#0x4e20
0003ba  fb90f0fb          SDIV     r0,r0,r11
;;;718    temp_SL-=273L;
0003be  f2a01011          SUB      r0,r0,#0x111
;;;719    bat[0]._Tb=(signed short)temp_SL;
0003c2  8168              STRH     r0,[r5,#0xa]
;;;720    #endif
;;;721    
;;;722    #ifdef UKU_KONTUR
;;;723    if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;724    else bat[1]._nd=1;
;;;725    temp_SL=(signed long)adc_buff_[7];
;;;726    temp_SL*=Ktbat[1];
;;;727    temp_SL/=20000L;
;;;728    temp_SL-=273L;
;;;729    bat[1]._Tb=(signed short)temp_SL;
;;;730    #else
;;;731    if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
0003c4  f9b1000e          LDRSH    r0,[r1,#0xe]  ; adc_buff_
0003c8  f6403eb7          MOV      lr,#0xbb7
0003cc  f2a03321          SUB      r3,r0,#0x321
0003d0  4573              CMP      r3,lr
0003d2  d202              BCS      |L1.986|
0003d4  f8852058          STRB     r2,[r5,#0x58]
0003d8  e001              B        |L1.990|
                  |L1.986|
;;;732    else bat[1]._nd=1;
0003da  f885c058          STRB     r12,[r5,#0x58]
                  |L1.990|
;;;733    temp_SL=(signed long)adc_buff_[7];
0003de  4918              LDR      r1,|L1.1088|
;;;734    temp_SL*=Ktbat[1];
0003e0  4b1f              LDR      r3,|L1.1120|
0003e2  f9b33002          LDRSH    r3,[r3,#2]  ; Ktbat
0003e6  4343              MULS     r3,r0,r3
;;;735    temp_SL/=20000L;
0003e8  fb93f0fb          SDIV     r0,r3,r11
;;;736    temp_SL-=273L;
0003ec  f2a01011          SUB      r0,r0,#0x111
;;;737    bat[1]._Tb=(signed short)temp_SL;
0003f0  4b07              LDR      r3,|L1.1040|
0003f2  f8a30056          STRH     r0,[r3,#0x56]
;;;738    #endif
;;;739    
;;;740    #ifdef UKU_6U
;;;741    
;;;742    if(NUMMAKB==2)
;;;743    	{
;;;744    	if(makb[0]._cnt<5)
;;;745    		{
;;;746    		if(makb[0]._T_nd[0]==0)
;;;747    			{
;;;748    			bat[0]._Tb=makb[0]._T[0];
;;;749    			bat[0]._nd=0;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(makb[1]._cnt<5)
;;;754    		{
;;;755    		if(makb[1]._T_nd[0]==0)
;;;756    			{
;;;757    			bat[1]._Tb=makb[1]._T[0];
;;;758    			bat[1]._nd=0;
;;;759    			}
;;;760    		}
;;;761    
;;;762    	}
;;;763    else if(NUMMAKB==4)
;;;764    	{
;;;765    	signed short temp_t;
;;;766    	temp_t=-20;
;;;767    	if(makb[0]._cnt<5)
;;;768    		{
;;;769    		if(makb[0]._T_nd[0]==0)
;;;770    			{
;;;771    			temp_t=makb[0]._T[0];
;;;772    			bat[0]._nd=0;
;;;773    			}
;;;774    		}
;;;775    	if(makb[1]._cnt<5)
;;;776    		{
;;;777    		if(makb[1]._T_nd[0]==0)
;;;778    			{
;;;779    			if(temp_t<makb[1]._T[0])
;;;780    				{
;;;781    				bat[0]._nd=0;
;;;782    				temp_t=makb[1]._T[0];
;;;783    				}
;;;784    			}
;;;785    		}
;;;786    	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;787    
;;;788     	temp_t=-20;
;;;789    	if(makb[2]._cnt<5)
;;;790    		{
;;;791    		if(makb[2]._T_nd[0]==0)
;;;792    			{
;;;793    			temp_t=makb[2]._T[0];
;;;794    			bat[1]._nd=0;
;;;795    			}
;;;796    		}
;;;797    	if(makb[3]._cnt<5)
;;;798    		{
;;;799    		if(makb[3]._T_nd[0]==0)
;;;800    			{
;;;801    			if(temp_t<makb[3]._T[0])
;;;802    				{
;;;803    				bat[1]._nd=0;
;;;804    				temp_t=makb[3]._T[0];
;;;805    				}
;;;806    			}
;;;807    		}
;;;808    	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;809    	}
;;;810    
;;;811    #endif
;;;812    
;;;813    
;;;814    //Напряжение нагрузки
;;;815    temp_SL=(signed long)adc_buff_[2];
0003f6  f9b10004          LDRSH    r0,[r1,#4]  ; adc_buff_
;;;816    temp_SL*=Kuload;
0003fa  4b1a              LDR      r3,|L1.1124|
0003fc  f9b33000          LDRSH    r3,[r3,#0]  ; Kuload
000400  e032              B        |L1.1128|
000402  0000              DCW      0x0000
                  |L1.1028|
                          DCD      ||area_number.30||
                  |L1.1032|
                          DCD      Kibat0
                  |L1.1036|
                          DCD      ad7705_buff_
                  |L1.1040|
                          DCD      bat
                  |L1.1044|
                          DCD      IZMAX
                  |L1.1048|
                          DCD      ADR_KI0BAT
                  |L1.1052|
                          DCD      bps
                  |L1.1056|
                          DCD      KunetA
                  |L1.1060|
                          DCD      net_Ua
                  |L1.1064|
                          DCD      KunetB
                  |L1.1068|
                          DCD      KunetC
                  |L1.1072|
                          DCD      net_Ub
                  |L1.1076|
                          DCD      net_Uc
                  |L1.1080|
                          DCD      net_U
                  |L1.1084|
                          DCD      AUSW_MAIN
                  |L1.1088|
                          DCD      ||.bss||+0x400
                  |L1.1092|
                          DCD      bps+0x47e
                  |L1.1096|
                          DCD      net_F3
                  |L1.1100|
                          DCD      Kunet
                  |L1.1104|
                          DCD      net_F
                  |L1.1108|
                          DCD      Kubat
                  |L1.1112|
                          DCD      Kubatm
                  |L1.1116|
                          DCD      Kibat1
                  |L1.1120|
                          DCD      Ktbat
                  |L1.1124|
                          DCD      Kuload
                  |L1.1128|
000468  fb00f303          MUL      r3,r0,r3
;;;817    temp_SL/=2000L;
00046c  f44f65fa          MOV      r5,#0x7d0
000470  fb93f3f5          SDIV     r3,r3,r5
;;;818    load_U=(signed short)temp_SL;
000474  b21f              SXTH     r7,r3
000476  4bfa              LDR      r3,|L1.2144|
000478  801f              STRH     r7,[r3,#0]
;;;819    
;;;820    #ifdef UKU_220 
;;;821    //Напряжение нагрузки
;;;822    temp_SL=(signed long)adc_buff_[2];
;;;823    temp_SL*=Kuload;
;;;824    temp_SL/=350L;
;;;825    load_U=(signed short)temp_SL;
;;;826    #endif
;;;827    
;;;828    #ifdef UKU_220_V2 
;;;829    //Напряжение нагрузки
;;;830    temp_SL=(signed long)adc_buff_[2];
;;;831    temp_SL*=Kuload;
;;;832    temp_SL/=350L;
;;;833    load_U=(signed short)temp_SL;
;;;834    #endif
;;;835    
;;;836    #ifdef UKU_VD
;;;837    //Напряжение выхода
;;;838    temp_SL=(signed long)adc_buff_[1];
00047a  f9b11002          LDRSH    r1,[r1,#2]  ; adc_buff_
;;;839    temp_SL*=Kuout;
00047e  4bf9              LDR      r3,|L1.2148|
000480  f9b33000          LDRSH    r3,[r3,#0]  ; Kuout
000484  fb01f103          MUL      r1,r1,r3
;;;840    temp_SL/=500L;
000488  f44f75fa          MOV      r5,#0x1f4
00048c  fb91f1f5          SDIV     r1,r1,r5
;;;841    out_U=(signed short)temp_SL;
000490  4bf5              LDR      r3,|L1.2152|
000492  8019              STRH     r1,[r3,#0]
;;;842    
;;;843    
;;;844    //Напряжение вольтдобавки
;;;845    temp_SL=(signed long)adc_buff_[2];
;;;846    temp_SL*=Kuvd;
000494  4bf5              LDR      r3,|L1.2156|
000496  f9b33000          LDRSH    r3,[r3,#0]  ; Kuvd
00049a  fb00f303          MUL      r3,r0,r3
;;;847    temp_SL/=500L;
00049e  fb93f3f5          SDIV     r3,r3,r5
;;;848    vd_U=(signed short)temp_SL;
0004a2  f8dfe3cc          LDR      lr,|L1.2160|
0004a6  f8ae3000          STRH     r3,[lr,#0]
;;;849    
;;;850    //Напряжение входа
;;;851    in_U=out_U-vd_U;
0004aa  eba10103          SUB      r1,r1,r3
0004ae  4bf1              LDR      r3,|L1.2164|
0004b0  8019              STRH     r1,[r3,#0]
;;;852    
;;;853    //Напряжение выпрямителей
;;;854    temp_SL=(signed long)adc_buff_[2];
;;;855    temp_SL*=Kubps;
0004b2  49f1              LDR      r1,|L1.2168|
0004b4  f9b11000          LDRSH    r1,[r1,#0]  ; Kubps
0004b8  fb00f001          MUL      r0,r0,r1
;;;856    if(AUSW_MAIN==22010)temp_SL/=400L;
0004bc  f8b91000          LDRH     r1,[r9,#0]  ; AUSW_MAIN
0004c0  4541              CMP      r1,r8
0004c2  d104              BNE      |L1.1230|
0004c4  f44f71c8          MOV      r1,#0x190
0004c8  fb90f0f1          SDIV     r0,r0,r1
0004cc  e001              B        |L1.1234|
                  |L1.1230|
;;;857    else temp_SL/=500L;
0004ce  fb90f0f5          SDIV     r0,r0,r5
                  |L1.1234|
;;;858    bps_U=(signed short)temp_SL;
0004d2  4dea              LDR      r5,|L1.2172|
0004d4  b200              SXTH     r0,r0
0004d6  8028              STRH     r0,[r5,#0]
;;;859    
;;;860    if(bps_U<100)
;;;861    	{
;;;862    	char i;
;;;863    	for(i=0;i<NUMIST;i++)
0004d8  f8dfe3a4          LDR      lr,|L1.2176|
0004dc  2864              CMP      r0,#0x64              ;860
0004de  da17              BGE      |L1.1296|
0004e0  f04f0000          MOV      r0,#0
0004e4  f9be8000          LDRSH    r8,[lr,#0]
0004e8  f8df9398          LDR      r9,|L1.2180|
0004ec  e00e              B        |L1.1292|
                  |L1.1262|
;;;864    		{
;;;865    		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
0004ee  eb000180          ADD      r1,r0,r0,LSL #2
0004f2  eb0101c0          ADD      r1,r1,r0,LSL #3
0004f6  eb0901c1          ADD      r1,r9,r1,LSL #3
0004fa  f9b53000          LDRSH    r3,[r5,#0]  ; bps_U
0004fe  6a09              LDR      r1,[r1,#0x20]
000500  4299              CMP      r1,r3
000502  dd00              BLE      |L1.1286|
000504  8029              STRH     r1,[r5,#0]
                  |L1.1286|
000506  f1000001          ADD      r0,r0,#1              ;863
00050a  b2c0              UXTB     r0,r0                 ;863
                  |L1.1292|
00050c  4540              CMP      r0,r8                 ;863
00050e  dbee              BLT      |L1.1262|
                  |L1.1296|
;;;866    		}
;;;867    	}
;;;868    
;;;869    //Суммарный ток выпрямителей
;;;870    temp_SL=0;
000510  f04f0300          MOV      r3,#0
;;;871    for (i=0;i<NUMIST;i++)
000514  4618              MOV      r0,r3
000516  f9be1000          LDRSH    r1,[lr,#0]            ;863
00051a  4dda              LDR      r5,|L1.2180|
00051c  e00b              B        |L1.1334|
                  |L1.1310|
;;;872    	{
;;;873    	temp_SL+=((signed long)bps[i]._Ii);
00051e  eb000880          ADD      r8,r0,r0,LSL #2
000522  eb0808c0          ADD      r8,r8,r0,LSL #3
000526  eb0508c8          ADD      r8,r5,r8,LSL #3
00052a  f8d88024          LDR      r8,[r8,#0x24]
00052e  4443              ADD      r3,r3,r8
000530  f1000001          ADD      r0,r0,#1              ;871
000534  b2c0              UXTB     r0,r0                 ;871
                  |L1.1334|
000536  4288              CMP      r0,r1                 ;871
000538  dbf1              BLT      |L1.1310|
;;;874    	}
;;;875    bps_I=(signed short)temp_SL;
00053a  48d3              LDR      r0,|L1.2184|
00053c  8003              STRH     r3,[r0,#0]
;;;876    
;;;877    
;;;878    #endif
;;;879    
;;;880    
;;;881    #ifdef UKU_KONTUR
;;;882    //Внешний датчик температуры №1(температура внешнего воздуха)
;;;883    if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;884    else ND_EXT[0]=1;
;;;885    temp_SL=(signed long)adc_buff_[5];
;;;886    temp_SL*=Ktext[0];
;;;887    temp_SL/=20000L;
;;;888    temp_SL-=273L;
;;;889    t_ext[0]=(signed short)temp_SL;
;;;890    #else 
;;;891    //Внешний датчик температуры №1(температура внешнего воздуха)
;;;892    if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
00053e  48d3              LDR      r0,|L1.2188|
000540  f6403eb7          MOV      lr,#0xbb7
000544  f8df8348          LDR      r8,|L1.2192|
000548  f9b0300a          LDRSH    r3,[r0,#0xa]  ; adc_buff_
00054c  f2a33021          SUB      r0,r3,#0x321
000550  4570              CMP      r0,lr
000552  d202              BCS      |L1.1370|
000554  f8882000          STRB     r2,[r8,#0]
000558  e001              B        |L1.1374|
                  |L1.1370|
;;;893    else ND_EXT[0]=1;
00055a  f888c000          STRB     r12,[r8,#0]
                  |L1.1374|
;;;894    temp_SL=(signed long)adc_buff_[5];
;;;895    temp_SL*=Ktext[0];
00055e  48cd              LDR      r0,|L1.2196|
000560  f9b00000          LDRSH    r0,[r0,#0]  ; Ktext
000564  4343              MULS     r3,r0,r3
;;;896    temp_SL/=20000L;
000566  fb93f3fb          SDIV     r3,r3,r11
;;;897    temp_SL-=273L;
00056a  f2a31311          SUB      r3,r3,#0x111
;;;898    t_ext[0]=(signed short)temp_SL;
00056e  f8df9328          LDR      r9,|L1.2200|
000572  f8a93000          STRH     r3,[r9,#0]
;;;899    /*
;;;900    if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;901    else ND_EXT[1]=1;
;;;902    temp_SL=(signed long)adc_buff_[6];
;;;903    temp_SL*=Ktext[1];
;;;904    temp_SL/=20000L;
;;;905    temp_SL-=273L;
;;;906    t_ext[1]=(signed short)temp_SL;	*/
;;;907    #endif
;;;908    
;;;909    #ifdef UKU_220
;;;910    
;;;911    //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;912    if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;913    else ND_EXT[1]=1;
;;;914    temp_SL=(signed long)adc_buff_[3];
;;;915    temp_SL*=Ktext[1];
;;;916    temp_SL/=20000L;
;;;917    temp_SL-=273L;
;;;918    t_ext[1]=(signed short)temp_SL;
;;;919    
;;;920    //Внешний датчик температуры №3(температура отсека MSAN)
;;;921    if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;922    else ND_EXT[2]=1;
;;;923    temp_SL=(signed long)adc_buff_[10];
;;;924    temp_SL*=Ktext[2];
;;;925    temp_SL/=20000L;
;;;926    temp_SL-=273L;
;;;927    t_ext[2]=(signed short)temp_SL;
;;;928    
;;;929    #else
;;;930    
;;;931    
;;;932    #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;933    
;;;934    //Внешний датчик температуры 
;;;935    if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
000576  45f2              CMP      r10,lr
000578  d202              BCS      |L1.1408|
00057a  f8882000          STRB     r2,[r8,#0]
00057e  e001              B        |L1.1412|
                  |L1.1408|
;;;936    else ND_EXT[0]=1;
000580  f888c000          STRB     r12,[r8,#0]
                  |L1.1412|
;;;937    temp_SL=(signed long)adc_buff_[6];
;;;938    temp_SL*=Ktext[0];
000584  4370              MULS     r0,r6,r0
;;;939    temp_SL/=20000L;
000586  fb90f0fb          SDIV     r0,r0,r11
;;;940    temp_SL-=273L;
00058a  f2a01011          SUB      r0,r0,#0x111
;;;941    t_ext[0]=(signed short)temp_SL;
00058e  f8a90000          STRH     r0,[r9,#0]
;;;942    sys_T=t_ext[0];
000592  4bc2              LDR      r3,|L1.2204|
000594  8018              STRH     r0,[r3,#0]
;;;943    #else
;;;944    
;;;945    
;;;946    
;;;947    //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;948    if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;949    else ND_EXT[1]=1;
;;;950    temp_SL=(signed long)adc_buff_[6];
;;;951    temp_SL*=Ktext[1];
;;;952    temp_SL/=20000L;
;;;953    temp_SL-=273L;
;;;954    t_ext[1]=(signed short)temp_SL;
;;;955    
;;;956    //Внешний датчик температуры №3(температура отсека MSAN)
;;;957    if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;958    else ND_EXT[2]=1;
;;;959    temp_SL=(signed long)adc_buff_[3];
;;;960    temp_SL*=Ktext[2];
;;;961    temp_SL/=20000L;
;;;962    temp_SL-=273L;
;;;963    t_ext[2]=(signed short)temp_SL;
;;;964    
;;;965    #endif
;;;966    #endif
;;;967    
;;;968    if(!bIBAT_SMKLBR)
000596  48c2              LDR      r0,|L1.2208|
;;;969    	{
;;;970    	signed long temp_SL;
;;;971    	temp_SL=(signed long)ibat_metr_buff_[0];
;;;972    	temp_SL-=(signed long)ibat_metr_buff_[1];
;;;973    	temp_SL*=(signed long)Kibat1[0];
;;;974    	temp_SL/=2000L;
;;;975    	
;;;976    	Ib_ips_termokompensat =(signed short)temp_SL;
;;;977    	out_I=Ib_ips_termokompensat;
000598  4ec2              LDR      r6,|L1.2212|
00059a  f8dfc30c          LDR      r12,|L1.2216|
00059e  8800              LDRH     r0,[r0,#0]            ;968  ; bIBAT_SMKLBR
0005a0  b980              CBNZ     r0,|L1.1476|
0005a2  4bc2              LDR      r3,|L1.2220|
0005a4  6818              LDR      r0,[r3,#0]            ;971  ; ibat_metr_buff_
0005a6  685b              LDR      r3,[r3,#4]            ;972  ; ibat_metr_buff_
0005a8  eba00303          SUB      r3,r0,r3              ;972
0005ac  48c0              LDR      r0,|L1.2224|
0005ae  f9b00000          LDRSH    r0,[r0,#0]            ;973  ; Kibat1
0005b2  fb00f003          MUL      r0,r0,r3              ;973
0005b6  f44f63fa          MOV      r3,#0x7d0             ;974
0005ba  fb90f0f3          SDIV     r0,r0,r3              ;974
0005be  f8ac0000          STRH     r0,[r12,#0]           ;976
0005c2  8030              STRH     r0,[r6,#0]
                  |L1.1476|
;;;978    	}
;;;979    
;;;980    if(I_LOAD_MODE==0)
0005c4  48bb              LDR      r0,|L1.2228|
0005c6  8800              LDRH     r0,[r0,#0]  ; I_LOAD_MODE
0005c8  b9c8              CBNZ     r0,|L1.1534|
;;;981    	{
;;;982    	temp_SL=0;
0005ca  f04f0300          MOV      r3,#0
;;;983    	for(i=0;i<NUMIST;i++)
0005ce  4618              MOV      r0,r3
0005d0  e00b              B        |L1.1514|
                  |L1.1490|
;;;984    		{
;;;985    		temp_SL+=(signed long)bps[i]._Ii;
0005d2  eb000a80          ADD      r10,r0,r0,LSL #2
0005d6  eb0a0ac0          ADD      r10,r10,r0,LSL #3
0005da  eb050aca          ADD      r10,r5,r10,LSL #3
0005de  f8daa024          LDR      r10,[r10,#0x24]
0005e2  4453              ADD      r3,r3,r10
0005e4  f1000001          ADD      r0,r0,#1              ;983
0005e8  b2c0              UXTB     r0,r0                 ;983
                  |L1.1514|
0005ea  4288              CMP      r0,r1                 ;983
0005ec  dbf1              BLT      |L1.1490|
;;;986    		}
;;;987    	Ib_ips_termokompensat=(signed short)temp_SL/10;
0005ee  b21b              SXTH     r3,r3
0005f0  f04f000a          MOV      r0,#0xa
0005f4  fb93f0f0          SDIV     r0,r3,r0
0005f8  f8ac0000          STRH     r0,[r12,#0]
;;;988    	out_I=Ib_ips_termokompensat;
0005fc  8030              STRH     r0,[r6,#0]
                  |L1.1534|
;;;989    	}
;;;990    
;;;991    
;;;992    bat[0]._Ub=load_U;
0005fe  4eae              LDR      r6,|L1.2232|
000600  8077              STRH     r7,[r6,#2]
;;;993    
;;;994    
;;;995    
;;;996    
;;;997    #ifdef UKU_TELECORE2015
;;;998    
;;;999    //Внешний датчик температуры №1
;;;1000   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;1001   else ND_EXT[0]=1;
;;;1002   temp_SL=(signed long)adc_buff_[7];
;;;1003   temp_SL*=Ktext[0];
;;;1004   temp_SL/=20000L;
;;;1005   temp_SL-=273L;
;;;1006   t_ext[0]=(signed short)temp_SL;
;;;1007   
;;;1008   
;;;1009   //Внешний датчик температуры №2
;;;1010   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;1011   else ND_EXT[1]=1;
;;;1012   temp_SL=(signed long)adc_buff_[6];
;;;1013   temp_SL*=Ktext[1];
;;;1014   temp_SL/=20000L;
;;;1015   temp_SL-=273L;
;;;1016   t_ext[1]=(signed short)temp_SL;
;;;1017   
;;;1018   #endif
;;;1019   
;;;1020   #ifdef UKU_TELECORE2017
;;;1021   
;;;1022   //Внешний датчик температуры №1
;;;1023   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;1024   else ND_EXT[0]=1;
;;;1025   temp_SL=(signed long)adc_buff_[7];
;;;1026   temp_SL*=Ktext[0];
;;;1027   temp_SL/=20000L;
;;;1028   temp_SL-=273L;
;;;1029   t_ext[0]=(signed short)temp_SL;
;;;1030   
;;;1031   
;;;1032   //Внешний датчик температуры №2
;;;1033   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;1034   else ND_EXT[1]=1;
;;;1035   temp_SL=(signed long)adc_buff_[6];
;;;1036   temp_SL*=Ktext[1];
;;;1037   temp_SL/=20000L;
;;;1038   temp_SL-=273L;
;;;1039   t_ext[1]=(signed short)temp_SL;
;;;1040   
;;;1041   #endif
;;;1042   
;;;1043   //напряжение ввода
;;;1044   temp_SL=(signed long)adc_buff_ext_[0];
000602  f8dfb2b8          LDR      r11,|L1.2236|
000606  f8bb3000          LDRH     r3,[r11,#0]  ; adc_buff_ext_
;;;1045   temp_SL*=Kunet_ext[0];
00060a  48ad              LDR      r0,|L1.2240|
00060c  f9b00000          LDRSH    r0,[r0,#0]  ; Kunet_ext
000610  4358              MULS     r0,r3,r0
;;;1046   temp_SL/=4000L;
000612  f44f637a          MOV      r3,#0xfa0
000616  fb90f0f3          SDIV     r0,r0,r3
;;;1047   Uvv[0]=(signed short)temp_SL;
00061a  f8dfa2a8          LDR      r10,|L1.2244|
00061e  b280              UXTH     r0,r0
000620  f8aa0000          STRH     r0,[r10,#0]
;;;1048   if(Uvv[0]<100) Uvv0=Uvv[0];
000624  f8dfe2a0          LDR      lr,|L1.2248|
000628  2864              CMP      r0,#0x64
00062a  d202              BCS      |L1.1586|
00062c  f8ae0000          STRH     r0,[lr,#0]
000630  e002              B        |L1.1592|
                  |L1.1586|
;;;1049   else Uvv0=net_U;
000632  8820              LDRH     r0,[r4,#0]  ; net_U
000634  f8ae0000          STRH     r0,[lr,#0]
                  |L1.1592|
;;;1050   
;;;1051   //напряжение пэс
;;;1052   temp_SL=(signed long)adc_buff_ext_[1];
000638  f8bb4002          LDRH     r4,[r11,#2]  ; adc_buff_ext_
;;;1053   temp_SL*=Kunet_ext[1];
00063c  48a0              LDR      r0,|L1.2240|
00063e  f9b00002          LDRSH    r0,[r0,#2]  ; Kunet_ext
000642  4360              MULS     r0,r4,r0
;;;1054   temp_SL/=4000L;
000644  fb90f0f3          SDIV     r0,r0,r3
;;;1055   Uvv[1]=(signed short)temp_SL;
000648  f8aa0002          STRH     r0,[r10,#2]
;;;1056   
;;;1057   
;;;1058   //напряжение ввода трехфазное
;;;1059   temp_SL=(signed long)eb2_data_short[0];
00064c  4b9f              LDR      r3,|L1.2252|
00064e  f9b30000          LDRSH    r0,[r3,#0]  ; eb2_data_short
;;;1060   temp_SL*=Kvv_eb2[0];
000652  4c9f              LDR      r4,|L1.2256|
000654  f9b4a000          LDRSH    r10,[r4,#0]  ; Kvv_eb2
000658  fb0afa00          MUL      r10,r10,r0
;;;1061   temp_SL/=6000L;
00065c  f2417070          MOV      r0,#0x1770
000660  fb9afbf0          SDIV     r11,r10,r0
;;;1062   Uvv_eb2[0]=(signed short)temp_SL;
000664  f8dfa26c          LDR      r10,|L1.2260|
000668  f8aab000          STRH     r11,[r10,#0]
;;;1063   
;;;1064   temp_SL=(signed long)eb2_data_short[1];
00066c  f9b3b002          LDRSH    r11,[r3,#2]  ; eb2_data_short
;;;1065   temp_SL*=Kvv_eb2[1];
000670  f9b4e002          LDRSH    lr,[r4,#2]  ; Kvv_eb2
000674  fb0efe0b          MUL      lr,lr,r11
;;;1066   temp_SL/=6000L;
000678  fb9efbf0          SDIV     r11,lr,r0
;;;1067   Uvv_eb2[1]=(signed short)temp_SL;
00067c  f8aab002          STRH     r11,[r10,#2]
;;;1068   
;;;1069   temp_SL=(signed long)eb2_data_short[2];
000680  f9b3b004          LDRSH    r11,[r3,#4]  ; eb2_data_short
;;;1070   temp_SL*=Kvv_eb2[2];
000684  f9b44004          LDRSH    r4,[r4,#4]  ; Kvv_eb2
000688  fb04f40b          MUL      r4,r4,r11
;;;1071   temp_SL/=6000L;
00068c  fb94f4f0          SDIV     r4,r4,r0
;;;1072   Uvv_eb2[2]=(signed short)temp_SL;
000690  f8aa4004          STRH     r4,[r10,#4]
;;;1073   
;;;1074   //напряжение пэс трехфазное
;;;1075   temp_SL=(signed long)eb2_data_short[3];
000694  f9b3b006          LDRSH    r11,[r3,#6]  ; eb2_data_short
;;;1076   temp_SL*=Kpes_eb2[0];
000698  4c8f              LDR      r4,|L1.2264|
00069a  f9b4a000          LDRSH    r10,[r4,#0]  ; Kpes_eb2
00069e  fb0afa0b          MUL      r10,r10,r11
;;;1077   temp_SL/=6000L;
0006a2  fb9afbf0          SDIV     r11,r10,r0
;;;1078   Upes_eb2[0]=(signed short)temp_SL;
0006a6  f8dfa234          LDR      r10,|L1.2268|
0006aa  f8aab000          STRH     r11,[r10,#0]
;;;1079   
;;;1080   temp_SL=(signed long)eb2_data_short[4];
0006ae  f9b3e008          LDRSH    lr,[r3,#8]  ; eb2_data_short
;;;1081   temp_SL*=Kpes_eb2[1];
0006b2  f9b4b002          LDRSH    r11,[r4,#2]  ; Kpes_eb2
0006b6  fb0bfb0e          MUL      r11,r11,lr
;;;1082   temp_SL/=6000L;
0006ba  fb9bfbf0          SDIV     r11,r11,r0
;;;1083   Upes_eb2[1]=(signed short)temp_SL;
0006be  f8aab002          STRH     r11,[r10,#2]
;;;1084   
;;;1085   temp_SL=(signed long)eb2_data_short[5];
0006c2  f9b3b00a          LDRSH    r11,[r3,#0xa]  ; eb2_data_short
;;;1086   temp_SL*=Kpes_eb2[2];
0006c6  f9b43004          LDRSH    r3,[r4,#4]  ; Kpes_eb2
0006ca  fb03f30b          MUL      r3,r3,r11
;;;1087   temp_SL/=6000L;
0006ce  fb93f0f0          SDIV     r0,r3,r0
;;;1088   Upes_eb2[2]=(signed short)temp_SL;
0006d2  f8aa0004          STRH     r0,[r10,#4]
;;;1089   
;;;1090   //Вычисление температуры шкафа
;;;1091   
;;;1092   ibt._T[0]=t_ext[1]+273;
0006d6  f8b90002          LDRH     r0,[r9,#2]  ; t_ext
0006da  4c81              LDR      r4,|L1.2272|
0006dc  f2001011          ADD      r0,r0,#0x111
0006e0  fa0ffa80          SXTH     r10,r0
0006e4  f8a4a000          STRH     r10,[r4,#0]
;;;1093   ibt._T[1]=t_ext[2]+273;
0006e8  f8b90004          LDRH     r0,[r9,#4]  ; t_ext
0006ec  f2001011          ADD      r0,r0,#0x111
0006f0  fa0ff980          SXTH     r9,r0
0006f4  f8a49002          STRH     r9,[r4,#2]
;;;1094   
;;;1095   ibt._nd[0]=ND_EXT[1];
0006f8  f8983001          LDRB     r3,[r8,#1]  ; ND_EXT
0006fc  7223              STRB     r3,[r4,#8]
;;;1096   ibt._nd[1]=ND_EXT[2];
0006fe  f8980002          LDRB     r0,[r8,#2]  ; ND_EXT
000702  7260              STRB     r0,[r4,#9]
;;;1097   
;;;1098   #ifndef UKU_TELECORE2015
;;;1099   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;1100   	{
;;;1101   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
000704  4c77              LDR      r4,|L1.2276|
000706  b903              CBNZ     r3,|L1.1802|
000708  b110              CBZ      r0,|L1.1808|
                  |L1.1802|
;;;1102   	}
;;;1103   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
00070a  2b01              CMP      r3,#1
00070c  d00a              BEQ      |L1.1828|
00070e  e00a              B        |L1.1830|
                  |L1.1808|
000710  eb0a0009          ADD      r0,r10,r9             ;1101
000714  eb0070d0          ADD      r0,r0,r0,LSR #31      ;1101
000718  f46f7388          MVN      r3,#0x110             ;1101
00071c  eb030060          ADD      r0,r3,r0,ASR #1       ;1101
000720  8020              STRH     r0,[r4,#0]            ;1101
000722  e01e              B        |L1.1890|
                  |L1.1828|
000724  b108              CBZ      r0,|L1.1834|
                  |L1.1830|
;;;1104   	{
;;;1105   	t_box=ibt._T[1]-273;
;;;1106   	}
;;;1107   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
000726  b12b              CBZ      r3,|L1.1844|
000728  e006              B        |L1.1848|
                  |L1.1834|
00072a  f2a91911          SUB      r9,r9,#0x111          ;1105
00072e  f8a49000          STRH     r9,[r4,#0]            ;1105
000732  e016              B        |L1.1890|
                  |L1.1844|
000734  2801              CMP      r0,#1
000736  d002              BEQ      |L1.1854|
                  |L1.1848|
;;;1108   	{
;;;1109   	t_box=ibt._T[0]-273;
;;;1110   	}
;;;1111   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
000738  2b01              CMP      r3,#1
00073a  d005              BEQ      |L1.1864|
00073c  e011              B        |L1.1890|
                  |L1.1854|
00073e  f2aa1a11          SUB      r10,r10,#0x111        ;1109
000742  f8a4a000          STRH     r10,[r4,#0]           ;1109
000746  e00c              B        |L1.1890|
                  |L1.1864|
000748  2801              CMP      r0,#1
00074a  d10a              BNE      |L1.1890|
;;;1112   	{
;;;1113   	if(t_ext_can_nd<5)t_box= t_ext_can;
00074c  4866              LDR      r0,|L1.2280|
00074e  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
000750  2805              CMP      r0,#5
000752  d203              BCS      |L1.1884|
000754  4865              LDR      r0,|L1.2284|
000756  8800              LDRH     r0,[r0,#0]  ; t_ext_can
000758  8020              STRH     r0,[r4,#0]
00075a  e002              B        |L1.1890|
                  |L1.1884|
;;;1114   	else t_box=20;
00075c  f04f0014          MOV      r0,#0x14
000760  8020              STRH     r0,[r4,#0]
                  |L1.1890|
;;;1115   	}
;;;1116   #endif
;;;1117   /*
;;;1118   //Вычисление температуры шкафа
;;;1119   
;;;1120   ibt._T[0]=bat[0]._Tb+273;
;;;1121   ibt._T[1]=bat[1]._Tb+273;
;;;1122   ibt._T[2]=t_ext[1]+273;
;;;1123   ibt._T[3]=t_ext[2]+273;
;;;1124   
;;;1125   ibt._nd[0]=bat[0]._nd;
;;;1126   ibt._nd[1]=bat[1]._nd;
;;;1127   ibt._nd[2]=ND_EXT[1];
;;;1128   ibt._nd[3]=ND_EXT[2];
;;;1129   
;;;1130   ibt._avg1=0;
;;;1131   ibt._avg_cnt=4;
;;;1132   
;;;1133   if(ibt._nd[0]==0)
;;;1134   	{
;;;1135   	ibt._avg1+=ibt._T[0];
;;;1136   	}
;;;1137   else 
;;;1138   	{
;;;1139   	ibt._avg_cnt--;
;;;1140   	}
;;;1141   
;;;1142   if(ibt._nd[1]==0)
;;;1143   	{
;;;1144   	ibt._avg1+=ibt._T[1];
;;;1145   	}
;;;1146   else 
;;;1147   	{
;;;1148   	ibt._avg_cnt--;
;;;1149   	}
;;;1150   
;;;1151   if(ibt._nd[2]==0)
;;;1152   	{
;;;1153   	ibt._avg1+=ibt._T[2];
;;;1154   	}
;;;1155   else 
;;;1156   	{
;;;1157   	ibt._avg_cnt--;
;;;1158   	}
;;;1159   
;;;1160   if(ibt._nd[3]==0)
;;;1161   	{
;;;1162   	ibt._avg1+=ibt._T[3];
;;;1163   	}
;;;1164   else 
;;;1165   	{
;;;1166   	ibt._avg_cnt--;
;;;1167   	}
;;;1168   
;;;1169   if(ibt._avg_cnt==0)
;;;1170   	{
;;;1171   	}
;;;1172   else
;;;1173   	{
;;;1174   	ibt._avg1/=ibt._avg_cnt;
;;;1175   	}
;;;1176   
;;;1177   
;;;1178   if(ibt._nd[0]!=0)
;;;1179   	{
;;;1180   	ibt._T_dispers[0]=0;
;;;1181   	}
;;;1182   else 
;;;1183   	{
;;;1184   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;1185   	}
;;;1186   
;;;1187   if(ibt._nd[1]!=0)
;;;1188   	{
;;;1189   	ibt._T_dispers[1]=0;
;;;1190   	}
;;;1191   else 
;;;1192   	{
;;;1193   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;1194   	}
;;;1195   
;;;1196   if(ibt._nd[2]!=0)
;;;1197   	{
;;;1198   	ibt._T_dispers[2]=0;
;;;1199   	}
;;;1200   else 
;;;1201   	{
;;;1202   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;1203   	}
;;;1204   
;;;1205   if(ibt._nd[3]!=0)
;;;1206   	{
;;;1207   	ibt._T_dispers[3]=0;
;;;1208   	}
;;;1209   else 
;;;1210   	{
;;;1211   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;1212   	}
;;;1213   
;;;1214   if(	ibt._nd[0]&&
;;;1215   	ibt._nd[1]&&
;;;1216   	ibt._nd[2]&&
;;;1217   	ibt._nd[3]
;;;1218   	)
;;;1219   	{
;;;1220   	t_box=(bps[0]._Ti);
;;;1221   	}
;;;1222   
;;;1223   else if(	ibt._nd[0]||
;;;1224   	ibt._nd[1]||
;;;1225   	ibt._nd[2]||
;;;1226   	ibt._nd[3]
;;;1227   	)
;;;1228   	{
;;;1229   	t_box=(ibt._avg1-273);
;;;1230   	}
;;;1231   else 
;;;1232   	{
;;;1233   	ibt._max_dispers_num=0;
;;;1234   	ibt._max_dispers=ibt._T_dispers[0];
;;;1235   
;;;1236   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;1237   		{
;;;1238   		ibt._max_dispers_num=1;
;;;1239   		ibt._max_dispers=ibt._T_dispers[1];
;;;1240   		}
;;;1241   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;1242   		{
;;;1243   		ibt._max_dispers_num=2;
;;;1244   		ibt._max_dispers=ibt._T_dispers[2];
;;;1245   		}
;;;1246   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;1247   		{
;;;1248   		ibt._max_dispers_num=3;
;;;1249   		ibt._max_dispers=ibt._T_dispers[3];
;;;1250   		}
;;;1251   
;;;1252   	ibt._avg2=0;
;;;1253   
;;;1254   	if(ibt._max_dispers_num!=0)
;;;1255   		{
;;;1256   		ibt._avg2+=ibt._T[0];
;;;1257   		}
;;;1258   	if(ibt._max_dispers_num!=1)
;;;1259   		{
;;;1260   		ibt._avg2+=ibt._T[1];
;;;1261   		}
;;;1262   	if(ibt._max_dispers_num!=2)
;;;1263   		{
;;;1264   		ibt._avg2+=ibt._T[2];
;;;1265   		}
;;;1266   	if(ibt._max_dispers_num!=3)
;;;1267   		{
;;;1268   		ibt._avg2+=ibt._T[3];
;;;1269   		}
;;;1270   
;;;1271   	t_box=(ibt._avg2/3)-273;
;;;1272   
;;;1273   	}*/
;;;1274   
;;;1275   
;;;1276   //*********************************************
;;;1277   
;;;1278   #ifndef TELECORE
;;;1279   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
000762  4863              LDR      r0,|L1.2288|
000764  7803              LDRB     r3,[r0,#0]  ; BAT_IS_ON
000766  2b55              CMP      r3,#0x55
000768  d104              BNE      |L1.1908|
00076a  2fc8              CMP      r7,#0xc8
00076c  dd02              BLE      |L1.1908|
00076e  4b61              LDR      r3,|L1.2292|
000770  8934              LDRH     r4,[r6,#8]  ; bat
000772  845c              STRH     r4,[r3,#0x22]
                  |L1.1908|
;;;1280   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
000774  7840              LDRB     r0,[r0,#1]  ; BAT_IS_ON
000776  2855              CMP      r0,#0x55
000778  d10b              BNE      |L1.1938|
00077a  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
00077e  28c8              CMP      r0,#0xc8
000780  dd07              BLE      |L1.1938|
000782  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
000786  f9b63008          LDRSH    r3,[r6,#8]  ; bat
00078a  4298              CMP      r0,r3
00078c  dd01              BLE      |L1.1938|
00078e  4b59              LDR      r3,|L1.2292|
000790  8458              STRH     r0,[r3,#0x22]
                  |L1.1938|
;;;1281   #endif
;;;1282   
;;;1283   #ifdef TELECORE
;;;1284   Ibmax=0;
;;;1285   /*
;;;1286   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;1287   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;1288   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;1289   */
;;;1290   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;1291   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;1292   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;1293   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;1294   #endif
;;;1295   //Ibmax=bat[0]._Ib;
;;;1296   //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;1297   
;;;1298   #ifdef UKU_TELECORE2017
;;;1299   Ibmax=0;
;;;1300   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;1301   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;1302   #endif
;;;1303   
;;;1304   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1305   Ibmax=Ib_ips_termokompensat;
000792  4858              LDR      r0,|L1.2292|
000794  f8bc3000          LDRH     r3,[r12,#0]  ; Ib_ips_termokompensat
000798  8443              STRH     r3,[r0,#0x22]
;;;1306   #endif
;;;1307   for(i=0;i<NUMIST;i++)
00079a  f04f0300          MOV      r3,#0
00079e  e047              B        |L1.2096|
                  |L1.1952|
;;;1308   	{
;;;1309   	if(bps[i]._cnt<25)
0007a0  eb030083          ADD      r0,r3,r3,LSL #2
0007a4  eb0000c3          ADD      r0,r0,r3,LSL #3
0007a8  eb0500c0          ADD      r0,r5,r0,LSL #3
0007ac  78c4              LDRB     r4,[r0,#3]
0007ae  2c19              CMP      r4,#0x19
0007b0  d228              BCS      |L1.2052|
;;;1310        	{
;;;1311        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
0007b2  7984              LDRB     r4,[r0,#6]
0007b4  79c7              LDRB     r7,[r0,#7]
0007b6  eb042407          ADD      r4,r4,r7,LSL #8
0007ba  6244              STR      r4,[r0,#0x24]
;;;1312        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
0007bc  7a04              LDRB     r4,[r0,#8]
0007be  7a47              LDRB     r7,[r0,#9]
0007c0  eb042407          ADD      r4,r4,r7,LSL #8
0007c4  6204              STR      r4,[r0,#0x20]
;;;1313        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
0007c6  7a84              LDRB     r4,[r0,#0xa]
0007c8  7ac7              LDRB     r7,[r0,#0xb]
0007ca  eb042407          ADD      r4,r4,r7,LSL #8
0007ce  61c4              STR      r4,[r0,#0x1c]
;;;1314        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
0007d0  7b04              LDRB     r4,[r0,#0xc]
0007d2  6284              STR      r4,[r0,#0x28]
;;;1315        	bps[i]._adr_ee=bps[i]._buff[7];
0007d4  7b44              LDRB     r4,[r0,#0xd]
0007d6  f8804056          STRB     r4,[r0,#0x56]
;;;1316        	bps[i]._flags_tm=bps[i]._buff[8];
0007da  7b84              LDRB     r4,[r0,#0xe]
0007dc  f8804046          STRB     r4,[r0,#0x46]
;;;1317   	    //bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256); 
;;;1318   		bps[i]._Uisum=bps[i]._buff[10]+(bps[i]._buff[11]*256); 
0007e0  7c04              LDRB     r4,[r0,#0x10]
0007e2  7c47              LDRB     r7,[r0,#0x11]
0007e4  eb042407          ADD      r4,r4,r7,LSL #8
0007e8  6304              STR      r4,[r0,#0x30]
;;;1319   		bps[i].debug_info_to_uku0=bps[i]._buff[12]+(bps[i]._buff[13]*256); 
0007ea  7c84              LDRB     r4,[r0,#0x12]
0007ec  7cc7              LDRB     r7,[r0,#0x13]
0007ee  eb042407          ADD      r4,r4,r7,LSL #8
0007f2  f8a0405e          STRH     r4,[r0,#0x5e]
;;;1320   		bps[i].debug_info_to_uku1=bps[i]._buff[14]+(bps[i]._buff[15]*256);    
0007f6  7d04              LDRB     r4,[r0,#0x14]
0007f8  7d47              LDRB     r7,[r0,#0x15]
0007fa  eb042407          ADD      r4,r4,r7,LSL #8
0007fe  f8a04060          STRH     r4,[r0,#0x60]
000802  e012              B        |L1.2090|
                  |L1.2052|
;;;1321        	} 
;;;1322   	else 
;;;1323        	{
;;;1324        	bps[i]._Uii=0; 
000804  61c2              STR      r2,[r0,#0x1c]
;;;1325        	bps[i]._Ii=0;
000806  6242              STR      r2,[r0,#0x24]
;;;1326        	bps[i]._Uin=0;
000808  6202              STR      r2,[r0,#0x20]
;;;1327        	bps[i]._Ti=0;
00080a  6282              STR      r2,[r0,#0x28]
;;;1328        	bps[i]._flags_tm=0; 
00080c  f8802046          STRB     r2,[r0,#0x46]
;;;1329   	     //bps[i]._rotor=0;
;;;1330   		bps[i]._Uisum=0; 
000810  6302              STR      r2,[r0,#0x30]
;;;1331   		bps[i].debug_info_to_uku0=bps[i]._buff[12]+(bps[i]._buff[13]*256); 
000812  7c84              LDRB     r4,[r0,#0x12]
000814  7cc7              LDRB     r7,[r0,#0x13]
000816  eb042407          ADD      r4,r4,r7,LSL #8
00081a  f8a0405e          STRH     r4,[r0,#0x5e]
;;;1332   		bps[i].debug_info_to_uku1=bps[i]._buff[14]+(bps[i]._buff[15]*256);    
00081e  7d04              LDRB     r4,[r0,#0x14]
000820  7d47              LDRB     r7,[r0,#0x15]
000822  eb042407          ADD      r4,r4,r7,LSL #8
000826  f8a04060          STRH     r4,[r0,#0x60]
                  |L1.2090|
00082a  f1030301          ADD      r3,r3,#1              ;1307
00082e  b2db              UXTB     r3,r3                 ;1307
                  |L1.2096|
000830  428b              CMP      r3,r1                 ;1307
000832  dbb5              BLT      |L1.1952|
;;;1333        	}
;;;1334        
;;;1335        }
;;;1336   
;;;1337   load_I=0;
000834  4c30              LDR      r4,|L1.2296|
;;;1338   #ifdef TELECORE
;;;1339   
;;;1340   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;1341   	{
;;;1342   	load_I-=lakb[i]._ch_curr/10;
;;;1343   	}*/
;;;1344   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;1345   #elif UKU_TELECORE2017
;;;1346   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;1347   #else
;;;1348   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
000836  f9b63008          LDRSH    r3,[r6,#8]  ; bat
00083a  f04f000a          MOV      r0,#0xa
00083e  fb93f3f0          SDIV     r3,r3,r0
000842  f9b66054          LDRSH    r6,[r6,#0x54]  ; bat
000846  fb96f0f0          SDIV     r0,r6,r0
00084a  4418              ADD      r0,r0,r3
00084c  f1c00000          RSB      r0,r0,#0
000850  b207              SXTH     r7,r0
000852  8027              STRH     r7,[r4,#0]
;;;1349   #endif
;;;1350   Isumm=0;
000854  4e29              LDR      r6,|L1.2300|
000856  8032              STRH     r2,[r6,#0]
;;;1351   
;;;1352   for(i=0;i<NUMIST;i++)
000858  f04f0000          MOV      r0,#0
00085c  e063              B        |L1.2342|
00085e  0000              DCW      0x0000
                  |L1.2144|
                          DCD      load_U
                  |L1.2148|
                          DCD      Kuout
                  |L1.2152|
                          DCD      out_U
                  |L1.2156|
                          DCD      Kuvd
                  |L1.2160|
                          DCD      vd_U
                  |L1.2164|
                          DCD      in_U
                  |L1.2168|
                          DCD      Kubps
                  |L1.2172|
                          DCD      bps_U
                  |L1.2176|
                          DCD      NUMIST
                  |L1.2180|
                          DCD      bps
                  |L1.2184|
                          DCD      bps_I
                  |L1.2188|
                          DCD      ||.bss||+0x400
                  |L1.2192|
                          DCD      ND_EXT
                  |L1.2196|
                          DCD      Ktext
                  |L1.2200|
                          DCD      t_ext
                  |L1.2204|
                          DCD      sys_T
                  |L1.2208|
                          DCD      bIBAT_SMKLBR
                  |L1.2212|
                          DCD      out_I
                  |L1.2216|
                          DCD      Ib_ips_termokompensat
                  |L1.2220|
                          DCD      ibat_metr_buff_
                  |L1.2224|
                          DCD      Kibat1
                  |L1.2228|
                          DCD      I_LOAD_MODE
                  |L1.2232|
                          DCD      bat
                  |L1.2236|
                          DCD      adc_buff_ext_
                  |L1.2240|
                          DCD      Kunet_ext
                  |L1.2244|
                          DCD      Uvv
                  |L1.2248|
                          DCD      Uvv0
                  |L1.2252|
                          DCD      eb2_data_short
                  |L1.2256|
                          DCD      Kvv_eb2
                  |L1.2260|
                          DCD      Uvv_eb2
                  |L1.2264|
                          DCD      Kpes_eb2
                  |L1.2268|
                          DCD      Upes_eb2
                  |L1.2272|
                          DCD      ibt
                  |L1.2276|
                          DCD      t_box
                  |L1.2280|
                          DCD      t_ext_can_nd
                  |L1.2284|
                          DCD      t_ext_can
                  |L1.2288|
                          DCD      BAT_IS_ON
                  |L1.2292|
                          DCD      ||area_number.30||
                  |L1.2296|
                          DCD      load_I
                  |L1.2300|
                          DCD      Isumm
                  |L1.2304|
;;;1353        {
;;;1354        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
000900  eb000380          ADD      r3,r0,r0,LSL #2
000904  eb0303c0          ADD      r3,r3,r0,LSL #3
000908  eb0503c3          ADD      r3,r5,r3,LSL #3
00090c  f893c003          LDRB     r12,[r3,#3]
000910  f1bc0f05          CMP      r12,#5
000914  d204              BCS      |L1.2336|
000916  6a5b              LDR      r3,[r3,#0x24]
000918  f8b6c000          LDRH     r12,[r6,#0]  ; Isumm
00091c  4463              ADD      r3,r3,r12
00091e  8033              STRH     r3,[r6,#0]
                  |L1.2336|
000920  f1000001          ADD      r0,r0,#1              ;1352
000924  b2c0              UXTB     r0,r0                 ;1352
                  |L1.2342|
000926  4288              CMP      r0,r1                 ;1352
000928  dbea              BLT      |L1.2304|
;;;1355        }  
;;;1356        
;;;1357   load_I=load_I+Isumm;
00092a  8830              LDRH     r0,[r6,#0]  ; Isumm
00092c  4438              ADD      r0,r0,r7
00092e  b200              SXTH     r0,r0
000930  8020              STRH     r0,[r4,#0]
;;;1358   if(load_I<0)load_I=0;
000932  2800              CMP      r0,#0
000934  da00              BGE      |L1.2360|
000936  8022              STRH     r2,[r4,#0]
                  |L1.2360|
;;;1359   
;;;1360   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1361   load_I=0;
000938  8022              STRH     r2,[r4,#0]
;;;1362   
;;;1363   Isumm=0;
00093a  8032              STRH     r2,[r6,#0]
;;;1364   
;;;1365   for(i=0;i<NUMIST;i++)
00093c  f04f0000          MOV      r0,#0
000940  e00f              B        |L1.2402|
                  |L1.2370|
;;;1366        {
;;;1367        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
000942  eb000380          ADD      r3,r0,r0,LSL #2
000946  eb0303c0          ADD      r3,r3,r0,LSL #3
00094a  eb0503c3          ADD      r3,r5,r3,LSL #3
00094e  78df              LDRB     r7,[r3,#3]
000950  2f05              CMP      r7,#5
000952  d203              BCS      |L1.2396|
000954  6a5b              LDR      r3,[r3,#0x24]
000956  8837              LDRH     r7,[r6,#0]  ; Isumm
000958  443b              ADD      r3,r3,r7
00095a  8033              STRH     r3,[r6,#0]
                  |L1.2396|
00095c  f1000001          ADD      r0,r0,#1              ;1365
000960  b2c0              UXTB     r0,r0                 ;1365
                  |L1.2402|
000962  4288              CMP      r0,r1                 ;1365
000964  dbed              BLT      |L1.2370|
;;;1368        }  
;;;1369        
;;;1370   load_I=load_I+Isumm;
000966  8831              LDRH     r1,[r6,#0]  ; Isumm
000968  eb020001          ADD      r0,r2,r1
00096c  b200              SXTH     r0,r0
00096e  8020              STRH     r0,[r4,#0]
;;;1371   if(load_I<0)load_I=0;
000970  2800              CMP      r0,#0
000972  da00              BGE      |L1.2422|
000974  8022              STRH     r2,[r4,#0]
                  |L1.2422|
;;;1372   
;;;1373   #endif
;;;1374   
;;;1375   
;;;1376   
;;;1377   #ifdef UKU_GLONASS
;;;1378   inv[0]._Uio=6;
;;;1379   if (NUMINV)
;;;1380   	{
;;;1381   	for(i=0;i<NUMINV;i++)
;;;1382   		{
;;;1383   		if(bps[i+first_inv_slot]._cnt<25)
;;;1384        		{
;;;1385        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;1386        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;1387        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;1388        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;1389        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;1390   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;1391   			inv[i]._cnt=0;    
;;;1392        		} 
;;;1393   		else 
;;;1394        		{
;;;1395        		inv[i]._Uio=0; 
;;;1396        		inv[i]._Ii=0;
;;;1397        		inv[i]._Uin=0;
;;;1398        		inv[i]._Ti=0;
;;;1399        		inv[i]._flags_tm=0; 
;;;1400   //	     	inv[i]._rotor0;
;;;1401   			inv[i]._cnt=25;    
;;;1402        		}
;;;1403        	}
;;;1404      	}
;;;1405   #endif
;;;1406   
;;;1407   #ifndef UKU_GLONASS
;;;1408   if (NUMINV)
000976  48ff              LDR      r0,|L1.3444|
000978  f9b04000          LDRSH    r4,[r0,#0]  ; NUMINV
00097c  2c00              CMP      r4,#0
00097e  d066              BEQ      |L1.2638|
;;;1409   	{
;;;1410   	for(i=0;i<NUMINV;i++)
000980  f04f0300          MOV      r3,#0
;;;1411   		{
;;;1412   		if(bps[i+20]._cnt<25)
;;;1413        		{
;;;1414        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
000984  4efc              LDR      r6,|L1.3448|
000986  e060              B        |L1.2634|
                  |L1.2440|
000988  f1030014          ADD      r0,r3,#0x14           ;1412
00098c  eb000180          ADD      r1,r0,r0,LSL #2       ;1412
000990  eb0100c0          ADD      r0,r1,r0,LSL #3       ;1412
000994  eb0500c0          ADD      r0,r5,r0,LSL #3       ;1412
000998  78c1              LDRB     r1,[r0,#3]            ;1412
00099a  2919              CMP      r1,#0x19              ;1412
00099c  d239              BCS      |L1.2578|
00099e  7981              LDRB     r1,[r0,#6]
0009a0  79c7              LDRB     r7,[r0,#7]
0009a2  eb012707          ADD      r7,r1,r7,LSL #8
0009a6  eb030143          ADD      r1,r3,r3,LSL #1
0009aa  eb061141          ADD      r1,r6,r1,LSL #5
0009ae  61cf              STR      r7,[r1,#0x1c]
;;;1415        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
0009b0  7a07              LDRB     r7,[r0,#8]
0009b2  f890c009          LDRB     r12,[r0,#9]
0009b6  eb07270c          ADD      r7,r7,r12,LSL #8
0009ba  62cf              STR      r7,[r1,#0x2c]
;;;1416        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
0009bc  7a87              LDRB     r7,[r0,#0xa]
0009be  f890c00b          LDRB     r12,[r0,#0xb]
0009c2  eb07270c          ADD      r7,r7,r12,LSL #8
0009c6  618f              STR      r7,[r1,#0x18]
;;;1417        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
0009c8  7b07              LDRB     r7,[r0,#0xc]
0009ca  620f              STR      r7,[r1,#0x20]
;;;1418        		inv[i]._flags_tm=bps[i+20]._buff[7];
0009cc  7b47              LDRB     r7,[r0,#0xd]
0009ce  f8817046          STRB     r7,[r1,#0x46]
;;;1419        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
0009d2  7b87              LDRB     r7,[r0,#0xe]
0009d4  f890c00f          LDRB     r12,[r0,#0xf]
0009d8  eb07270c          ADD      r7,r7,r12,LSL #8
0009dc  628f              STR      r7,[r1,#0x28]
;;;1420        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
0009de  7c07              LDRB     r7,[r0,#0x10]
0009e0  f890c011          LDRB     r12,[r0,#0x11]
0009e4  eb07270c          ADD      r7,r7,r12,LSL #8
0009e8  624f              STR      r7,[r1,#0x24]
;;;1421   			inv[i]._cnt=0;
0009ea  708a              STRB     r2,[r1,#2]
;;;1422   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
0009ec  7c87              LDRB     r7,[r0,#0x12]
0009ee  f8817059          STRB     r7,[r1,#0x59]
;;;1423   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
0009f2  7cc7              LDRB     r7,[r0,#0x13]
0009f4  f881705a          STRB     r7,[r1,#0x5a]
;;;1424   			inv[i]._Pnom=bps[i+20]._buff[14]; 
0009f8  7d07              LDRB     r7,[r0,#0x14]
0009fa  f8817058          STRB     r7,[r1,#0x58]
;;;1425   			inv[i]._net_contr_en=bps[i+20]._buff[15];
0009fe  7d47              LDRB     r7,[r0,#0x15]
000a00  f881705b          STRB     r7,[r1,#0x5b]
;;;1426   			inv[i]._pwm_en=bps[i+20]._buff[16];  
000a04  7d87              LDRB     r7,[r0,#0x16]
000a06  f881705c          STRB     r7,[r1,#0x5c]
;;;1427   			inv[i]._phase_mode=bps[i+20]._buff[17];  
000a0a  7dc0              LDRB     r0,[r0,#0x17]
000a0c  f881005d          STRB     r0,[r1,#0x5d]
000a10  e018              B        |L1.2628|
                  |L1.2578|
;;;1428        		} 
;;;1429   		else 
;;;1430        		{
;;;1431         		inv[i]._Ii=0;
000a12  eb030043          ADD      r0,r3,r3,LSL #1
000a16  eb061040          ADD      r0,r6,r0,LSL #5
000a1a  61c2              STR      r2,[r0,#0x1c]
;;;1432   			inv[i]._Pio=0;
000a1c  62c2              STR      r2,[r0,#0x2c]
;;;1433   			inv[i]._Uio=0;
000a1e  6182              STR      r2,[r0,#0x18]
;;;1434        		inv[i]._Ti=0;
000a20  6202              STR      r2,[r0,#0x20]
;;;1435        		inv[i]._flags_tm=0; 
000a22  f8802046          STRB     r2,[r0,#0x46]
;;;1436        		inv[i]._Uil=0;
000a26  6242              STR      r2,[r0,#0x24]
;;;1437        		inv[i]._Uin=0;
000a28  6282              STR      r2,[r0,#0x28]
;;;1438   			inv[i]._cnt=25; 
000a2a  f04f0119          MOV      r1,#0x19
000a2e  7081              STRB     r1,[r0,#2]
;;;1439   			inv[i]._Uoutmin=0; 
000a30  f8802059          STRB     r2,[r0,#0x59]
;;;1440   			inv[i]._Uoutmax=0; 
000a34  f880205a          STRB     r2,[r0,#0x5a]
;;;1441   			inv[i]._Pnom=0; 
000a38  f8802058          STRB     r2,[r0,#0x58]
;;;1442   			inv[i]._net_contr_en=0;
000a3c  f880205b          STRB     r2,[r0,#0x5b]
;;;1443   			inv[i]._pwm_en=0;   
000a40  f880205c          STRB     r2,[r0,#0x5c]
                  |L1.2628|
000a44  f1030301          ADD      r3,r3,#1              ;1410
000a48  b2db              UXTB     r3,r3                 ;1410
                  |L1.2634|
000a4a  42a3              CMP      r3,r4                 ;1410
000a4c  db9c              BLT      |L1.2440|
                  |L1.2638|
;;;1444   			   
;;;1445        		}
;;;1446        	}
;;;1447      	}
;;;1448   #endif
;;;1449   
;;;1450   
;;;1451   #ifdef UKU_TELECORE2015
;;;1452   //вычисление параметров работы батареи
;;;1453   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;1454   li_bat._batStat=bsOK;
;;;1455   if(BAT_TYPE==1) //COSLIGHT
;;;1456   	{
;;;1457   	if(li_bat._batStat==bsOK)
;;;1458   		{
;;;1459   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;1460   
;;;1461   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;1462   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;1463   	
;;;1464   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;1465   		li_bat._soc=lakb[0]._s_o_c;
;;;1466   		li_bat._soh=lakb[0]._s_o_h;
;;;1467   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;1468   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;1469   		li_bat._rbt=lakb[0]._r_b_t;
;;;1470   		}
;;;1471   	else 
;;;1472   		{
;;;1473   		li_bat._Ub=bat[0]._Ub;
;;;1474   		li_bat._Ib=bat[0]._Ib/10;
;;;1475   		li_bat._Tb=bat[0]._Tb;
;;;1476   		}
;;;1477   
;;;1478   	if((li_bat._485Error)||(li_bat._canError))
;;;1479   		{
;;;1480   		li_bat._batStat=bsOFF;
;;;1481   		}
;;;1482   	else li_bat._batStat=bsOK;
;;;1483   	}
;;;1484   else if(BAT_TYPE==2) //SACRED SUN
;;;1485   	{
;;;1486   	}
;;;1487   else if(BAT_TYPE==3) //ZTT
;;;1488   	{
;;;1489   	if(li_bat._batStat==bsOK)
;;;1490   		{
;;;1491   
;;;1492   		}
;;;1493   	}
;;;1494   #endif
;;;1495   
;;;1496   
;;;1497   /*
;;;1498   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;1499   	{
;;;1500   
;;;1501   
;;;1502   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;1503   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;1504   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;1505   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;1506   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;1507   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;1508   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;1509   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;1510   
;;;1511   	tempSS=0;
;;;1512   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;1513   
;;;1514   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;1515   
;;;1516   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;1517   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;1518   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;1519   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;1520   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;1521   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;1522   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;1523   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;1524   
;;;1525   	tempSS=0;
;;;1526   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;1527   
;;;1528   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;1529   
;;;1530   
;;;1531   	}*/
;;;1532   
;;;1533   
;;;1534   
;;;1535   }
000a4e  e8bd8ffe          POP      {r1-r11,pc}
;;;1536   
                          ENDP

                  adc_init PROC
;;;1539   //-----------------------------------------------
;;;1540   void adc_init(void)
000a52  48ca              LDR      r0,|L1.3452|
;;;1541   {
;;;1542   
;;;1543   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
000a54  6841              LDR      r1,[r0,#4]
000a56  f4212140          BIC      r1,r1,#0xc0000
000a5a  f4412180          ORR      r1,r1,#0x40000
000a5e  6041              STR      r1,[r0,#4]
;;;1544   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
000a60  6841              LDR      r1,[r0,#4]
000a62  f4213140          BIC      r1,r1,#0x30000
000a66  f4413180          ORR      r1,r1,#0x10000
000a6a  6041              STR      r1,[r0,#4]
;;;1545   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
000a6c  6841              LDR      r1,[r0,#4]
000a6e  f4214140          BIC      r1,r1,#0xc000
000a72  f4414180          ORR      r1,r1,#0x4000
000a76  6041              STR      r1,[r0,#4]
;;;1546   
;;;1547   
;;;1548   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
000a78  6c41              LDR      r1,[r0,#0x44]
000a7a  f4212140          BIC      r1,r1,#0xc0000
000a7e  f4412100          ORR      r1,r1,#0x80000
000a82  6441              STR      r1,[r0,#0x44]
;;;1549   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
000a84  6c41              LDR      r1,[r0,#0x44]
000a86  f4213140          BIC      r1,r1,#0x30000
000a8a  f4413100          ORR      r1,r1,#0x20000
000a8e  6441              STR      r1,[r0,#0x44]
;;;1550   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
000a90  6c41              LDR      r1,[r0,#0x44]
000a92  f4214140          BIC      r1,r1,#0xc000
000a96  f4414100          ORR      r1,r1,#0x8000
000a9a  6441              STR      r1,[r0,#0x44]
;;;1551   
;;;1552   SET_REG(LPC_ADC->ADCR,0,24,3);
000a9c  48b8              LDR      r0,|L1.3456|
000a9e  6801              LDR      r1,[r0,#0]
000aa0  f02161e0          BIC      r1,r1,#0x7000000
000aa4  6001              STR      r1,[r0,#0]
;;;1553   
;;;1554   SET_REG(LPC_ADC->ADCR,1,21,1);
000aa6  6801              LDR      r1,[r0,#0]
000aa8  f4411100          ORR      r1,r1,#0x200000
000aac  6001              STR      r1,[r0,#0]
;;;1555   SET_REG(LPC_ADC->ADCR,0,16,1);
000aae  6801              LDR      r1,[r0,#0]
000ab0  f4213180          BIC      r1,r1,#0x10000
000ab4  6001              STR      r1,[r0,#0]
;;;1556   SET_REG(LPC_ADC->ADCR,1,8,8);
000ab6  6801              LDR      r1,[r0,#0]
000ab8  f421417f          BIC      r1,r1,#0xff00
000abc  f4417180          ORR      r1,r1,#0x100
000ac0  6001              STR      r1,[r0,#0]
;;;1557   
;;;1558   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;1559   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;1560   	
;;;1561   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;1562        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;1563        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;1564   
;;;1565   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
000ac2  f44f7180          MOV      r1,#0x100
000ac6  60c1              STR      r1,[r0,#0xc]
000ac8  48ae              LDR      r0,|L1.3460|
000aca  f44f0180          MOV      r1,#0x400000
000ace  6001              STR      r1,[r0,#0]
;;;1566   
;;;1567   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;1568   
;;;1569   
;;;1570   }
000ad0  4770              BX       lr
;;;1571   
                          ENDP

                  adc_drv7 PROC
;;;1572   //-----------------------------------------------
;;;1573   void adc_drv7(void) //(Uсети - постоянка)
000ad2  e92d41f0          PUSH     {r4-r8,lr}
;;;1574   {
;;;1575   //int temp_S;
;;;1576   //char i;
;;;1577   //signed short temp_SS;
;;;1578   
;;;1579   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
000ad6  4cac              LDR      r4,|L1.3464|
000ad8  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000ada  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
000adc  1a40              SUBS     r0,r0,r1
000ade  b200              SXTH     r0,r0
000ae0  f7fffffe          BL       abs_pal
000ae4  1da6              ADDS     r6,r4,#6
000ae6  8030              STRH     r0,[r6,#0]
;;;1580   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
000ae8  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000aea  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
000aec  1a40              SUBS     r0,r0,r1
000aee  b200              SXTH     r0,r0
000af0  f7fffffe          BL       abs_pal
000af4  8070              STRH     r0,[r6,#2]
;;;1581   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
000af6  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000af8  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
000afa  1a40              SUBS     r0,r0,r1
000afc  b200              SXTH     r0,r0
000afe  f7fffffe          BL       abs_pal
000b02  80b0              STRH     r0,[r6,#4]
;;;1582   
;;;1583   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;1584   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;1585   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;1586   
;;;1587   
;;;1588   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
000b04  f44f7196          MOV      r1,#0x12c
;;;1589   	{
;;;1590   	adc_result=adc_self_ch_buff[2];
000b08  f1a40534          SUB      r5,r4,#0x34
000b0c  4288              CMP      r0,r1                 ;1588
000b0e  da02              BGE      |L1.2838|
000b10  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000b12  82e8              STRH     r0,[r5,#0x16]
000b14  e00c              B        |L1.2864|
                  |L1.2838|
;;;1591   	} 
;;;1592   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
000b16  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
000b1a  4288              CMP      r0,r1
000b1c  da02              BGE      |L1.2852|
;;;1593   	{
;;;1594   	adc_result=adc_self_ch_buff[1];
000b1e  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000b20  82e8              STRH     r0,[r5,#0x16]
000b22  e005              B        |L1.2864|
                  |L1.2852|
;;;1595   	}
;;;1596   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
000b24  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
000b28  4288              CMP      r0,r1
000b2a  da01              BGE      |L1.2864|
;;;1597   	{
;;;1598   	adc_result=adc_self_ch_buff[0];
000b2c  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
000b2e  82e8              STRH     r0,[r5,#0x16]
                  |L1.2864|
;;;1599   	}
;;;1600       //adc_result=92;
;;;1601   
;;;1602   if(adc_ch_net)
000b30  78af              LDRB     r7,[r5,#2]  ; adc_ch_net
000b32  2600              MOVS     r6,#0
000b34  b32f              CBZ      r7,|L1.2946|
;;;1603   	{
;;;1604   
;;;1605   	main_power_buffer[0]+=(long)(adc_result);
000b36  4895              LDR      r0,|L1.3468|
000b38  f9b51016          LDRSH    r1,[r5,#0x16]  ; adc_result
000b3c  6802              LDR      r2,[r0,#0]  ; main_power_buffer
000b3e  440a              ADD      r2,r2,r1
000b40  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;1606   	main_power_buffer[1]+=(long)(adc_result);
000b42  6842              LDR      r2,[r0,#4]  ; main_power_buffer
000b44  440a              ADD      r2,r2,r1
000b46  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;1607   	main_power_buffer[2]+=(long)(adc_result);
000b48  6882              LDR      r2,[r0,#8]  ; main_power_buffer
000b4a  440a              ADD      r2,r2,r1
000b4c  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;1608   	main_power_buffer[3]+=(long)(adc_result);
000b4e  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
000b50  4411              ADD      r1,r1,r2
000b52  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;1609   
;;;1610   	adc_net_buff_cnt++;
000b54  8be9              LDRH     r1,[r5,#0x1e]  ; adc_net_buff_cnt
000b56  f1010101          ADD      r1,r1,#1
000b5a  b209              SXTH     r1,r1
000b5c  83e9              STRH     r1,[r5,#0x1e]
;;;1611   	if(adc_net_buff_cnt>=0x1000)
000b5e  f5b15f80          CMP      r1,#0x1000
000b62  db00              BLT      |L1.2918|
;;;1612   		{
;;;1613   		adc_net_buff_cnt=0;
000b64  83ee              STRH     r6,[r5,#0x1e]
                  |L1.2918|
;;;1614   		}
;;;1615   	if((adc_net_buff_cnt&0x03ff)==0)
000b66  f9b5101e          LDRSH    r1,[r5,#0x1e]  ; adc_net_buff_cnt
000b6a  058a              LSLS     r2,r1,#22
000b6c  d131              BNE      |L1.3026|
;;;1616   		{
;;;1617   		#ifdef UKU_220
;;;1618   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;1619   		#else
;;;1620   		#ifdef UKU_220_V2
;;;1621   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;1622   		#else
;;;1623   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
000b6e  ea4f21a1          ASR      r1,r1,#10
000b72  f8502021          LDR      r2,[r0,r1,LSL #2]
000b76  ea4f2222          ASR      r2,r2,#8
000b7a  82aa              STRH     r2,[r5,#0x14]
;;;1624   		#endif
;;;1625   		#endif
;;;1626   		main_power_buffer[adc_net_buff_cnt>>10]=0;
000b7c  f8406021          STR      r6,[r0,r1,LSL #2]
000b80  e027              B        |L1.3026|
                  |L1.2946|
;;;1627   		}
;;;1628   
;;;1629   
;;;1630   	} 
;;;1631   else if(!adc_ch_net)
;;;1632   	{
;;;1633   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
000b82  4883              LDR      r0,|L1.3472|
000b84  78ec              LDRB     r4,[r5,#3]  ; adc_ch
000b86  792a              LDRB     r2,[r5,#4]  ; adc_ch_cnt
000b88  eb001384          ADD      r3,r0,r4,LSL #6
000b8c  f9b51016          LDRSH    r1,[r5,#0x16]  ; adc_result
000b90  f8431022          STR      r1,[r3,r2,LSL #2]
;;;1634   	
;;;1635   	if((adc_ch_cnt&0x03)==0)
000b94  0790              LSLS     r0,r2,#30
000b96  d10f              BNE      |L1.3000|
;;;1636   		{
;;;1637   		long temp_L;
;;;1638   		char i;
;;;1639   		temp_L=0;
000b98  4601              MOV      r1,r0
                  |L1.2970|
;;;1640   		for(i=0;i<16;i++)
;;;1641   			{
;;;1642   			temp_L+=adc_buff[adc_ch][i];
000b9a  f853c020          LDR      r12,[r3,r0,LSL #2]
000b9e  4461              ADD      r1,r1,r12
000ba0  f1000001          ADD      r0,r0,#1              ;1640
000ba4  b2c0              UXTB     r0,r0                 ;1640
000ba6  2810              CMP      r0,#0x10              ;1640
000ba8  d3f7              BCC      |L1.2970|
;;;1643   			}
;;;1644   		adc_buff_[adc_ch]= (short)(temp_L>>4);
000baa  ea4f1021          ASR      r0,r1,#4
000bae  4977              LDR      r1,|L1.3468|
000bb0  f1a10120          SUB      r1,r1,#0x20
000bb4  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.3000|
;;;1645   
;;;1646   		//adc_buff_[3]=346;
;;;1647   		}
;;;1648   	if(++adc_ch>=16) 
000bb8  1c64              ADDS     r4,r4,#1
000bba  b2e0              UXTB     r0,r4
000bbc  70e8              STRB     r0,[r5,#3]
000bbe  2810              CMP      r0,#0x10
000bc0  d307              BCC      |L1.3026|
;;;1649   		{
;;;1650   		adc_ch=0;
000bc2  70ee              STRB     r6,[r5,#3]
;;;1651   		adc_ch_cnt++;
000bc4  f1020201          ADD      r2,r2,#1
000bc8  b2d0              UXTB     r0,r2
000bca  7128              STRB     r0,[r5,#4]
;;;1652   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
000bcc  2810              CMP      r0,#0x10
000bce  d300              BCC      |L1.3026|
000bd0  712e              STRB     r6,[r5,#4]
                  |L1.3026|
;;;1653   		}
;;;1654   	}
;;;1655   
;;;1656   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;1657   
;;;1658   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;1659   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;1660   /*
;;;1661   	{
;;;1662   	if((adc_cnt1&0x03)==0)
;;;1663   		{
;;;1664   		temp_S=0;
;;;1665   		for(i=0;i<16;i++)
;;;1666   			{
;;;1667   			temp_S+=adc_buff[adc_ch][i];
;;;1668   			} 
;;;1669            	adc_buff_[adc_ch]=temp_S>>4;
;;;1670             }
;;;1671   	}*/
;;;1672   
;;;1673   
;;;1674   		  
;;;1675   
;;;1676   adc_self_ch_cnt=0;
000bd2  706e              STRB     r6,[r5,#1]
;;;1677   
;;;1678   adc_ch_net++;
000bd4  f1070701          ADD      r7,r7,#1
;;;1679   adc_ch_net&=1;
000bd8  f0070001          AND      r0,r7,#1
000bdc  70a8              STRB     r0,[r5,#2]
;;;1680   
;;;1681   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;1682   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;1683   
;;;1684   if(adc_ch_net)
;;;1685   	{
;;;1686   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;1687   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;1688   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
000bde  4a68              LDR      r2,|L1.3456|
000be0  b130              CBZ      r0,|L1.3056|
000be2  6810              LDR      r0,[r2,#0]
000be4  f02000ff          BIC      r0,r0,#0xff
000be8  f1000004          ADD      r0,r0,#4
000bec  6010              STR      r0,[r2,#0]
000bee  e03d              B        |L1.3180|
                  |L1.3056|
;;;1689   	}
;;;1690   else
;;;1691   	{
;;;1692   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;1693   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;1694   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
000bf0  78e9              LDRB     r1,[r5,#3]  ; adc_ch
000bf2  0708              LSLS     r0,r1,#28
000bf4  d406              BMI      |L1.3076|
000bf6  6810              LDR      r0,[r2,#0]
000bf8  f02000ff          BIC      r0,r0,#0xff
000bfc  f1000001          ADD      r0,r0,#1
000c00  6010              STR      r0,[r2,#0]
000c02  e005              B        |L1.3088|
                  |L1.3076|
;;;1695   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
000c04  6810              LDR      r0,[r2,#0]
000c06  f02000ff          BIC      r0,r0,#0xff
000c0a  f1000002          ADD      r0,r0,#2
000c0e  6010              STR      r0,[r2,#0]
                  |L1.3088|
;;;1696   
;;;1697   
;;;1698   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
000c10  4860              LDR      r0,|L1.3476|
000c12  6803              LDR      r3,[r0,#0]
000c14  f0435380          ORR      r3,r3,#0x10000000
000c18  6003              STR      r3,[r0,#0]
;;;1699   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
000c1a  6a03              LDR      r3,[r0,#0x20]
000c1c  f0434380          ORR      r3,r3,#0x40000000
000c20  6203              STR      r3,[r0,#0x20]
;;;1700   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
000c22  6e03              LDR      r3,[r0,#0x60]
000c24  f0436380          ORR      r3,r3,#0x4000000
000c28  6603              STR      r3,[r0,#0x60]
;;;1701   
;;;1702   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
000c2a  07cb              LSLS     r3,r1,#31
000c2c  d00a              BEQ      |L1.3140|
;;;1703   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
000c2e  6943              LDR      r3,[r0,#0x14]
000c30  f0435380          ORR      r3,r3,#0x10000000
000c34  6143              STR      r3,[r0,#0x14]
                  |L1.3126|
;;;1704   
;;;1705   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
000c36  078b              LSLS     r3,r1,#30
000c38  d409              BMI      |L1.3150|
000c3a  6b43              LDR      r3,[r0,#0x34]
000c3c  f0234380          BIC      r3,r3,#0x40000000
000c40  6343              STR      r3,[r0,#0x34]
000c42  e008              B        |L1.3158|
                  |L1.3140|
000c44  6943              LDR      r3,[r0,#0x14]         ;1702
000c46  f0235380          BIC      r3,r3,#0x10000000     ;1702
000c4a  6143              STR      r3,[r0,#0x14]         ;1702
000c4c  e7f3              B        |L1.3126|
                  |L1.3150|
;;;1706   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
000c4e  6b43              LDR      r3,[r0,#0x34]
000c50  f0434380          ORR      r3,r3,#0x40000000
000c54  6343              STR      r3,[r0,#0x34]
                  |L1.3158|
;;;1707   
;;;1708   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
000c56  0749              LSLS     r1,r1,#29
000c58  d404              BMI      |L1.3172|
000c5a  6f41              LDR      r1,[r0,#0x74]
000c5c  f0216180          BIC      r1,r1,#0x4000000
000c60  6741              STR      r1,[r0,#0x74]
000c62  e003              B        |L1.3180|
                  |L1.3172|
;;;1709   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
000c64  6f41              LDR      r1,[r0,#0x74]
000c66  f0416180          ORR      r1,r1,#0x4000000
000c6a  6741              STR      r1,[r0,#0x74]
                  |L1.3180|
;;;1710   	}
;;;1711   	
;;;1712   
;;;1713   
;;;1714   
;;;1715   LPC_ADC->ADCR |=  (1<<24);
000c6c  6810              LDR      r0,[r2,#0]
000c6e  f0407080          ORR      r0,r0,#0x1000000
000c72  6010              STR      r0,[r2,#0]
                  |L1.3188|
;;;1716   
;;;1717   }
000c74  e8bd81f0          POP      {r4-r8,pc}
;;;1718   
                          ENDP

                  avg_hndl PROC
;;;1975   //-----------------------------------------------
;;;1976   void avg_hndl(void)
000c78  bf00              NOP      
;;;1977   { 
;;;1978   
;;;1979   
;;;1980   avg_hndl_end:
;;;1981   __nop();  
;;;1982   }
000c7a  4770              BX       lr
;;;1983   
                          ENDP

                  u_out_reg_hndl PROC
;;;1984   //-----------------------------------------------
;;;1985   void u_out_reg_hndl(void)
000c7c  4770              BX       lr
;;;1986   { 
;;;1987   
;;;1988   }
;;;1989   
                          ENDP

                  rele_av_hndl PROC
;;;2002   //-----------------------------------------------
;;;2003   void rele_av_hndl(void)
000c7e  4770              BX       lr
;;;2004   {
;;;2005   
;;;2006   }
;;;2007   
                          ENDP

                  rele_hndl PROC
;;;2008   //*************-----------------------------------------------
;;;2009   void rele_hndl(void)
000c80  4770              BX       lr
;;;2010   {
;;;2011   
;;;2012   
;;;2013   }
;;;2014   
                          ENDP

                  avt_hndl PROC
;;;2215   //-----------------------------------------------
;;;2216   void avt_hndl(void)
000c82  b570              PUSH     {r4-r6,lr}
;;;2217   {
;;;2218   char i;
;;;2219   for(i=0;i<12;i++)
000c84  f04f0000          MOV      r0,#0
;;;2220   	{
;;;2221   	if(eb2_data_short[6]&(1<<i))
000c88  4943              LDR      r1,|L1.3480|
;;;2222   		{
;;;2223   		avt_stat[i]=avtON;
000c8a  4d44              LDR      r5,|L1.3484|
000c8c  f04f0401          MOV      r4,#1                 ;2221
000c90  f9b1200c          LDRSH    r2,[r1,#0xc]          ;2221
000c94  4603              MOV      r3,r0                 ;2219
                  |L1.3222|
000c96  fa04f100          LSL      r1,r4,r0              ;2221
000c9a  420a              TST      r2,r1                 ;2221
000c9c  d001              BEQ      |L1.3234|
000c9e  542c              STRB     r4,[r5,r0]
000ca0  e000              B        |L1.3236|
                  |L1.3234|
;;;2224   		}
;;;2225   	else avt_stat[i]=avtOFF;
000ca2  542b              STRB     r3,[r5,r0]
                  |L1.3236|
000ca4  f1000001          ADD      r0,r0,#1              ;2219
000ca8  b2c0              UXTB     r0,r0                 ;2219
000caa  280c              CMP      r0,#0xc               ;2219
000cac  d3f3              BCC      |L1.3222|
;;;2226   	}
;;;2227   
;;;2228   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
000cae  4e3c              LDR      r6,|L1.3488|
000cb0  7828              LDRB     r0,[r5,#0]  ; avt_stat
000cb2  4c3c              LDR      r4,|L1.3492|
000cb4  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
000cb6  4281              CMP      r1,r0
000cb8  d00b              BEQ      |L1.3282|
000cba  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000cbe  2901              CMP      r1,#1
000cc0  db07              BLT      |L1.3282|
;;;2229   	{
;;;2230   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
000cc2  2801              CMP      r0,#1
000cc4  d053              BEQ      |L1.3438|
;;;2231   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
000cc6  2300              MOVS     r3,#0
000cc8  2201              MOVS     r2,#1
000cca  210b              MOVS     r1,#0xb
000ccc  a036              ADR      r0,|L1.3496|
000cce  f7fffffe          BL       snmp_trap_send
                  |L1.3282|
;;;2232   	}
;;;2233   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
000cd2  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
000cd4  7868              LDRB     r0,[r5,#1]  ; avt_stat
000cd6  4281              CMP      r1,r0
000cd8  d00b              BEQ      |L1.3314|
000cda  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000cde  2902              CMP      r1,#2
000ce0  db07              BLT      |L1.3314|
;;;2234   	{
;;;2235   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
000ce2  2801              CMP      r0,#1
000ce4  d044              BEQ      |L1.3440|
;;;2236   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
000ce6  2300              MOVS     r3,#0
000ce8  2202              MOVS     r2,#2
000cea  210b              MOVS     r1,#0xb
000cec  a033              ADR      r0,|L1.3516|
000cee  f7fffffe          BL       snmp_trap_send
                  |L1.3314|
;;;2237   	}
;;;2238   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
000cf2  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
000cf4  78a8              LDRB     r0,[r5,#2]  ; avt_stat
000cf6  4281              CMP      r1,r0
000cf8  d00b              BEQ      |L1.3346|
000cfa  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000cfe  2903              CMP      r1,#3
000d00  db07              BLT      |L1.3346|
;;;2239   	{
;;;2240   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
000d02  2801              CMP      r0,#1
000d04  d035              BEQ      |L1.3442|
;;;2241   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
000d06  2300              MOVS     r3,#0
000d08  2203              MOVS     r2,#3
000d0a  210b              MOVS     r1,#0xb
000d0c  a030              ADR      r0,|L1.3536|
000d0e  f7fffffe          BL       snmp_trap_send
                  |L1.3346|
;;;2242   	}
;;;2243   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
000d12  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
000d14  78e8              LDRB     r0,[r5,#3]  ; avt_stat
000d16  4281              CMP      r1,r0
000d18  d00b              BEQ      |L1.3378|
000d1a  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000d1e  2904              CMP      r1,#4
000d20  db07              BLT      |L1.3378|
;;;2244   	{
;;;2245   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
000d22  2801              CMP      r0,#1
000d24  d072              BEQ      |L1.3596|
;;;2246   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
000d26  2300              MOVS     r3,#0
000d28  2204              MOVS     r2,#4
000d2a  210b              MOVS     r1,#0xb
000d2c  a02d              ADR      r0,|L1.3556|
000d2e  f7fffffe          BL       snmp_trap_send
                  |L1.3378|
;;;2247   	}
;;;2248   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
000d32  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
000d34  7928              LDRB     r0,[r5,#4]  ; avt_stat
000d36  4281              CMP      r1,r0
000d38  d00b              BEQ      |L1.3410|
000d3a  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000d3e  2905              CMP      r1,#5
000d40  db07              BLT      |L1.3410|
;;;2249   	{
;;;2250   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
000d42  2801              CMP      r0,#1
000d44  d07e              BEQ      |L1.3652|
;;;2251   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
000d46  2300              MOVS     r3,#0
000d48  2205              MOVS     r2,#5
000d4a  210b              MOVS     r1,#0xb
000d4c  a02a              ADR      r0,|L1.3576|
000d4e  f7fffffe          BL       snmp_trap_send
                  |L1.3410|
;;;2252   	}
;;;2253   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
000d52  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
000d54  7968              LDRB     r0,[r5,#5]  ; avt_stat
000d56  4281              CMP      r1,r0
000d58  d05c              BEQ      |L1.3604|
000d5a  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000d5e  2906              CMP      r1,#6
000d60  db58              BLT      |L1.3604|
;;;2254   	{
;;;2255   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
000d62  2801              CMP      r0,#1
000d64  d06f              BEQ      |L1.3654|
;;;2256   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
000d66  2300              MOVS     r3,#0
000d68  2206              MOVS     r2,#6
000d6a  210b              MOVS     r1,#0xb
000d6c  e04f              B        |L1.3598|
                  |L1.3438|
000d6e  e08e              B        |L1.3726|
                  |L1.3440|
000d70  e094              B        |L1.3740|
                  |L1.3442|
000d72  e09a              B        |L1.3754|
                  |L1.3444|
                          DCD      NUMINV
                  |L1.3448|
                          DCD      inv
                  |L1.3452|
                          DCD      0x4002c000
                  |L1.3456|
                          DCD      0x40034000
                  |L1.3460|
                          DCD      0xe000e100
                  |L1.3464|
                          DCD      ||area_number.30||+0x34
                  |L1.3468|
                          DCD      ||.bss||+0x420
                  |L1.3472|
                          DCD      ||.bss||
                  |L1.3476|
                          DCD      0x2009c000
                  |L1.3480|
                          DCD      eb2_data_short
                  |L1.3484|
                          DCD      avt_stat
                  |L1.3488|
                          DCD      avt_stat_old
                  |L1.3492|
                          DCD      NUMAVT
                  |L1.3496|
000da8  4176746f          DCB      "Avtomat #1 is OFF",0
000dac  6d617420
000db0  23312069
000db4  73204f46
000db8  4600    
000dba  00                DCB      0
000dbb  00                DCB      0
                  |L1.3516|
000dbc  4176746f          DCB      "Avtomat #2 is OFF",0
000dc0  6d617420
000dc4  23322069
000dc8  73204f46
000dcc  4600    
000dce  00                DCB      0
000dcf  00                DCB      0
                  |L1.3536|
000dd0  4176746f          DCB      "Avtomat #3 is OFF",0
000dd4  6d617420
000dd8  23332069
000ddc  73204f46
000de0  4600    
000de2  00                DCB      0
000de3  00                DCB      0
                  |L1.3556|
000de4  4176746f          DCB      "Avtomat #4 is OFF",0
000de8  6d617420
000dec  23342069
000df0  73204f46
000df4  4600    
000df6  00                DCB      0
000df7  00                DCB      0
                  |L1.3576|
000df8  4176746f          DCB      "Avtomat #5 is OFF",0
000dfc  6d617420
000e00  23352069
000e04  73204f46
000e08  4600    
000e0a  00                DCB      0
000e0b  00                DCB      0
                  |L1.3596|
000e0c  e054              B        |L1.3768|
                  |L1.3598|
000e0e  a0fe              ADR      r0,|L1.4616|
000e10  f7fffffe          BL       snmp_trap_send
                  |L1.3604|
;;;2257   	}
;;;2258   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
000e14  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
000e16  79a8              LDRB     r0,[r5,#6]  ; avt_stat
000e18  4281              CMP      r1,r0
000e1a  d00b              BEQ      |L1.3636|
000e1c  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000e20  2907              CMP      r1,#7
000e22  db07              BLT      |L1.3636|
;;;2259   	{
;;;2260   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
000e24  2801              CMP      r0,#1
000e26  d05c              BEQ      |L1.3810|
;;;2261   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
000e28  2300              MOVS     r3,#0
000e2a  2207              MOVS     r2,#7
000e2c  210b              MOVS     r1,#0xb
000e2e  a0fb              ADR      r0,|L1.4636|
000e30  f7fffffe          BL       snmp_trap_send
                  |L1.3636|
;;;2262   	}
;;;2263   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
000e34  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
000e36  79e8              LDRB     r0,[r5,#7]  ; avt_stat
000e38  4281              CMP      r1,r0
000e3a  d00e              BEQ      |L1.3674|
000e3c  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000e40  2908              CMP      r1,#8
000e42  e001              B        |L1.3656|
                  |L1.3652|
000e44  e03f              B        |L1.3782|
                  |L1.3654|
000e46  e045              B        |L1.3796|
                  |L1.3656|
000e48  db07              BLT      |L1.3674|
;;;2264   	{
;;;2265   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
000e4a  2801              CMP      r0,#1
000e4c  d050              BEQ      |L1.3824|
;;;2266   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
000e4e  2300              MOVS     r3,#0
000e50  2208              MOVS     r2,#8
000e52  210b              MOVS     r1,#0xb
000e54  a0f6              ADR      r0,|L1.4656|
000e56  f7fffffe          BL       snmp_trap_send
                  |L1.3674|
;;;2267   	}
;;;2268   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
000e5a  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
000e5c  7a28              LDRB     r0,[r5,#8]  ; avt_stat
000e5e  4281              CMP      r1,r0
000e60  d00b              BEQ      |L1.3706|
000e62  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
000e66  2909              CMP      r1,#9
000e68  db07              BLT      |L1.3706|
;;;2269   	{
;;;2270   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
000e6a  2801              CMP      r0,#1
000e6c  d047              BEQ      |L1.3838|
;;;2271   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
000e6e  2300              MOVS     r3,#0
000e70  2209              MOVS     r2,#9
000e72  210b              MOVS     r1,#0xb
000e74  a0f3              ADR      r0,|L1.4676|
000e76  f7fffffe          BL       snmp_trap_send
                  |L1.3706|
;;;2272   	}
;;;2273   
;;;2274   for(i=0;i<12;i++)
000e7a  f04f0000          MOV      r0,#0
                  |L1.3710|
;;;2275   	{
;;;2276   	avt_stat_old[i]=avt_stat[i];
000e7e  5c29              LDRB     r1,[r5,r0]
000e80  5431              STRB     r1,[r6,r0]
000e82  f1000001          ADD      r0,r0,#1              ;2274
000e86  b2c0              UXTB     r0,r0                 ;2274
000e88  280c              CMP      r0,#0xc               ;2274
000e8a  d3f8              BCC      |L1.3710|
;;;2277   	}
;;;2278   }
000e8c  bd70              POP      {r4-r6,pc}
                  |L1.3726|
000e8e  2301              MOVS     r3,#1                 ;2230
000e90  461a              MOV      r2,r3                 ;2230
000e92  210b              MOVS     r1,#0xb               ;2230
000e94  a0f0              ADR      r0,|L1.4696|
000e96  f7fffffe          BL       snmp_trap_send
000e9a  e71a              B        |L1.3282|
                  |L1.3740|
000e9c  2301              MOVS     r3,#1                 ;2235
000e9e  2202              MOVS     r2,#2                 ;2235
000ea0  210b              MOVS     r1,#0xb               ;2235
000ea2  a0f2              ADR      r0,|L1.4716|
000ea4  f7fffffe          BL       snmp_trap_send
000ea8  e723              B        |L1.3314|
                  |L1.3754|
000eaa  2301              MOVS     r3,#1                 ;2240
000eac  2203              MOVS     r2,#3                 ;2240
000eae  210b              MOVS     r1,#0xb               ;2240
000eb0  a0f3              ADR      r0,|L1.4736|
000eb2  f7fffffe          BL       snmp_trap_send
000eb6  e72c              B        |L1.3346|
                  |L1.3768|
000eb8  2301              MOVS     r3,#1                 ;2245
000eba  2204              MOVS     r2,#4                 ;2245
000ebc  210b              MOVS     r1,#0xb               ;2245
000ebe  a0f5              ADR      r0,|L1.4756|
000ec0  f7fffffe          BL       snmp_trap_send
000ec4  e735              B        |L1.3378|
                  |L1.3782|
000ec6  2301              MOVS     r3,#1                 ;2250
000ec8  2205              MOVS     r2,#5                 ;2250
000eca  210b              MOVS     r1,#0xb               ;2250
000ecc  a0f6              ADR      r0,|L1.4776|
000ece  f7fffffe          BL       snmp_trap_send
000ed2  e73e              B        |L1.3410|
                  |L1.3796|
000ed4  2301              MOVS     r3,#1                 ;2255
000ed6  2206              MOVS     r2,#6                 ;2255
000ed8  210b              MOVS     r1,#0xb               ;2255
000eda  a0f8              ADR      r0,|L1.4796|
000edc  f7fffffe          BL       snmp_trap_send
000ee0  e798              B        |L1.3604|
                  |L1.3810|
000ee2  2301              MOVS     r3,#1                 ;2260
000ee4  2207              MOVS     r2,#7                 ;2260
000ee6  210b              MOVS     r1,#0xb               ;2260
000ee8  a0f9              ADR      r0,|L1.4816|
000eea  f7fffffe          BL       snmp_trap_send
000eee  e7a1              B        |L1.3636|
                  |L1.3824|
000ef0  2301              MOVS     r3,#1                 ;2265
000ef2  2208              MOVS     r2,#8                 ;2265
000ef4  210b              MOVS     r1,#0xb               ;2265
000ef6  a0fb              ADR      r0,|L1.4836|
000ef8  f7fffffe          BL       snmp_trap_send
000efc  e7ad              B        |L1.3674|
                  |L1.3838|
000efe  2301              MOVS     r3,#1                 ;2270
000f00  2209              MOVS     r2,#9                 ;2270
000f02  210b              MOVS     r1,#0xb               ;2270
000f04  a0fc              ADR      r0,|L1.4856|
000f06  f7fffffe          BL       snmp_trap_send
000f0a  e7b6              B        |L1.3706|
;;;2279   
                          ENDP

                  overload_hndl PROC
;;;3020   //-----------------------------------------------
;;;3021   void overload_hndl(void)
000f0c  b430              PUSH     {r4,r5}
;;;3022   {
;;;3023   
;;;3024   if(main_1Hz_cnt<30)return;
000f0e  48ff              LDR      r0,|L1.4876|
000f10  f9b00000          LDRSH    r0,[r0,#0]  ; main_1Hz_cnt
000f14  281e              CMP      r0,#0x1e
000f16  db2e              BLT      |L1.3958|
;;;3025   
;;;3026   if((out_U<UOUT)&&((UOUT-out_U)>50))
000f18  48fd              LDR      r0,|L1.4880|
;;;3027   	{
;;;3028   	if(overloadHndlCnt<(TZAS*10))
000f1a  4bff              LDR      r3,|L1.4888|
000f1c  f9b02000          LDRSH    r2,[r0,#0]            ;3026  ; out_U
000f20  48fc              LDR      r0,|L1.4884|
000f22  f9b01000          LDRSH    r1,[r0,#0]            ;3026  ; UOUT
000f26  f9b30000          LDRSH    r0,[r3,#0]
000f2a  428a              CMP      r2,r1                 ;3026
000f2c  da15              BGE      |L1.3930|
000f2e  1a8c              SUBS     r4,r1,r2              ;3026
000f30  2c32              CMP      r4,#0x32              ;3026
000f32  dd12              BLE      |L1.3930|
000f34  49f9              LDR      r1,|L1.4892|
000f36  f9b11000          LDRSH    r1,[r1,#0]  ; TZAS
000f3a  eb010181          ADD      r1,r1,r1,LSL #2
000f3e  ebb00f41          CMP      r0,r1,LSL #1
000f42  da18              BGE      |L1.3958|
;;;3029   		{
;;;3030   		overloadHndlCnt++;
000f44  f1000001          ADD      r0,r0,#1
000f48  b200              SXTH     r0,r0
000f4a  8018              STRH     r0,[r3,#0]
;;;3031   		if(overloadHndlCnt==(TZAS*10))
000f4c  ebb00f41          CMP      r0,r1,LSL #1
000f50  d111              BNE      |L1.3958|
;;;3032   			{
;;;3033   			avar_overload_hndl(1);
000f52  bc30              POP      {r4,r5}
000f54  2001              MOVS     r0,#1
000f56  f7ffbffe          B.W      avar_overload_hndl
                  |L1.3930|
;;;3034   			}
;;;3035   		}
;;;3036   	}
;;;3037   else if(out_U>(UOUT-20))
000f5a  3914              SUBS     r1,r1,#0x14
000f5c  428a              CMP      r2,r1
000f5e  dd0a              BLE      |L1.3958|
;;;3038   	{
;;;3039   	if(overloadHndlCnt)
000f60  2800              CMP      r0,#0
000f62  d008              BEQ      |L1.3958|
;;;3040   		{
;;;3041   		overloadHndlCnt--;
000f64  f1a00001          SUB      r0,r0,#1
000f68  b200              SXTH     r0,r0
000f6a  8018              STRH     r0,[r3,#0]
;;;3042   		if(overloadHndlCnt==0)
000f6c  2800              CMP      r0,#0
000f6e  d102              BNE      |L1.3958|
;;;3043   			{
;;;3044   			avar_overload_hndl(0);
000f70  bc30              POP      {r4,r5}
000f72  f7ffbffe          B.W      avar_overload_hndl
                  |L1.3958|
;;;3045   			}
;;;3046   		}
;;;3047   	}
;;;3048   
;;;3049   }
000f76  bc30              POP      {r4,r5}
000f78  4770              BX       lr
;;;3050   
                          ENDP

                  u_avar_hndl PROC
;;;3051   //-----------------------------------------------
;;;3052   void u_avar_hndl(void)
000f7a  e92d41f0          PUSH     {r4-r8,lr}
;;;3053   {
;;;3054   
;;;3055   if(main_1Hz_cnt<10)return;
000f7e  48e3              LDR      r0,|L1.4876|
000f80  f9b00000          LDRSH    r0,[r0,#0]  ; main_1Hz_cnt
000f84  280a              CMP      r0,#0xa
000f86  db7d              BLT      |L1.4228|
;;;3056   
;;;3057   if(out_U>UOUTMAX)
000f88  4ee1              LDR      r6,|L1.4880|
000f8a  48e5              LDR      r0,|L1.4896|
;;;3058   	{
;;;3059   	if(uAvarHndlOutUMaxCnt<(10*TZAS))
000f8c  4fe5              LDR      r7,|L1.4900|
000f8e  f9b61000          LDRSH    r1,[r6,#0]            ;3057  ; out_U
000f92  f9b02000          LDRSH    r2,[r0,#0]            ;3057  ; UOUTMAX
000f96  f9b70000          LDRSH    r0,[r7,#0]
000f9a  2500              MOVS     r5,#0
000f9c  4cdf              LDR      r4,|L1.4892|
000f9e  4291              CMP      r1,r2                 ;3057
000fa0  dd17              BLE      |L1.4050|
000fa2  f9b42000          LDRSH    r2,[r4,#0]  ; TZAS
000fa6  eb020382          ADD      r3,r2,r2,LSL #2
000faa  ebb00f43          CMP      r0,r3,LSL #1
000fae  da0a              BGE      |L1.4038|
;;;3060   		{
;;;3061   		uAvarHndlOutUMaxCnt++;
000fb0  f1000001          ADD      r0,r0,#1
000fb4  b200              SXTH     r0,r0
000fb6  8038              STRH     r0,[r7,#0]
;;;3062   		if(uAvarHndlOutUMaxCnt>=(10*TZAS))
000fb8  ebb00f43          CMP      r0,r3,LSL #1
000fbc  db15              BLT      |L1.4074|
;;;3063   			{
;;;3064   			avar_u_out_hndl(1,out_U);
000fbe  2001              MOVS     r0,#1
000fc0  f7fffffe          BL       avar_u_out_hndl
000fc4  e011              B        |L1.4074|
                  |L1.4038|
;;;3065   			}
;;;3066   		}
;;;3067   	else uAvarHndlOutUMaxCnt=(10*TZAS);
000fc6  eb020082          ADD      r0,r2,r2,LSL #2
000fca  ea4f0040          LSL      r0,r0,#1
000fce  8038              STRH     r0,[r7,#0]
000fd0  e00b              B        |L1.4074|
                  |L1.4050|
;;;3068   	}
;;;3069   else 
;;;3070   	{
;;;3071   	if(uAvarHndlOutUMaxCnt>0)
000fd2  2800              CMP      r0,#0
000fd4  dd08              BLE      |L1.4072|
;;;3072   		{
;;;3073   		uAvarHndlOutUMaxCnt--;
000fd6  f1a00001          SUB      r0,r0,#1
000fda  b200              SXTH     r0,r0
000fdc  8038              STRH     r0,[r7,#0]
;;;3074   		if(uAvarHndlOutUMaxCnt==0)
000fde  b920              CBNZ     r0,|L1.4074|
;;;3075   			{
;;;3076   			avar_u_out_hndl(0,out_U);
000fe0  2000              MOVS     r0,#0
000fe2  f7fffffe          BL       avar_u_out_hndl
000fe6  e000              B        |L1.4074|
                  |L1.4072|
;;;3077   			}
;;;3078   		}
;;;3079   	else uAvarHndlOutUMaxCnt=0;
000fe8  803d              STRH     r5,[r7,#0]
                  |L1.4074|
;;;3080   	}
;;;3081   
;;;3082   if(out_U<UOUTMIN)
000fea  48cf              LDR      r0,|L1.4904|
000fec  f9b61000          LDRSH    r1,[r6,#0]  ; out_U
;;;3083   	{
;;;3084   	if(uAvarHndlOutUMinCnt<(10*TZAS))
000ff0  4ece              LDR      r6,|L1.4908|
000ff2  f9b00000          LDRSH    r0,[r0,#0]            ;3082  ; UOUTMIN
000ff6  4281              CMP      r1,r0                 ;3082
000ff8  da19              BGE      |L1.4142|
000ffa  f9b40000          LDRSH    r0,[r4,#0]  ; TZAS
000ffe  f9b62000          LDRSH    r2,[r6,#0]  ; uAvarHndlOutUMinCnt
001002  eb000380          ADD      r3,r0,r0,LSL #2
001006  ebb20f43          CMP      r2,r3,LSL #1
00100a  da0a              BGE      |L1.4130|
;;;3085   		{
;;;3086   		uAvarHndlOutUMinCnt++;
00100c  f1020201          ADD      r2,r2,#1
001010  b210              SXTH     r0,r2
001012  8030              STRH     r0,[r6,#0]
;;;3087   		if(uAvarHndlOutUMinCnt>=(10*TZAS))
001014  ebb00f43          CMP      r0,r3,LSL #1
001018  db17              BLT      |L1.4170|
;;;3088   			{
;;;3089   			avar_u_out_hndl(2,out_U);
00101a  2002              MOVS     r0,#2
00101c  f7fffffe          BL       avar_u_out_hndl
001020  e013              B        |L1.4170|
                  |L1.4130|
;;;3090   			}
;;;3091   		}
;;;3092   	else uAvarHndlOutUMinCnt=(10*TZAS);
001022  eb000080          ADD      r0,r0,r0,LSL #2
001026  ea4f0040          LSL      r0,r0,#1
00102a  8030              STRH     r0,[r6,#0]
00102c  e00d              B        |L1.4170|
                  |L1.4142|
;;;3093   	}
;;;3094   else 
;;;3095   	{
;;;3096   	if(uAvarHndlOutUMinCnt>0)
00102e  f9b60000          LDRSH    r0,[r6,#0]  ; uAvarHndlOutUMinCnt
001032  2800              CMP      r0,#0
001034  dd08              BLE      |L1.4168|
;;;3097   		{
;;;3098   		uAvarHndlOutUMinCnt--;
001036  f1a00001          SUB      r0,r0,#1
00103a  b200              SXTH     r0,r0
00103c  8030              STRH     r0,[r6,#0]
;;;3099   		if(uAvarHndlOutUMinCnt==0)
00103e  b920              CBNZ     r0,|L1.4170|
;;;3100   			{
;;;3101   			avar_u_out_hndl(0,out_U);
001040  2000              MOVS     r0,#0
001042  f7fffffe          BL       avar_u_out_hndl
001046  e000              B        |L1.4170|
                  |L1.4168|
;;;3102   			}
;;;3103   		}
;;;3104   	else uAvarHndlOutUMinCnt=0;
001048  8035              STRH     r5,[r6,#0]
                  |L1.4170|
;;;3105   	}
;;;3106   
;;;3107   if(in_U>UINMAX)
00104a  4eb9              LDR      r6,|L1.4912|
00104c  48b9              LDR      r0,|L1.4916|
;;;3108   	{
;;;3109   	if(uAvarHndlInUMaxCnt<(10*TZAS))
00104e  4fba              LDR      r7,|L1.4920|
001050  f9b61000          LDRSH    r1,[r6,#0]            ;3107  ; in_U
001054  f9b00000          LDRSH    r0,[r0,#0]            ;3107  ; UINMAX
001058  4281              CMP      r1,r0                 ;3107
00105a  dd1a              BLE      |L1.4242|
00105c  f9b40000          LDRSH    r0,[r4,#0]  ; TZAS
001060  f9b72000          LDRSH    r2,[r7,#0]  ; uAvarHndlInUMaxCnt
001064  eb000380          ADD      r3,r0,r0,LSL #2
001068  ebb20f43          CMP      r2,r3,LSL #1
00106c  da0b              BGE      |L1.4230|
;;;3110   		{
;;;3111   		uAvarHndlInUMaxCnt++;
00106e  f1020201          ADD      r2,r2,#1
001072  b210              SXTH     r0,r2
001074  8038              STRH     r0,[r7,#0]
;;;3112   		if(uAvarHndlInUMaxCnt>=(10*TZAS))
001076  ebb00f43          CMP      r0,r3,LSL #1
00107a  db18              BLT      |L1.4270|
;;;3113   			{
;;;3114   			avar_u_in_hndl(1,in_U);
00107c  2001              MOVS     r0,#1
00107e  f7fffffe          BL       avar_u_in_hndl
001082  e014              B        |L1.4270|
                  |L1.4228|
001084  e035              B        |L1.4338|
                  |L1.4230|
;;;3115   			}
;;;3116   		}
;;;3117   	else uAvarHndlInUMaxCnt=(10*TZAS);
001086  eb000080          ADD      r0,r0,r0,LSL #2
00108a  ea4f0040          LSL      r0,r0,#1
00108e  8038              STRH     r0,[r7,#0]
001090  e00d              B        |L1.4270|
                  |L1.4242|
;;;3118   	}
;;;3119   else 
;;;3120   	{
;;;3121   	if(uAvarHndlInUMaxCnt>0)
001092  f9b70000          LDRSH    r0,[r7,#0]  ; uAvarHndlInUMaxCnt
001096  2800              CMP      r0,#0
001098  dd08              BLE      |L1.4268|
;;;3122   		{
;;;3123   		uAvarHndlInUMaxCnt--;
00109a  f1a00001          SUB      r0,r0,#1
00109e  b200              SXTH     r0,r0
0010a0  8038              STRH     r0,[r7,#0]
;;;3124   		if(uAvarHndlInUMaxCnt==0)
0010a2  b920              CBNZ     r0,|L1.4270|
;;;3125   			{
;;;3126   			avar_u_in_hndl(0,in_U);
0010a4  2000              MOVS     r0,#0
0010a6  f7fffffe          BL       avar_u_in_hndl
0010aa  e000              B        |L1.4270|
                  |L1.4268|
;;;3127   			}
;;;3128   		}
;;;3129   	else uAvarHndlInUMaxCnt=0;
0010ac  803d              STRH     r5,[r7,#0]
                  |L1.4270|
;;;3130   	}
;;;3131   
;;;3132   if(in_U<UINMIN)
0010ae  48a3              LDR      r0,|L1.4924|
0010b0  f9b61000          LDRSH    r1,[r6,#0]  ; in_U
;;;3133   	{
;;;3134   	if(uAvarHndlInUMinCnt<(10*TZAS))
0010b4  4ea2              LDR      r6,|L1.4928|
0010b6  f9b00000          LDRSH    r0,[r0,#0]            ;3132  ; UINMIN
0010ba  4281              CMP      r1,r0                 ;3132
0010bc  da1a              BGE      |L1.4340|
0010be  f9b40000          LDRSH    r0,[r4,#0]  ; TZAS
0010c2  f9b62000          LDRSH    r2,[r6,#0]  ; uAvarHndlInUMinCnt
0010c6  eb000380          ADD      r3,r0,r0,LSL #2
0010ca  ebb20f43          CMP      r2,r3,LSL #1
0010ce  da0b              BGE      |L1.4328|
;;;3135   		{
;;;3136   		uAvarHndlInUMinCnt++;
0010d0  f1020201          ADD      r2,r2,#1
0010d4  b210              SXTH     r0,r2
0010d6  8030              STRH     r0,[r6,#0]
;;;3137   		if(uAvarHndlInUMinCnt>=(10*TZAS))
0010d8  ebb00f43          CMP      r0,r3,LSL #1
0010dc  db09              BLT      |L1.4338|
;;;3138   			{
;;;3139   			avar_u_in_hndl(2,in_U);
0010de  e8bd41f0          POP      {r4-r8,lr}
0010e2  2002              MOVS     r0,#2
0010e4  f7ffbffe          B.W      avar_u_in_hndl
                  |L1.4328|
;;;3140   			}
;;;3141   		}
;;;3142   	else uAvarHndlInUMinCnt=(10*TZAS);
0010e8  eb000080          ADD      r0,r0,r0,LSL #2
0010ec  ea4f0040          LSL      r0,r0,#1
0010f0  8030              STRH     r0,[r6,#0]
                  |L1.4338|
;;;3143   	}
;;;3144   else 
;;;3145   	{
;;;3146   	if(uAvarHndlInUMinCnt>0)
;;;3147   		{
;;;3148   		uAvarHndlInUMinCnt--;
;;;3149   		if(uAvarHndlInUMinCnt==0)
;;;3150   			{
;;;3151   			avar_u_in_hndl(0,in_U);
;;;3152   			}
;;;3153   		}
;;;3154   	else uAvarHndlInUMinCnt=0;
;;;3155   	}
;;;3156   }
0010f2  e5bf              B        |L1.3188|
                  |L1.4340|
0010f4  f9b60000          LDRSH    r0,[r6,#0]            ;3146  ; uAvarHndlInUMinCnt
0010f8  2800              CMP      r0,#0                 ;3146
0010fa  dd09              BLE      |L1.4368|
0010fc  f1a00001          SUB      r0,r0,#1              ;3148
001100  b200              SXTH     r0,r0                 ;3148
001102  8030              STRH     r0,[r6,#0]            ;3148
001104  2800              CMP      r0,#0                 ;3149
001106  d1f4              BNE      |L1.4338|
001108  e8bd41f0          POP      {r4-r8,lr}            ;3151
00110c  f7ffbffe          B.W      avar_u_in_hndl
                  |L1.4368|
001110  8035              STRH     r5,[r6,#0]            ;3154
001112  e5af              B        |L1.3188|
;;;3157   
                          ENDP

                  t_sys_avar_hndl PROC
;;;3158   //-----------------------------------------------
;;;3159   void t_sys_avar_hndl(void)
001114  b430              PUSH     {r4,r5}
;;;3160   {
;;;3161   
;;;3162   if(main_1Hz_cnt<10)return;
001116  487d              LDR      r0,|L1.4876|
001118  f9b00000          LDRSH    r0,[r0,#0]  ; main_1Hz_cnt
00111c  280a              CMP      r0,#0xa
00111e  db22              BLT      |L1.4454|
;;;3163   
;;;3164   if(sys_T>TSYSMAX)
001120  4888              LDR      r0,|L1.4932|
;;;3165   	{
;;;3166   	if(sysTAvarHndlCnt<(10*TZAS))
001122  4c8a              LDR      r4,|L1.4940|
001124  f9b01000          LDRSH    r1,[r0,#0]            ;3164  ; sys_T
001128  4887              LDR      r0,|L1.4936|
00112a  f9b02000          LDRSH    r2,[r0,#0]            ;3164  ; TSYSMAX
00112e  f9b40000          LDRSH    r0,[r4,#0]
001132  4291              CMP      r1,r2                 ;3164
001134  dd18              BLE      |L1.4456|
001136  4a79              LDR      r2,|L1.4892|
001138  f9b22000          LDRSH    r2,[r2,#0]  ; TZAS
00113c  eb020382          ADD      r3,r2,r2,LSL #2
001140  ebb00f43          CMP      r0,r3,LSL #1
001144  da0a              BGE      |L1.4444|
;;;3167   		{
;;;3168   		sysTAvarHndlCnt++;
001146  f1000001          ADD      r0,r0,#1
00114a  b200              SXTH     r0,r0
00114c  8020              STRH     r0,[r4,#0]
;;;3169   		if(sysTAvarHndlCnt>=(10*TZAS))
00114e  ebb00f43          CMP      r0,r3,LSL #1
001152  db08              BLT      |L1.4454|
;;;3170   			{
;;;3171   			avar_sys_t_hndl(1,sys_T);
001154  bc30              POP      {r4,r5}
001156  2001              MOVS     r0,#1
001158  f7ffbffe          B.W      avar_sys_t_hndl
                  |L1.4444|
;;;3172   			}
;;;3173   		}
;;;3174   	else sysTAvarHndlCnt=(10*TZAS);
00115c  eb020082          ADD      r0,r2,r2,LSL #2
001160  ea4f0040          LSL      r0,r0,#1
001164  8020              STRH     r0,[r4,#0]
                  |L1.4454|
;;;3175   	}
;;;3176   else 
;;;3177   	{
;;;3178   	if(sysTAvarHndlCnt>0)
;;;3179   		{
;;;3180   		sysTAvarHndlCnt--;
;;;3181   		if(sysTAvarHndlCnt==0)
;;;3182   			{
;;;3183   			avar_sys_t_hndl(0,sys_T);
;;;3184   			}
;;;3185   		}
;;;3186   	else sysTAvarHndlCnt=0;
;;;3187   	}
;;;3188   }
001166  e706              B        |L1.3958|
                  |L1.4456|
001168  2800              CMP      r0,#0                 ;3178
00116a  dd08              BLE      |L1.4478|
00116c  f1a00001          SUB      r0,r0,#1              ;3180
001170  b200              SXTH     r0,r0                 ;3180
001172  8020              STRH     r0,[r4,#0]            ;3180
001174  2800              CMP      r0,#0                 ;3181
001176  d1f6              BNE      |L1.4454|
001178  bc30              POP      {r4,r5}               ;3183
00117a  f7ffbffe          B.W      avar_sys_t_hndl
                  |L1.4478|
00117e  f04f0000          MOV      r0,#0                 ;3186
001182  8020              STRH     r0,[r4,#0]            ;3186
001184  e6f7              B        |L1.3958|
;;;3189   
                          ENDP

                  num_necc_hndl PROC
;;;3190   //-----------------------------------------------
;;;3191   void num_necc_hndl(void)
001186  e92d41f0          PUSH     {r4-r8,lr}
;;;3192   {
;;;3193   
;;;3194   static short num_necc_block_cnt;
;;;3195   if(num_necc_block_cnt) num_necc_block_cnt--;
00118a  4c71              LDR      r4,|L1.4944|
00118c  f9b40012          LDRSH    r0,[r4,#0x12]  ; num_necc_block_cnt
001190  b110              CBZ      r0,|L1.4504|
001192  f1a00001          SUB      r0,r0,#1
001196  8260              STRH     r0,[r4,#0x12]
                  |L1.4504|
;;;3196   
;;;3197   Isumm_=Isumm;
001198  486e              LDR      r0,|L1.4948|
00119a  4d6f              LDR      r5,|L1.4952|
00119c  8800              LDRH     r0,[r0,#0]  ; Isumm
00119e  8028              STRH     r0,[r5,#0]
;;;3198   
;;;3199   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
0011a0  4e6e              LDR      r6,|L1.4956|
0011a2  270a              MOVS     r7,#0xa
0011a4  f9b60008          LDRSH    r0,[r6,#8]  ; bat
0011a8  2800              CMP      r0,#0
0011aa  da06              BGE      |L1.4538|
0011ac  f7fffffe          BL       abs
0011b0  fb90f0f7          SDIV     r0,r0,r7
0011b4  8829              LDRH     r1,[r5,#0]  ; Isumm_
0011b6  4408              ADD      r0,r0,r1
0011b8  8028              STRH     r0,[r5,#0]
                  |L1.4538|
;;;3200   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
0011ba  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0011be  2800              CMP      r0,#0
0011c0  da06              BGE      |L1.4560|
0011c2  f7fffffe          BL       abs
0011c6  fb90f0f7          SDIV     r0,r0,r7
0011ca  8829              LDRH     r1,[r5,#0]  ; Isumm_
0011cc  4408              ADD      r0,r0,r1
0011ce  8028              STRH     r0,[r5,#0]
                  |L1.4560|
;;;3201   
;;;3202   num_necc_up=(Isumm_/((signed short)IMAX))+1;
0011d0  4863              LDR      r0,|L1.4960|
0011d2  f9b51000          LDRSH    r1,[r5,#0]  ; Isumm_
0011d6  f9b00000          LDRSH    r0,[r0,#0]  ; IMAX
0011da  fb91f0f0          SDIV     r0,r1,r0
0011de  f1000001          ADD      r0,r0,#1
0011e2  b2c0              UXTB     r0,r0
0011e4  72e0              STRB     r0,[r4,#0xb]
;;;3203   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;3204   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;3205   
;;;3206   num_necc_down=(Isumm_/((signed short)IMIN))+1;
0011e6  4a5f              LDR      r2,|L1.4964|
0011e8  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
0011ec  fb91f1f2          SDIV     r1,r1,r2
0011f0  f1010101          ADD      r1,r1,#1
0011f4  b2c9              UXTB     r1,r1
0011f6  7321              STRB     r1,[r4,#0xc]
;;;3207   
;;;3208   if(num_necc_up>num_necc)
0011f8  4b5b              LDR      r3,|L1.4968|
;;;3209   	{
;;;3210   	num_necc=num_necc_up;
;;;3211   	num_necc_block_cnt=60;
0011fa  f04f053c          MOV      r5,#0x3c
0011fe  f9b32000          LDRSH    r2,[r3,#0]            ;3208  ; num_necc
001202  4290              CMP      r0,r2                 ;3208
001204  e0b2              B        |L1.4972|
001206  0000              DCW      0x0000
                  |L1.4616|
001208  4176746f          DCB      "Avtomat #6 is OFF",0
00120c  6d617420
001210  23362069
001214  73204f46
001218  4600    
00121a  00                DCB      0
00121b  00                DCB      0
                  |L1.4636|
00121c  4176746f          DCB      "Avtomat #7 is OFF",0
001220  6d617420
001224  23372069
001228  73204f46
00122c  4600    
00122e  00                DCB      0
00122f  00                DCB      0
                  |L1.4656|
001230  4176746f          DCB      "Avtomat #8 is OFF",0
001234  6d617420
001238  23382069
00123c  73204f46
001240  4600    
001242  00                DCB      0
001243  00                DCB      0
                  |L1.4676|
001244  4176746f          DCB      "Avtomat #9 is OFF",0
001248  6d617420
00124c  23392069
001250  73204f46
001254  4600    
001256  00                DCB      0
001257  00                DCB      0
                  |L1.4696|
001258  4176746f          DCB      "Avtomat #1 is ON ",0
00125c  6d617420
001260  23312069
001264  73204f4e
001268  2000    
00126a  00                DCB      0
00126b  00                DCB      0
                  |L1.4716|
00126c  4176746f          DCB      "Avtomat #2 is ON ",0
001270  6d617420
001274  23322069
001278  73204f4e
00127c  2000    
00127e  00                DCB      0
00127f  00                DCB      0
                  |L1.4736|
001280  4176746f          DCB      "Avtomat #3 is ON ",0
001284  6d617420
001288  23332069
00128c  73204f4e
001290  2000    
001292  00                DCB      0
001293  00                DCB      0
                  |L1.4756|
001294  4176746f          DCB      "Avtomat #4 is ON ",0
001298  6d617420
00129c  23342069
0012a0  73204f4e
0012a4  2000    
0012a6  00                DCB      0
0012a7  00                DCB      0
                  |L1.4776|
0012a8  4176746f          DCB      "Avtomat #5 is ON ",0
0012ac  6d617420
0012b0  23352069
0012b4  73204f4e
0012b8  2000    
0012ba  00                DCB      0
0012bb  00                DCB      0
                  |L1.4796|
0012bc  4176746f          DCB      "Avtomat #6 is ON ",0
0012c0  6d617420
0012c4  23362069
0012c8  73204f4e
0012cc  2000    
0012ce  00                DCB      0
0012cf  00                DCB      0
                  |L1.4816|
0012d0  4176746f          DCB      "Avtomat #7 is ON ",0
0012d4  6d617420
0012d8  23372069
0012dc  73204f4e
0012e0  2000    
0012e2  00                DCB      0
0012e3  00                DCB      0
                  |L1.4836|
0012e4  4176746f          DCB      "Avtomat #8 is ON ",0
0012e8  6d617420
0012ec  23382069
0012f0  73204f4e
0012f4  2000    
0012f6  00                DCB      0
0012f7  00                DCB      0
                  |L1.4856|
0012f8  4176746f          DCB      "Avtomat #9 is ON ",0
0012fc  6d617420
001300  23392069
001304  73204f4e
001308  2000    
00130a  00                DCB      0
00130b  00                DCB      0
                  |L1.4876|
                          DCD      main_1Hz_cnt
                  |L1.4880|
                          DCD      out_U
                  |L1.4884|
                          DCD      UOUT
                  |L1.4888|
                          DCD      overloadHndlCnt
                  |L1.4892|
                          DCD      TZAS
                  |L1.4896|
                          DCD      UOUTMAX
                  |L1.4900|
                          DCD      uAvarHndlOutUMaxCnt
                  |L1.4904|
                          DCD      UOUTMIN
                  |L1.4908|
                          DCD      uAvarHndlOutUMinCnt
                  |L1.4912|
                          DCD      in_U
                  |L1.4916|
                          DCD      UINMAX
                  |L1.4920|
                          DCD      uAvarHndlInUMaxCnt
                  |L1.4924|
                          DCD      UINMIN
                  |L1.4928|
                          DCD      uAvarHndlInUMinCnt
                  |L1.4932|
                          DCD      sys_T
                  |L1.4936|
                          DCD      TSYSMAX
                  |L1.4940|
                          DCD      sysTAvarHndlCnt
                  |L1.4944|
                          DCD      ||area_number.30||
                  |L1.4948|
                          DCD      Isumm
                  |L1.4952|
                          DCD      Isumm_
                  |L1.4956|
                          DCD      bat
                  |L1.4960|
                          DCD      IMAX
                  |L1.4964|
                          DCD      IMIN
                  |L1.4968|
                          DCD      num_necc
                  |L1.4972|
00136c  dd02              BLE      |L1.4980|
00136e  8018              STRH     r0,[r3,#0]            ;3210
001370  8265              STRH     r5,[r4,#0x12]
001372  e005              B        |L1.4992|
                  |L1.4980|
;;;3212   	}
;;;3213   else if(num_necc_down<num_necc)
001374  4291              CMP      r1,r2
001376  da03              BGE      |L1.4992|
;;;3214   	{
;;;3215   	if(!num_necc_block_cnt)
001378  8a60              LDRH     r0,[r4,#0x12]  ; num_necc_block_cnt
00137a  b908              CBNZ     r0,|L1.4992|
;;;3216   		{
;;;3217   		num_necc=num_necc_down;
00137c  8019              STRH     r1,[r3,#0]
;;;3218   		num_necc_block_cnt=60;
00137e  8265              STRH     r5,[r4,#0x12]
                  |L1.4992|
;;;3219   		}
;;;3220   	}
;;;3221   
;;;3222   /*if(PAR)*/ num_necc=NUMIST;
001380  48eb              LDR      r0,|L1.5936|
001382  f9b02000          LDRSH    r2,[r0,#0]  ; NUMIST
001386  801a              STRH     r2,[r3,#0]
;;;3223   
;;;3224   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3225   //if(bPARALLEL) num_necc=NUMIST;
;;;3226   #endif
;;;3227   
;;;3228   num_necc=NUMIST;
;;;3229   
;;;3230   gran(&num_necc,1,NUMIST);
001388  e8bd41f0          POP      {r4-r8,lr}
00138c  2101              MOVS     r1,#1
00138e  48e9              LDR      r0,|L1.5940|
001390  f7ffbffe          B.W      gran
;;;3231   
;;;3232   }
;;;3233   
                          ENDP

                  cntrl_hndl PROC
;;;3235   //-----------------------------------------------
;;;3236   void cntrl_hndl(void)
001394  e92d47f0          PUSH     {r4-r10,lr}
;;;3237   {
;;;3238   
;;;3239   IZMAX_=IZMAX;
001398  48e7              LDR      r0,|L1.5944|
00139a  f8df83a0          LDR      r8,|L1.5948|
00139e  f9b01000          LDRSH    r1,[r0,#0]  ; IZMAX
0013a2  f8a81024          STRH     r1,[r8,#0x24]
;;;3240   
;;;3241   //cntrl_hndl_plazma=10;
;;;3242   
;;;3243   if(speedChIsOn)IZMAX_=speedChrgCurr;
0013a6  48e6              LDR      r0,|L1.5952|
0013a8  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
0013aa  b118              CBZ      r0,|L1.5044|
0013ac  48e5              LDR      r0,|L1.5956|
0013ae  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
0013b0  f8a80024          STRH     r0,[r8,#0x24]
                  |L1.5044|
;;;3244   
;;;3245   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
0013b4  f9b8002a          LDRSH    r0,[r8,#0x2a]  ; cntrl_stat_blok_cnt
0013b8  b118              CBZ      r0,|L1.5058|
0013ba  f1a00001          SUB      r0,r0,#1
0013be  f8a8002a          STRH     r0,[r8,#0x2a]
                  |L1.5058|
;;;3246   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
0013c2  f9b8002c          LDRSH    r0,[r8,#0x2c]  ; cntrl_stat_blok_cnt_
0013c6  b118              CBZ      r0,|L1.5072|
0013c8  f1a00001          SUB      r0,r0,#1
0013cc  f8a8002c          STRH     r0,[r8,#0x2c]
                  |L1.5072|
;;;3247   
;;;3248   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX/10;
0013d0  48dd              LDR      r0,|L1.5960|
0013d2  f04f090a          MOV      r9,#0xa
0013d6  f890203f          LDRB     r2,[r0,#0x3f]  ; bat
0013da  0792              LSLS     r2,r2,#30
0013dc  d103              BNE      |L1.5094|
0013de  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
0013e2  0780              LSLS     r0,r0,#30
0013e4  d003              BEQ      |L1.5102|
                  |L1.5094|
0013e6  fb91f0f9          SDIV     r0,r1,r9
0013ea  f8a80024          STRH     r0,[r8,#0x24]
                  |L1.5102|
;;;3249   
;;;3250   
;;;3251   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3252   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
0013ee  48d7              LDR      r0,|L1.5964|
0013f0  2501              MOVS     r5,#1
0013f2  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
0013f6  1e49              SUBS     r1,r1,#1
0013f8  2905              CMP      r1,#5
0013fa  d300              BCC      |L1.5118|
0013fc  8005              STRH     r5,[r0,#0]
                  |L1.5118|
;;;3253   if(ch_cnt0<(10*REG_SPEED))
0013fe  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
001402  f8981006          LDRB     r1,[r8,#6]  ; ch_cnt0
001406  eb000080          ADD      r0,r0,r0,LSL #2
00140a  2400              MOVS     r4,#0                 ;3243
00140c  ebb10f40          CMP      r1,r0,LSL #1
001410  da0b              BGE      |L1.5162|
;;;3254   	{
;;;3255   	ch_cnt0++;
001412  f1010101          ADD      r1,r1,#1
001416  b2c9              UXTB     r1,r1
001418  f8881006          STRB     r1,[r8,#6]
;;;3256   	if(ch_cnt0>=10*REG_SPEED)
00141c  ebb10f40          CMP      r1,r0,LSL #1
001420  db03              BLT      |L1.5162|
;;;3257   		{
;;;3258   		ch_cnt0=0;
001422  f8884006          STRB     r4,[r8,#6]
;;;3259   		b1Hz_ch=1;
001426  f8885007          STRB     r5,[r8,#7]
                  |L1.5162|
;;;3260   		}
;;;3261   	}
;;;3262   #endif
;;;3263   
;;;3264   
;;;3265   if(mess_find_unvol(MESS2CNTRL_HNDL))
00142a  20e1              MOVS     r0,#0xe1
00142c  f7fffffe          BL       mess_find_unvol
;;;3266   	{
;;;3267   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;3268   		{
;;;3269   		cntrl_stat=cntrl_stat_old+mess_data[1];
;;;3270   		}
;;;3271   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;3272   		{
;;;3273   		cntrl_stat=cntrl_stat_old-mess_data[1];
;;;3274   		}
;;;3275   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;3276   		{
;;;3277   		static char cntrlStatIsDownCnt;
;;;3278   		cntrl_stat--;
;;;3279   
;;;3280   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;3281   			{
;;;3282   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;3283   			}
;;;3284   		else 
;;;3285   			{
;;;3286   			cntrlStatIsDownCnt=0;
;;;3287   			}
;;;3288   
;;;3289   		}
;;;3290   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;3291   		{
;;;3292   		cntrl_stat=mess_data[1];
;;;3293   		}
;;;3294   
;;;3295   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;3296   		{
;;;3297   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3298   		if(load_U>u_necc)
001430  4bc7              LDR      r3,|L1.5968|
;;;3299   			{
;;;3300   			cntrl_hndl_plazma=11;
;;;3301   			if(((bps_U-u_necc)>40)&&(cntrl_stat>0))cntrl_stat-=5;
001432  4ac8              LDR      r2,|L1.5972|
;;;3302   			else if((cntrl_stat)&&b1Hz_ch)cntrl_stat--;
;;;3303   			}
;;;3304   		else if(bps_U<u_necc)
;;;3305   			{
;;;3306   			cntrl_hndl_plazma=12;	
;;;3307   			if(((u_necc-bps_U)>40)&&(cntrl_stat<2015))cntrl_stat+=5;
;;;3308   			else	if((cntrl_stat<2020)&&b1Hz_ch)cntrl_stat++;
;;;3309   			}
;;;3310   		#endif	
;;;3311   	 	}
;;;3312   	}
;;;3313   
;;;3314   #ifdef UKU_VD
;;;3315   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
001434  4ec8              LDR      r6,|L1.5976|
;;;3316   	{
;;;3317   	cntrl_stat_new=cntrl_stat_old;
;;;3318   	cntrl_hndl_plazma=19;
;;;3319   	if((Ibmax/10)>(2*IZMAX_))
;;;3320   		{
;;;3321   		cntrl_hndl_plazma=20;
;;;3322             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;3323   		else	cntrl_stat_new-=10;
;;;3324   		}		
;;;3325   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;3326   		{
;;;3327   		cntrl_hndl_plazma=21;
;;;3328             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;3329             else	cntrl_stat_new-=3;
;;;3330   		}   
;;;3331   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;3332   		{
;;;3333   		cntrl_hndl_plazma=22;
;;;3334   		cntrl_stat_new--;
;;;3335   		}
;;;3336   		
;;;3337   	else if(bps_U<u_necc)
;;;3338   		{
;;;3339   		cntrl_hndl_plazma=23;
;;;3340   /*		if(bps_U<(u_necc-(UB0-UB20)))
;;;3341   			{
;;;3342   			cntrl_hndl_plazma=24;
;;;3343   			if(Ibmax<0)
;;;3344   				{
;;;3345   				cntrl_hndl_plazma=25;
;;;3346                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;3347   				else cntrl_stat_new+=10;
;;;3348   				}
;;;3349   			else if(Ibmax<(IZMAX_*5))
;;;3350   				{
;;;3351   				cntrl_hndl_plazma=26;
;;;3352                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;3353   				else	cntrl_stat_new+=2;
;;;3354   				}
;;;3355   			else if(Ibmax<((IZMAX_*10)))//(Ibmax<((IZMAX_*95)/10))
;;;3356   				{
;;;3357   				cntrl_hndl_plazma=27;
;;;3358   				cntrl_stat_new++;
;;;3359   				}					
;;;3360   			}	*/
;;;3361   /*		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;3362   			{
;;;3363   			cntrl_hndl_plazma=28;
;;;3364   			if(Ibmax<(IZMAX_*5))
;;;3365   				{
;;;3366   				cntrl_hndl_plazma=29;
;;;3367                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;3368   				else	cntrl_stat_new+=2;
;;;3369   				}
;;;3370   			else if(Ibmax<((IZMAX_*10)))//(Ibmax<((IZMAX_*95)/10))
;;;3371   				{
;;;3372   				cntrl_hndl_plazma=30;
;;;3373   				cntrl_stat_new++;
;;;3374   				}					
;;;3375   			}
;;;3376   		else if(bps_U<(u_necc-1))
;;;3377   			{
;;;3378   			cntrl_hndl_plazma=31;
;;;3379   			if(Ibmax<((IZMAX_*10)))//(Ibmax<((IZMAX_*95)/10))
;;;3380   				{
;;;3381   				cntrl_hndl_plazma=32;
;;;3382   				cntrl_stat_new++;
;;;3383   				}					
;;;3384   			}	*/					
;;;3385   		}	
;;;3386   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;3387   		{ 	
;;;3388   		cntrl_hndl_plazma=33;
;;;3389   /*		if(bps_U>(u_necc+(UB0-UB20)))
;;;3390   			{
;;;3391   			cntrl_hndl_plazma=34;
;;;3392                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;3393   			else	cntrl_stat_new-=10;
;;;3394   			}
;;;3395   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;3396   			{
;;;3397   			cntrl_hndl_plazma=35;
;;;3398                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;3399   			else cntrl_stat_new-=2;
;;;3400   			}	
;;;3401   		else if(bps_U>(u_necc+1))
;;;3402   			{
;;;3403   			cntrl_hndl_plazma=36;
;;;3404   			cntrl_stat_new--;
;;;3405   			}*/					
;;;3406   		}
;;;3407   
;;;3408   	cntrl_stat_new=(short)((2000L*((long)(UOUT_-in_U)))/650L);
;;;3409   	gran(&cntrl_stat_new,10,2010);			
001436  f24077da          MOV      r7,#0x7da
00143a  2800              CMP      r0,#0                 ;3265
00143c  d07e              BEQ      |L1.5436|
00143e  49c7              LDR      r1,|L1.5980|
001440  6808              LDR      r0,[r1,#0]            ;3267  ; mess_data
001442  2864              CMP      r0,#0x64              ;3267
001444  d00a              BEQ      |L1.5212|
001446  2869              CMP      r0,#0x69              ;3271
001448  d00f              BEQ      |L1.5226|
00144a  f8dfc314          LDR      r12,|L1.5984|
00144e  286e              CMP      r0,#0x6e              ;3275
001450  d013              BEQ      |L1.5242|
001452  28e5              CMP      r0,#0xe5              ;3290
001454  d033              BEQ      |L1.5310|
001456  28e6              CMP      r0,#0xe6              ;3295
001458  d035              BEQ      |L1.5318|
00145a  e126              B        |L1.5802|
                  |L1.5212|
00145c  6848              LDR      r0,[r1,#4]            ;3269  ; mess_data
00145e  f8b81010          LDRH     r1,[r8,#0x10]         ;3269  ; cntrl_stat_old
001462  4408              ADD      r0,r0,r1              ;3269
001464  f8a8000e          STRH     r0,[r8,#0xe]          ;3269
001468  e11f              B        |L1.5802|
                  |L1.5226|
00146a  6848              LDR      r0,[r1,#4]            ;3273  ; mess_data
00146c  f8b81010          LDRH     r1,[r8,#0x10]         ;3273  ; cntrl_stat_old
001470  eba10000          SUB      r0,r1,r0              ;3273
001474  f8a8000e          STRH     r0,[r8,#0xe]          ;3273
001478  e117              B        |L1.5802|
                  |L1.5242|
00147a  f8b8000e          LDRH     r0,[r8,#0xe]          ;3278  ; cntrl_stat
00147e  f1a00001          SUB      r0,r0,#1              ;3278
001482  b200              SXTH     r0,r0                 ;3278
001484  f8a8000e          STRH     r0,[r8,#0xe]          ;3278
001488  281e              CMP      r0,#0x1e              ;3280
00148a  dd06              BLE      |L1.5274|
00148c  49b5              LDR      r1,|L1.5988|
00148e  f9bc0000          LDRSH    r0,[r12,#0]           ;3280  ; load_U
001492  f9b11000          LDRSH    r1,[r1,#0]            ;3280  ; USIGN
001496  4288              CMP      r0,r1                 ;3280
001498  da0e              BGE      |L1.5304|
                  |L1.5274|
00149a  f8980000          LDRB     r0,[r8,#0]            ;3282  ; cntrlStatIsDownCnt
00149e  1c40              ADDS     r0,r0,#1              ;3282
0014a0  b2c0              UXTB     r0,r0                 ;3282
0014a2  f8880000          STRB     r0,[r8,#0]            ;3282
0014a6  28fa              CMP      r0,#0xfa              ;3282
0014a8  d105              BNE      |L1.5302|
0014aa  230a              MOVS     r3,#0xa               ;3282
0014ac  2200              MOVS     r2,#0                 ;3282
0014ae  21e7              MOVS     r1,#0xe7              ;3282
0014b0  20e6              MOVS     r0,#0xe6              ;3282
0014b2  f7fffffe          BL       mess_send
                  |L1.5302|
0014b6  e0f8              B        |L1.5802|
                  |L1.5304|
0014b8  f8884000          STRB     r4,[r8,#0]            ;3286
0014bc  e0f5              B        |L1.5802|
                  |L1.5310|
0014be  6848              LDR      r0,[r1,#4]            ;3292  ; mess_data
0014c0  f8a8000e          STRH     r0,[r8,#0xe]          ;3292
0014c4  e0f1              B        |L1.5802|
                  |L1.5318|
0014c6  f9bc1000          LDRSH    r1,[r12,#0]           ;3298  ; load_U
0014ca  f9b30000          LDRSH    r0,[r3,#0]            ;3298  ; u_necc
0014ce  4281              CMP      r1,r0                 ;3298
0014d0  dd1f              BLE      |L1.5394|
0014d2  f04f010b          MOV      r1,#0xb               ;3300
0014d6  f888100d          STRB     r1,[r8,#0xd]          ;3300
0014da  f9b21000          LDRSH    r1,[r2,#0]            ;3301  ; bps_U
0014de  eba10000          SUB      r0,r1,r0              ;3301
0014e2  2828              CMP      r0,#0x28              ;3301
0014e4  dd08              BLE      |L1.5368|
0014e6  f9b8000e          LDRSH    r0,[r8,#0xe]          ;3301  ; cntrl_stat
0014ea  2800              CMP      r0,#0                 ;3301
0014ec  dd04              BLE      |L1.5368|
0014ee  f1a00005          SUB      r0,r0,#5              ;3301
0014f2  f8a8000e          STRH     r0,[r8,#0xe]          ;3301
0014f6  e0d8              B        |L1.5802|
                  |L1.5368|
0014f8  f9b8000e          LDRSH    r0,[r8,#0xe]          ;3302  ; cntrl_stat
0014fc  2800              CMP      r0,#0                 ;3302
0014fe  d007              BEQ      |L1.5392|
001500  f8981007          LDRB     r1,[r8,#7]            ;3302  ; b1Hz_ch
001504  2900              CMP      r1,#0                 ;3302
001506  d003              BEQ      |L1.5392|
001508  f1a00001          SUB      r0,r0,#1              ;3302
00150c  f8a8000e          STRH     r0,[r8,#0xe]          ;3302
                  |L1.5392|
001510  e0cb              B        |L1.5802|
                  |L1.5394|
001512  f9b21000          LDRSH    r1,[r2,#0]            ;3304  ; bps_U
001516  4281              CMP      r1,r0                 ;3304
001518  da13              BGE      |L1.5442|
00151a  f04f020c          MOV      r2,#0xc               ;3306
00151e  f888200d          STRB     r2,[r8,#0xd]          ;3306
001522  eba00001          SUB      r0,r0,r1              ;3307
001526  2828              CMP      r0,#0x28              ;3307
001528  dd0c              BLE      |L1.5444|
00152a  f9b8000e          LDRSH    r0,[r8,#0xe]          ;3307  ; cntrl_stat
00152e  f24071df          MOV      r1,#0x7df             ;3307
001532  4288              CMP      r0,r1                 ;3307
001534  da06              BGE      |L1.5444|
001536  f1000005          ADD      r0,r0,#5              ;3307
00153a  e000              B        |L1.5438|
                  |L1.5436|
00153c  e010              B        |L1.5472|
                  |L1.5438|
00153e  f8a8000e          STRH     r0,[r8,#0xe]          ;3307
                  |L1.5442|
001542  e0b2              B        |L1.5802|
                  |L1.5444|
001544  f9b8000e          LDRSH    r0,[r8,#0xe]          ;3308  ; cntrl_stat
001548  f24071e4          MOV      r1,#0x7e4             ;3308
00154c  4288              CMP      r0,r1                 ;3308
00154e  da33              BGE      |L1.5560|
001550  f8981007          LDRB     r1,[r8,#7]            ;3308  ; b1Hz_ch
001554  b381              CBZ      r1,|L1.5560|
001556  f1000001          ADD      r0,r0,#1              ;3308
00155a  f8a8000e          STRH     r0,[r8,#0xe]          ;3308
00155e  e0a4              B        |L1.5802|
                  |L1.5472|
001560  f8980007          LDRB     r0,[r8,#7]            ;3315  ; b1Hz_ch
001564  b340              CBZ      r0,|L1.5560|
001566  4880              LDR      r0,|L1.5992|
001568  8800              LDRH     r0,[r0,#0]            ;3315  ; bIBAT_SMKLBR
00156a  b118              CBZ      r0,|L1.5492|
00156c  f8960343          LDRB     r0,[r6,#0x343]        ;3315  ; bps
001570  2828              CMP      r0,#0x28              ;3315
001572  d921              BLS      |L1.5560|
                  |L1.5492|
001574  f9b80010          LDRSH    r0,[r8,#0x10]         ;3317  ; cntrl_stat_old
001578  f8a80020          STRH     r0,[r8,#0x20]         ;3317
00157c  f04f0113          MOV      r1,#0x13              ;3318
001580  f888100d          STRB     r1,[r8,#0xd]          ;3318
001584  f9b8c022          LDRSH    r12,[r8,#0x22]        ;3319  ; Ibmax
001588  f8b81024          LDRH     r1,[r8,#0x24]         ;3319  ; IZMAX_
00158c  fb9cf9f9          SDIV     r9,r12,r9             ;3319
001590  ebb90f41          CMP      r9,r1,LSL #1          ;3319
001594  dd11              BLE      |L1.5562|
001596  f04f0114          MOV      r1,#0x14              ;3321
00159a  f888100d          STRB     r1,[r8,#0xd]          ;3321
00159e  f8b8102a          LDRH     r1,[r8,#0x2a]         ;3322  ; cntrl_stat_blok_cnt
0015a2  b121              CBZ      r1,|L1.5550|
0015a4  f1a00001          SUB      r0,r0,#1              ;3322
0015a8  f8a80020          STRH     r0,[r8,#0x20]         ;3322
0015ac  e03a              B        |L1.5668|
                  |L1.5550|
0015ae  f1a0000a          SUB      r0,r0,#0xa            ;3323
0015b2  f8a80020          STRH     r0,[r8,#0x20]         ;3323
0015b6  e035              B        |L1.5668|
                  |L1.5560|
0015b8  e077              B        |L1.5802|
                  |L1.5562|
0015ba  da14              BGE      |L1.5606|
0015bc  ebc11a01          RSB      r10,r1,r1,LSL #4      ;3325
0015c0  45e2              CMP      r10,r12               ;3325
0015c2  da10              BGE      |L1.5606|
0015c4  f04f0115          MOV      r1,#0x15              ;3327
0015c8  f888100d          STRB     r1,[r8,#0xd]          ;3327
0015cc  f8b8102a          LDRH     r1,[r8,#0x2a]         ;3328  ; cntrl_stat_blok_cnt
0015d0  b121              CBZ      r1,|L1.5596|
0015d2  f1a00001          SUB      r0,r0,#1              ;3328
0015d6  f8a80020          STRH     r0,[r8,#0x20]         ;3328
0015da  e023              B        |L1.5668|
                  |L1.5596|
0015dc  f1a00003          SUB      r0,r0,#3              ;3329
0015e0  f8a80020          STRH     r0,[r8,#0x20]         ;3329
0015e4  e01e              B        |L1.5668|
                  |L1.5606|
0015e6  ebc11a01          RSB      r10,r1,r1,LSL #4      ;3331
0015ea  45e2              CMP      r10,r12               ;3331
0015ec  dd0a              BLE      |L1.5636|
0015ee  4589              CMP      r9,r1                 ;3331
0015f0  dd08              BLE      |L1.5636|
0015f2  f04f0116          MOV      r1,#0x16              ;3333
0015f6  f888100d          STRB     r1,[r8,#0xd]          ;3333
0015fa  f1a00001          SUB      r0,r0,#1              ;3334
0015fe  f8a80020          STRH     r0,[r8,#0x20]         ;3334
001602  e00f              B        |L1.5668|
                  |L1.5636|
001604  f9b20000          LDRSH    r0,[r2,#0]            ;3337  ; bps_U
001608  f9b31000          LDRSH    r1,[r3,#0]            ;3337  ; u_necc
00160c  4288              CMP      r0,r1                 ;3337
00160e  da04              BGE      |L1.5658|
001610  f04f0017          MOV      r0,#0x17              ;3339
001614  f888000d          STRB     r0,[r8,#0xd]          ;3339
001618  e004              B        |L1.5668|
                  |L1.5658|
00161a  dd03              BLE      |L1.5668|
00161c  f04f0021          MOV      r0,#0x21              ;3388
001620  f888000d          STRB     r0,[r8,#0xd]          ;3388
                  |L1.5668|
001624  4851              LDR      r0,|L1.5996|
001626  4952              LDR      r1,|L1.6000|
001628  f9b00000          LDRSH    r0,[r0,#0]            ;3408  ; UOUT_
00162c  f9b11000          LDRSH    r1,[r1,#0]            ;3408  ; in_U
001630  eba00001          SUB      r0,r0,r1              ;3408
001634  f44f61fa          MOV      r1,#0x7d0             ;3408
001638  fb00f001          MUL      r0,r0,r1              ;3408
00163c  f240218a          MOV      r1,#0x28a             ;3408
001640  fb90f0f1          SDIV     r0,r0,r1              ;3408
001644  f8a80020          STRH     r0,[r8,#0x20]         ;3408
001648  483c              LDR      r0,|L1.5948|
00164a  463a              MOV      r2,r7
00164c  f04f010a          MOV      r1,#0xa
001650  f1000020          ADD      r0,r0,#0x20
001654  f7fffffe          BL       gran
;;;3410   	cntrl_stat_old=cntrl_stat_new;
001658  f8b80020          LDRH     r0,[r8,#0x20]  ; cntrl_stat_new
00165c  f8a80010          STRH     r0,[r8,#0x10]
;;;3411   	cntrl_stat=cntrl_stat_new;
001660  f8a8000e          STRH     r0,[r8,#0xe]
;;;3412   	cntrl_stat_buff[cntrl_stat_buff_ptr]=cntrl_stat_new;  //pwm_u_buff[pwm_u_buff_ptr]=pwm_u_;
001664  4a43              LDR      r2,|L1.6004|
001666  f898100a          LDRB     r1,[r8,#0xa]  ; cntrl_stat_buff_ptr
00166a  f8220011          STRH     r0,[r2,r1,LSL #1]
;;;3413   	cntrl_stat_buff_ptr++;								   //pwm_u_buff_ptr++;
00166e  f1010101          ADD      r1,r1,#1
001672  b2c8              UXTB     r0,r1
001674  f888000a          STRB     r0,[r8,#0xa]
;;;3414   	
;;;3415   	if(cntrl_stat_buff_ptr>=16)cntrl_stat_buff_ptr=0;	//if(pwm_u_buff_ptr>=16)pwm_u_buff_ptr=0;
001678  2810              CMP      r0,#0x10
00167a  d301              BCC      |L1.5760|
00167c  f888400a          STRB     r4,[r8,#0xa]
                  |L1.5760|
;;;3416   		{
;;;3417   		char i;
;;;3418   		signed long tempSL;
;;;3419   		tempSL=0;
001680  f04f0100          MOV      r1,#0
;;;3420   		for(i=0;i<16;i++)
001684  4608              MOV      r0,r1
                  |L1.5766|
;;;3421   			{
;;;3422   			tempSL+=(signed long)cntrl_stat_buff[i];			//tempSL+=(signed long)pwm_u_buff[i];
001686  f9323010          LDRSH    r3,[r2,r0,LSL #1]
00168a  4419              ADD      r1,r1,r3
00168c  f1000001          ADD      r0,r0,#1              ;3420
001690  b2c0              UXTB     r0,r0                 ;3420
001692  2810              CMP      r0,#0x10              ;3420
001694  d3f7              BCC      |L1.5766|
;;;3423   			}
;;;3424   		tempSL>>=4;
001696  ea4f1021          ASR      r0,r1,#4
;;;3425   		cntrl_stat_buff_=(signed short)tempSL;
00169a  b200              SXTH     r0,r0
00169c  f8a80026          STRH     r0,[r8,#0x26]
;;;3426   		}
;;;3427   	if(NUMSK)cntrl_stat=cntrl_stat_buff_;
0016a0  4935              LDR      r1,|L1.6008|
0016a2  8809              LDRH     r1,[r1,#0]  ; NUMSK
0016a4  b109              CBZ      r1,|L1.5802|
0016a6  f8a8000e          STRH     r0,[r8,#0xe]
                  |L1.5802|
;;;3428   
;;;3429   	}
;;;3430   
;;;3431   #endif
;;;3432   
;;;3433   iiii=0;
0016aa  f8884009          STRB     r4,[r8,#9]
;;;3434   for(i=0;i<NUMIST;i++)
0016ae  f8884008          STRB     r4,[r8,#8]
0016b2  481f              LDR      r0,|L1.5936|
0016b4  f9b02000          LDRSH    r2,[r0,#0]
0016b8  e01b              B        |L1.5874|
                  |L1.5818|
;;;3435        {
;;;3436        if(bps[i]._cnt<30)iiii=1;
0016ba  eb010081          ADD      r0,r1,r1,LSL #2
0016be  eb0000c1          ADD      r0,r0,r1,LSL #3
0016c2  eb0600c0          ADD      r0,r6,r0,LSL #3
0016c6  78c3              LDRB     r3,[r0,#3]
0016c8  2b1e              CMP      r3,#0x1e
0016ca  d201              BCS      |L1.5840|
0016cc  f8885009          STRB     r5,[r8,#9]
                  |L1.5840|
;;;3437   
;;;3438   	 bps[i]._cntrl_stat=cntrl_stat+bps[i]._x_;
0016d0  f100002c          ADD      r0,r0,#0x2c
0016d4  f8b8c00e          LDRH     r12,[r8,#0xe]  ; cntrl_stat
0016d8  8d03              LDRH     r3,[r0,#0x28]
0016da  4463              ADD      r3,r3,r12
0016dc  8703              STRH     r3,[r0,#0x38]
;;;3439   	 if(bps[i]._flags_tu&0x01) bps[i]._cntrl_stat=0;
0016de  f810392c          LDRB     r3,[r0],#-0x2c
0016e2  07db              LSLS     r3,r3,#31
0016e4  d001              BEQ      |L1.5866|
0016e6  f8a04064          STRH     r4,[r0,#0x64]
                  |L1.5866|
0016ea  f1010101          ADD      r1,r1,#1              ;3434
0016ee  f8881008          STRB     r1,[r8,#8]            ;3434
                  |L1.5874|
0016f2  f8981008          LDRB     r1,[r8,#8]            ;3434  ; i
0016f6  4291              CMP      r1,r2                 ;3434
0016f8  dbdf              BLT      |L1.5818|
;;;3440        }
;;;3441   
;;;3442   if(iiii==0)
0016fa  f8980009          LDRB     r0,[r8,#9]  ; iiii
0016fe  b938              CBNZ     r0,|L1.5904|
;;;3443        {
;;;3444        cntrl_stat=1200;	
001700  f44f6096          MOV      r0,#0x4b0
001704  f8a8000e          STRH     r0,[r8,#0xe]
;;;3445        cntrl_stat_old=1200;
001708  f8a80010          STRH     r0,[r8,#0x10]
;;;3446        cntrl_stat_new=1200;
00170c  f8a80020          STRH     r0,[r8,#0x20]
                  |L1.5904|
;;;3447        }
;;;3448   gran(&cntrl_stat,10,2010); 
001710  480a              LDR      r0,|L1.5948|
001712  463a              MOV      r2,r7
001714  210a              MOVS     r1,#0xa
001716  300e              ADDS     r0,r0,#0xe
001718  f7fffffe          BL       gran
;;;3449   b1Hz_ch=0;
00171c  f8884007          STRB     r4,[r8,#7]
;;;3450   }
001720  e8bd87f0          POP      {r4-r10,pc}
;;;3451   
                          ENDP

                  ext_drv PROC
;;;3453   //-----------------------------------------------
;;;3454   void ext_drv(void)
001724  4770              BX       lr
;;;3455   {
;;;3456   char i;
;;;3457   }
;;;3458   
                          ENDP

                  zar_superviser_drv PROC
;;;3460   //-----------------------------------------------
;;;3461   void zar_superviser_drv(void)
001726  4770              BX       lr
;;;3462   {
;;;3463   
;;;3464   
;;;3465   }
;;;3466   
                          ENDP

                  npn_hndl PROC
;;;3477   //-----------------------------------------------
;;;3478   void npn_hndl(void)
001728  4770              BX       lr
;;;3479   {
;;;3480   }
;;;3481   
                          ENDP

                  numOfForvardBps_init PROC
;;;3496   //-----------------------------------------------
;;;3497   void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
00172a  4770              BX       lr
;;;3498   {									//Должна вызываться при изменении кол-ва источников в структуре
;;;3499   
;;;3500   }
;;;3501   
                          ENDP

                  vent_resurs_hndl PROC
;;;3503   //-----------------------------------------------
;;;3504   void vent_resurs_hndl(void)
00172c  4770              BX       lr
;;;3505   {
;;;3506   
;;;3507   }
;;;3508   
                          ENDP

                  vent_hndl PROC
;;;3509   //-----------------------------------------------
;;;3510   void vent_hndl(void)
00172e  4770              BX       lr
;;;3511   {
;;;3512   
;;;3513   }
;;;3514   
                          ENDP

                  |L1.5936|
                          DCD      NUMIST
                  |L1.5940|
                          DCD      num_necc
                  |L1.5944|
                          DCD      IZMAX
                  |L1.5948|
                          DCD      ||area_number.30||
                  |L1.5952|
                          DCD      speedChIsOn
                  |L1.5956|
                          DCD      speedChrgCurr
                  |L1.5960|
                          DCD      bat
                  |L1.5964|
                          DCD      REG_SPEED
                  |L1.5968|
                          DCD      u_necc
                  |L1.5972|
                          DCD      bps_U
                  |L1.5976|
                          DCD      bps
                  |L1.5980|
                          DCD      mess_data
                  |L1.5984|
                          DCD      load_U
                  |L1.5988|
                          DCD      USIGN
                  |L1.5992|
                          DCD      bIBAT_SMKLBR
                  |L1.5996|
                          DCD      UOUT_
                  |L1.6000|
                          DCD      in_U
                  |L1.6004|
                          DCD      ||.bss||+0x440
                  |L1.6008|
                          DCD      NUMSK

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  4902              LDR      r1,|L2.12|
000002  f24060f9          MOV      r0,#0x6f9
000006  8508              STRH     r0,[r1,#0x28]
000008  4770              BX       lr
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      ||area_number.30||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4c80              LDR      r4,|L3.520|
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1
00000c  b200              SXTH     r0,r0
00000e  f7fffffe          BL       abs_pal
000012  1da5              ADDS     r5,r4,#6
000014  8028              STRH     r0,[r5,#0]
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]
000032  f44f7196          MOV      r1,#0x12c
000036  f1a40634          SUB      r6,r4,#0x34
00003a  4288              CMP      r0,r1
00003c  da02              BGE      |L3.68|
00003e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000040  82f0              STRH     r0,[r6,#0x16]
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]  ; adc_self_ch_disp
000048  4288              CMP      r0,r1
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
00004e  82f0              STRH     r0,[r6,#0x16]
000050  e005              B        |L3.94|
                  |L3.82|
000052  f9b50000          LDRSH    r0,[r5,#0]  ; adc_self_ch_disp
000056  4288              CMP      r0,r1
000058  da01              BGE      |L3.94|
00005a  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
00005c  82f0              STRH     r0,[r6,#0x16]
                  |L3.94|
00005e  78b7              LDRB     r7,[r6,#2]  ; adc_ch_net
000060  2200              MOVS     r2,#0
000062  b3f7              CBZ      r7,|L3.226|
000064  7973              LDRB     r3,[r6,#5]  ; adc_window_flag
000066  4869              LDR      r0,|L3.524|
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b61016          LDRSH    r1,[r6,#0x16]  ; adc_result
00006e  6804              LDR      r4,[r0,#0]  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2
000074  6004              STR      r4,[r0,#0]  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2
00007c  6044              STR      r4,[r0,#4]  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2
000084  6084              STR      r4,[r0,#8]  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]  ; main_power_buffer
000088  eb0401a1          ADD      r1,r4,r1,ASR #2
00008c  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
                  |L3.142|
00008e  f9b61016          LDRSH    r1,[r6,#0x16]  ; adc_result
000092  2964              CMP      r1,#0x64
000094  da04              BGE      |L3.160|
000096  8b71              LDRH     r1,[r6,#0x1a]  ; adc_zero_cnt
000098  f1010101          ADD      r1,r1,#1
00009c  8371              STRH     r1,[r6,#0x1a]
00009e  e000              B        |L3.162|
                  |L3.160|
0000a0  8372              STRH     r2,[r6,#0x1a]
                  |L3.162|
0000a2  f9b6401a          LDRSH    r4,[r6,#0x1a]  ; adc_zero_cnt
0000a6  f44f61fa          MOV      r1,#0x7d0
0000aa  428c              CMP      r4,r1
0000ac  db05              BLT      |L3.186|
0000ae  8371              STRH     r1,[r6,#0x1a]
0000b0  6002              STR      r2,[r0,#0]  ; main_power_buffer
0000b2  6042              STR      r2,[r0,#4]  ; main_power_buffer
0000b4  6082              STR      r2,[r0,#8]  ; main_power_buffer
0000b6  60c2              STR      r2,[r0,#0xc]  ; main_power_buffer
0000b8  82b2              STRH     r2,[r6,#0x14]
                  |L3.186|
0000ba  8b71              LDRH     r1,[r6,#0x1a]  ; adc_zero_cnt
0000bc  2905              CMP      r1,#5
0000be  d14f              BNE      |L3.352|
0000c0  b1bb              CBZ      r3,|L3.242|
0000c2  8b31              LDRH     r1,[r6,#0x18]  ; adc_gorb_cnt
0000c4  f1010101          ADD      r1,r1,#1
0000c8  b209              SXTH     r1,r1
0000ca  8331              STRH     r1,[r6,#0x18]
0000cc  f5b17f00          CMP      r1,#0x200
0000d0  db00              BLT      |L3.212|
0000d2  8332              STRH     r2,[r6,#0x18]
                  |L3.212|
0000d4  f9b61018          LDRSH    r1,[r6,#0x18]  ; adc_gorb_cnt
0000d8  064c              LSLS     r4,r1,#25
0000da  d10a              BNE      |L3.242|
0000dc  ea4f11e1          ASR      r1,r1,#7
0000e0  e000              B        |L3.228|
                  |L3.226|
0000e2  e015              B        |L3.272|
                  |L3.228|
0000e4  f8504021          LDR      r4,[r0,r1,LSL #2]
0000e8  ea4f2424          ASR      r4,r4,#8
0000ec  82b4              STRH     r4,[r6,#0x14]
0000ee  f8402021          STR      r2,[r0,r1,LSL #2]
                  |L3.242|
0000f2  f9b6001c          LDRSH    r0,[r6,#0x1c]  ; adc_window_cnt
0000f6  2896              CMP      r0,#0x96
0000f8  dd01              BLE      |L3.254|
0000fa  b103              CBZ      r3,|L3.254|
0000fc  7172              STRB     r2,[r6,#5]
                  |L3.254|
0000fe  381f              SUBS     r0,r0,#0x1f
000100  2827              CMP      r0,#0x27
000102  d22d              BCS      |L3.352|
000104  7970              LDRB     r0,[r6,#5]  ; adc_window_flag
000106  bb58              CBNZ     r0,|L3.352|
000108  f04f0001          MOV      r0,#1
00010c  7170              STRB     r0,[r6,#5]
00010e  e027              B        |L3.352|
                  |L3.272|
000110  483f              LDR      r0,|L3.528|
000112  78f5              LDRB     r5,[r6,#3]  ; adc_ch
000114  7933              LDRB     r3,[r6,#4]  ; adc_ch_cnt
000116  eb001485          ADD      r4,r0,r5,LSL #6
00011a  f9b61016          LDRSH    r1,[r6,#0x16]  ; adc_result
00011e  f8441023          STR      r1,[r4,r3,LSL #2]
000122  0798              LSLS     r0,r3,#30
000124  d10f              BNE      |L3.326|
000126  4601              MOV      r1,r0
                  |L3.296|
000128  f854c020          LDR      r12,[r4,r0,LSL #2]
00012c  4461              ADD      r1,r1,r12
00012e  f1000001          ADD      r0,r0,#1
000132  b2c0              UXTB     r0,r0
000134  2810              CMP      r0,#0x10
000136  d3f7              BCC      |L3.296|
000138  ea4f1021          ASR      r0,r1,#4
00013c  4933              LDR      r1,|L3.524|
00013e  f1a10120          SUB      r1,r1,#0x20
000142  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L3.326|
000146  1c6d              ADDS     r5,r5,#1
000148  b2e8              UXTB     r0,r5
00014a  70f0              STRB     r0,[r6,#3]
00014c  2810              CMP      r0,#0x10
00014e  d307              BCC      |L3.352|
000150  70f2              STRB     r2,[r6,#3]
000152  f1030301          ADD      r3,r3,#1
000156  b2d8              UXTB     r0,r3
000158  7130              STRB     r0,[r6,#4]
00015a  2810              CMP      r0,#0x10
00015c  d300              BCC      |L3.352|
00015e  7132              STRB     r2,[r6,#4]
                  |L3.352|
000160  7072              STRB     r2,[r6,#1]
000162  f1070701          ADD      r7,r7,#1
000166  f0070001          AND      r0,r7,#1
00016a  70b0              STRB     r0,[r6,#2]
00016c  4a29              LDR      r2,|L3.532|
00016e  b130              CBZ      r0,|L3.382|
000170  6810              LDR      r0,[r2,#0]
000172  f02000ff          BIC      r0,r0,#0xff
000176  f1000004          ADD      r0,r0,#4
00017a  6010              STR      r0,[r2,#0]
00017c  e03d              B        |L3.506|
                  |L3.382|
00017e  78f1              LDRB     r1,[r6,#3]  ; adc_ch
000180  0708              LSLS     r0,r1,#28
000182  d406              BMI      |L3.402|
000184  6810              LDR      r0,[r2,#0]
000186  f02000ff          BIC      r0,r0,#0xff
00018a  f1000001          ADD      r0,r0,#1
00018e  6010              STR      r0,[r2,#0]
000190  e005              B        |L3.414|
                  |L3.402|
000192  6810              LDR      r0,[r2,#0]
000194  f02000ff          BIC      r0,r0,#0xff
000198  f1000002          ADD      r0,r0,#2
00019c  6010              STR      r0,[r2,#0]
                  |L3.414|
00019e  481e              LDR      r0,|L3.536|
0001a0  6803              LDR      r3,[r0,#0]
0001a2  f0435380          ORR      r3,r3,#0x10000000
0001a6  6003              STR      r3,[r0,#0]
0001a8  6a03              LDR      r3,[r0,#0x20]
0001aa  f0434380          ORR      r3,r3,#0x40000000
0001ae  6203              STR      r3,[r0,#0x20]
0001b0  6e03              LDR      r3,[r0,#0x60]
0001b2  f0436380          ORR      r3,r3,#0x4000000
0001b6  6603              STR      r3,[r0,#0x60]
0001b8  07cb              LSLS     r3,r1,#31
0001ba  d00a              BEQ      |L3.466|
0001bc  6943              LDR      r3,[r0,#0x14]
0001be  f0435380          ORR      r3,r3,#0x10000000
0001c2  6143              STR      r3,[r0,#0x14]
                  |L3.452|
0001c4  078b              LSLS     r3,r1,#30
0001c6  d409              BMI      |L3.476|
0001c8  6b43              LDR      r3,[r0,#0x34]
0001ca  f0234380          BIC      r3,r3,#0x40000000
0001ce  6343              STR      r3,[r0,#0x34]
0001d0  e008              B        |L3.484|
                  |L3.466|
0001d2  6943              LDR      r3,[r0,#0x14]
0001d4  f0235380          BIC      r3,r3,#0x10000000
0001d8  6143              STR      r3,[r0,#0x14]
0001da  e7f3              B        |L3.452|
                  |L3.476|
0001dc  6b43              LDR      r3,[r0,#0x34]
0001de  f0434380          ORR      r3,r3,#0x40000000
0001e2  6343              STR      r3,[r0,#0x34]
                  |L3.484|
0001e4  0749              LSLS     r1,r1,#29
0001e6  d404              BMI      |L3.498|
0001e8  6f41              LDR      r1,[r0,#0x74]
0001ea  f0216180          BIC      r1,r1,#0x4000000
0001ee  6741              STR      r1,[r0,#0x74]
0001f0  e003              B        |L3.506|
                  |L3.498|
0001f2  6f41              LDR      r1,[r0,#0x74]
0001f4  f0416180          ORR      r1,r1,#0x4000000
0001f8  6741              STR      r1,[r0,#0x74]
                  |L3.506|
0001fa  6810              LDR      r0,[r2,#0]
0001fc  f0407080          ORR      r0,r0,#0x1000000
000200  6010              STR      r0,[r2,#0]
000202  e8bd81f0          POP      {r4-r8,pc}
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP

000206  0000              DCW      0x0000
                  |L3.520|
                          DCD      ||area_number.30||+0x34
                  |L3.524|
                          DCD      ||.bss||+0x420
                  |L3.528|
                          DCD      ||.bss||
                  |L3.532|
                          DCD      0x40034000
                  |L3.536|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  bps_hndl PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  4770              BX       lr
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  4770              BX       lr
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP


                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  ipsBlckHndl PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  b510              PUSH     {r4,lr}
000002  4b15              LDR      r3,|L6.88|
000004  f04f0000          MOV      r0,#0
000008  8018              STRH     r0,[r3,#0]
00000a  4814              LDR      r0,|L6.92|
00000c  f04f0401          MOV      r4,#1
000010  f44f62fa          MOV      r2,#0x7d0
000014  f9b01000          LDRSH    r1,[r0,#0]  ; ipsBlckSrc
000018  4811              LDR      r0,|L6.96|
00001a  2901              CMP      r1,#1
00001c  f9b00000          LDRSH    r0,[r0,#0]
000020  d006              BEQ      |L6.48|
000022  2902              CMP      r1,#2
000024  d10f              BNE      |L6.70|
000026  490f              LDR      r1,|L6.100|
000028  f9b1101a          LDRSH    r1,[r1,#0x1a]
00002c  b160              CBZ      r0,|L6.72|
00002e  e00d              B        |L6.76|
                  |L6.48|
000030  490c              LDR      r1,|L6.100|
000032  f9b11016          LDRSH    r1,[r1,#0x16]
000036  b908              CBNZ     r0,|L6.60|
000038  4291              CMP      r1,r2
00003a  dc03              BGT      |L6.68|
                  |L6.60|
00003c  2801              CMP      r0,#1
00003e  d102              BNE      |L6.70|
000040  4291              CMP      r1,r2
000042  da00              BGE      |L6.70|
                  |L6.68|
000044  801c              STRH     r4,[r3,#0]
                  |L6.70|
000046  bd10              POP      {r4,pc}
                  |L6.72|
000048  4291              CMP      r1,r2
00004a  dc03              BGT      |L6.84|
                  |L6.76|
00004c  2801              CMP      r0,#1
00004e  d1fa              BNE      |L6.70|
000050  4291              CMP      r1,r2
000052  daf8              BGE      |L6.70|
                  |L6.84|
000054  801c              STRH     r4,[r3,#0]
000056  bd10              POP      {r4,pc}
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP

                  |L6.88|
                          DCD      ipsBlckStat
                  |L6.92|
                          DCD      ipsBlckSrc
                  |L6.96|
                          DCD      ipsBlckLog
                  |L6.100|
                          DCD      ||.bss||+0x400

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  bps_drv PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  eb060086          ADD      r0,r6,r6,LSL #2
00000a  eb0001c6          ADD      r1,r0,r6,LSL #3
00000e  4863              LDR      r0,|L7.412|
000010  f8102031          LDRB     r2,[r0,r1,LSL #3]
000014  2a03              CMP      r2,#3
000016  d177              BNE      |L7.264|
000018  eb0004c1          ADD      r4,r0,r1,LSL #3
00001c  f8945046          LDRB     r5,[r4,#0x46]
000020  07a8              LSLS     r0,r5,#30
000022  d517              BPL      |L7.84|
000024  f9b4104a          LDRSH    r1,[r4,#0x4a]
000028  f44f6296          MOV      r2,#0x4b0
00002c  4291              CMP      r1,r2
00002e  da22              BGE      |L7.118|
000030  f1010101          ADD      r1,r1,#1
000034  b208              SXTH     r0,r1
000036  f8a4004a          STRH     r0,[r4,#0x4a]
00003a  4290              CMP      r0,r2
00003c  db1b              BLT      |L7.118|
00003e  f8a4204a          STRH     r2,[r4,#0x4a]
000042  7860              LDRB     r0,[r4,#1]
000044  07c0              LSLS     r0,r0,#31
000046  d116              BNE      |L7.118|
000048  2201              MOVS     r2,#1
00004a  2100              MOVS     r1,#0
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       avar_bps_hndl
000052  e010              B        |L7.118|
                  |L7.84|
000054  f9b4104a          LDRSH    r1,[r4,#0x4a]
000058  b169              CBZ      r1,|L7.118|
00005a  f1a10101          SUB      r1,r1,#1
00005e  b208              SXTH     r0,r1
000060  f8a4004a          STRH     r0,[r4,#0x4a]
000064  b938              CBNZ     r0,|L7.118|
000066  7860              LDRB     r0,[r4,#1]
000068  07c0              LSLS     r0,r0,#31
00006a  d004              BEQ      |L7.118|
00006c  2200              MOVS     r2,#0
00006e  4611              MOV      r1,r2
000070  4630              MOV      r0,r6
000072  f7fffffe          BL       avar_bps_hndl
                  |L7.118|
000076  0728              LSLS     r0,r5,#28
000078  f04f070a          MOV      r7,#0xa
00007c  f04f0800          MOV      r8,#0
000080  d515              BPL      |L7.174|
000082  f9b4104c          LDRSH    r1,[r4,#0x4c]
000086  290a              CMP      r1,#0xa
000088  da26              BGE      |L7.216|
00008a  f1010101          ADD      r1,r1,#1
00008e  b208              SXTH     r0,r1
000090  f8a4004c          STRH     r0,[r4,#0x4c]
000094  280a              CMP      r0,#0xa
000096  db1f              BLT      |L7.216|
000098  f8a4704c          STRH     r7,[r4,#0x4c]
00009c  7860              LDRB     r0,[r4,#1]
00009e  0780              LSLS     r0,r0,#30
0000a0  d41a              BMI      |L7.216|
0000a2  2201              MOVS     r2,#1
0000a4  4611              MOV      r1,r2
0000a6  4630              MOV      r0,r6
0000a8  f7fffffe          BL       avar_bps_hndl
0000ac  e014              B        |L7.216|
                  |L7.174|
0000ae  f9b4104c          LDRSH    r1,[r4,#0x4c]
0000b2  2900              CMP      r1,#0
0000b4  dd0d              BLE      |L7.210|
0000b6  f1a10101          SUB      r1,r1,#1
0000ba  b208              SXTH     r0,r1
0000bc  f8a4004c          STRH     r0,[r4,#0x4c]
0000c0  b950              CBNZ     r0,|L7.216|
0000c2  f04f0200          MOV      r2,#0
0000c6  f04f0101          MOV      r1,#1
0000ca  4630              MOV      r0,r6
0000cc  f7fffffe          BL       avar_bps_hndl
0000d0  e002              B        |L7.216|
                  |L7.210|
0000d2  da01              BGE      |L7.216|
0000d4  f8a4804c          STRH     r8,[r4,#0x4c]
                  |L7.216|
0000d8  06e8              LSLS     r0,r5,#27
0000da  d516              BPL      |L7.266|
0000dc  f9b4004e          LDRSH    r0,[r4,#0x4e]
0000e0  280a              CMP      r0,#0xa
0000e2  da20              BGE      |L7.294|
0000e4  f1000001          ADD      r0,r0,#1
0000e8  b200              SXTH     r0,r0
0000ea  f8a4004e          STRH     r0,[r4,#0x4e]
0000ee  280a              CMP      r0,#0xa
0000f0  db19              BLT      |L7.294|
0000f2  f8a4704e          STRH     r7,[r4,#0x4e]
0000f6  7860              LDRB     r0,[r4,#1]
0000f8  0740              LSLS     r0,r0,#29
0000fa  d414              BMI      |L7.294|
0000fc  2201              MOVS     r2,#1
0000fe  2102              MOVS     r1,#2
000100  4630              MOV      r0,r6
000102  f7fffffe          BL       avar_bps_hndl
000106  e00e              B        |L7.294|
                  |L7.264|
000108  e045              B        |L7.406|
                  |L7.266|
00010a  f9b4004e          LDRSH    r0,[r4,#0x4e]
00010e  b150              CBZ      r0,|L7.294|
000110  f1a00001          SUB      r0,r0,#1
000114  b200              SXTH     r0,r0
000116  f8a4004e          STRH     r0,[r4,#0x4e]
00011a  b920              CBNZ     r0,|L7.294|
00011c  2200              MOVS     r2,#0
00011e  2102              MOVS     r1,#2
000120  4630              MOV      r0,r6
000122  f7fffffe          BL       avar_bps_hndl
                  |L7.294|
000126  7860              LDRB     r0,[r4,#1]
000128  0700              LSLS     r0,r0,#28
00012a  d003              BEQ      |L7.308|
00012c  f04f0005          MOV      r0,#5
000130  70a0              STRB     r0,[r4,#2]
000132  e016              B        |L7.354|
                  |L7.308|
000134  481a              LDR      r0,|L7.416|
000136  7800              LDRB     r0,[r0,#0]  ; net_av
000138  b128              CBZ      r0,|L7.326|
00013a  78e0              LDRB     r0,[r4,#3]
00013c  2814              CMP      r0,#0x14
00013e  d902              BLS      |L7.326|
000140  f8848002          STRB     r8,[r4,#2]
000144  e00d              B        |L7.354|
                  |L7.326|
000146  f8940046          LDRB     r0,[r4,#0x46]
00014a  0680              LSLS     r0,r0,#26
00014c  d503              BPL      |L7.342|
00014e  f04f0003          MOV      r0,#3
000152  70a0              STRB     r0,[r4,#2]
000154  e005              B        |L7.354|
                  |L7.342|
000156  78e0              LDRB     r0,[r4,#3]
000158  2814              CMP      r0,#0x14
00015a  d202              BCS      |L7.354|
00015c  f04f0002          MOV      r0,#2
000160  70a0              STRB     r0,[r4,#2]
                  |L7.354|
000162  78e0              LDRB     r0,[r4,#3]
000164  280a              CMP      r0,#0xa
000166  d306              BCC      |L7.374|
000168  f894002c          LDRB     r0,[r4,#0x2c]
00016c  f0400080          ORR      r0,r0,#0x80
000170  f884002c          STRB     r0,[r4,#0x2c]
000174  e005              B        |L7.386|
                  |L7.374|
000176  f894002c          LDRB     r0,[r4,#0x2c]
00017a  f000007f          AND      r0,r0,#0x7f
00017e  f884002c          STRB     r0,[r4,#0x2c]
                  |L7.386|
000182  4908              LDR      r1,|L7.420|
000184  f9b40054          LDRSH    r0,[r4,#0x54]
000188  f9b1100e          LDRSH    r1,[r1,#0xe]  ; cntrl_stat
00018c  4408              ADD      r0,r0,r1
00018e  6360              STR      r0,[r4,#0x34]
000190  f44f60fa          MOV      r0,#0x7d0
000194  63a0              STR      r0,[r4,#0x38]
                  |L7.406|
000196  e8bd81f0          POP      {r4-r8,pc}
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP

00019a  0000              DCW      0x0000
                  |L7.412|
                          DCD      bps
                  |L7.416|
                          DCD      net_av
                  |L7.420|
                          DCD      ||area_number.30||

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  bat_hndl PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  b570              PUSH     {r4-r6,lr}
000002  20c8              MOVS     r0,#0xc8
000004  f7fffffe          BL       mess_find_unvol
000008  493a              LDR      r1,|L8.244|
00000a  2200              MOVS     r2,#0
00000c  b3a8              CBZ      r0,|L8.122|
00000e  4b3a              LDR      r3,|L8.248|
000010  2401              MOVS     r4,#1
000012  6818              LDR      r0,[r3,#0]  ; mess_data
000014  28c9              CMP      r0,#0xc9
000016  d01c              BEQ      |L8.82|
000018  28ca              CMP      r0,#0xca
00001a  d02f              BEQ      |L8.124|
00001c  4610              MOV      r0,r2
                  |L8.30|
00001e  eb000340          ADD      r3,r0,r0,LSL #1
000022  eb031300          ADD      r3,r3,r0,LSL #4
000026  f8012023          STRB     r2,[r1,r3,LSL #2]
00002a  f1000001          ADD      r0,r0,#1
00002e  b2c0              UXTB     r0,r0
000030  2802              CMP      r0,#2
000032  d3f4              BCC      |L8.30|
                  |L8.52|
000034  f04f0000          MOV      r0,#0
                  |L8.56|
000038  eb000340          ADD      r3,r0,r0,LSL #1
00003c  eb031300          ADD      r3,r3,r0,LSL #4
000040  f8115023          LDRB     r5,[r1,r3,LSL #2]
000044  2d14              CMP      r5,#0x14
000046  d939              BLS      |L8.188|
000048  eb010383          ADD      r3,r1,r3,LSL #2
00004c  f883403c          STRB     r4,[r3,#0x3c]
000050  e038              B        |L8.196|
                  |L8.82|
000052  f04f0000          MOV      r0,#0
                  |L8.86|
000056  eb000340          ADD      r3,r0,r0,LSL #1
00005a  eb031500          ADD      r5,r3,r0,LSL #4
00005e  f8113025          LDRB     r3,[r1,r5,LSL #2]
000062  2b32              CMP      r3,#0x32
000064  d203              BCS      |L8.110|
000066  f1030301          ADD      r3,r3,#1
00006a  f8013025          STRB     r3,[r1,r5,LSL #2]
                  |L8.110|
00006e  f1000001          ADD      r0,r0,#1
000072  b2c0              UXTB     r0,r0
000074  2802              CMP      r0,#2
000076  d3ee              BCC      |L8.86|
000078  e7dc              B        |L8.52|
                  |L8.122|
00007a  e029              B        |L8.208|
                  |L8.124|
00007c  f04f0000          MOV      r0,#0
000080  685e              LDR      r6,[r3,#4]
                  |L8.130|
000082  fa04f300          LSL      r3,r4,r0
000086  421e              TST      r6,r3
000088  d00c              BEQ      |L8.164|
00008a  eb000340          ADD      r3,r0,r0,LSL #1
00008e  eb031500          ADD      r5,r3,r0,LSL #4
000092  f8113025          LDRB     r3,[r1,r5,LSL #2]
000096  2b32              CMP      r3,#0x32
000098  d20a              BCS      |L8.176|
00009a  f1030301          ADD      r3,r3,#1
00009e  f8013025          STRB     r3,[r1,r5,LSL #2]
0000a2  e005              B        |L8.176|
                  |L8.164|
0000a4  eb000340          ADD      r3,r0,r0,LSL #1
0000a8  eb031300          ADD      r3,r3,r0,LSL #4
0000ac  f8012023          STRB     r2,[r1,r3,LSL #2]
                  |L8.176|
0000b0  f1000001          ADD      r0,r0,#1
0000b4  b2c0              UXTB     r0,r0
0000b6  2802              CMP      r0,#2
0000b8  d3e3              BCC      |L8.130|
0000ba  e7bb              B        |L8.52|
                  |L8.188|
0000bc  eb010383          ADD      r3,r1,r3,LSL #2
0000c0  f883203c          STRB     r2,[r3,#0x3c]
                  |L8.196|
0000c4  f1000001          ADD      r0,r0,#1
0000c8  b2c0              UXTB     r0,r0
0000ca  2802              CMP      r0,#2
0000cc  d3b4              BCC      |L8.56|
0000ce  bd70              POP      {r4-r6,pc}
                  |L8.208|
0000d0  f04f0000          MOV      r0,#0
                  |L8.212|
0000d4  eb000340          ADD      r3,r0,r0,LSL #1
0000d8  eb031300          ADD      r3,r3,r0,LSL #4
0000dc  f8012023          STRB     r2,[r1,r3,LSL #2]
0000e0  eb010383          ADD      r3,r1,r3,LSL #2
0000e4  f883203c          STRB     r2,[r3,#0x3c]
0000e8  f1000001          ADD      r0,r0,#1
0000ec  b2c0              UXTB     r0,r0
0000ee  2802              CMP      r0,#2
0000f0  d3f0              BCC      |L8.212|
0000f2  bd70              POP      {r4-r6,pc}
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP

                  |L8.244|
                          DCD      bat
                  |L8.248|
                          DCD      mess_data

                          AREA ||area_number.9||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.text||
                  klimat_hndl PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4d66              LDR      r5,|L9.416|
000006  4867              LDR      r0,|L9.420|
000008  4c67              LDR      r4,|L9.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
00000e  f9b02000          LDRSH    r2,[r0,#0]  ; TBOXMAX
000012  f9b40000          LDRSH    r0,[r4,#0]
000016  4291              CMP      r1,r2
000018  dd03              BLE      |L9.34|
00001a  f1000001          ADD      r0,r0,#1
00001e  8020              STRH     r0,[r4,#0]
000020  e003              B        |L9.42|
                  |L9.34|
000022  da02              BGE      |L9.42|
000024  f1a00001          SUB      r0,r0,#1
000028  8020              STRH     r0,[r4,#0]
                  |L9.42|
00002a  2206              MOVS     r2,#6
00002c  2100              MOVS     r1,#0
00002e  485e              LDR      r0,|L9.424|
000030  f7fffffe          BL       gran
000034  f9b40000          LDRSH    r0,[r4,#0]  ; av_tbox_cnt
000038  495c              LDR      r1,|L9.428|
00003a  2601              MOVS     r6,#1
00003c  2805              CMP      r0,#5
00003e  dd00              BLE      |L9.66|
000040  700e              STRB     r6,[r1,#0]
                  |L9.66|
000042  2400              MOVS     r4,#0
000044  2801              CMP      r0,#1
000046  da00              BGE      |L9.74|
000048  700c              STRB     r4,[r1,#0]
                  |L9.74|
00004a  4959              LDR      r1,|L9.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]  ; t_box
000050  4a58              LDR      r2,|L9.436|
000052  f9b11000          LDRSH    r1,[r1,#0]  ; TBOXREG
000056  4f58              LDR      r7,|L9.440|
000058  1e8b              SUBS     r3,r1,#2
00005a  4298              CMP      r0,r3
00005c  da0f              BGE      |L9.126|
00005e  f9921000          LDRSB    r1,[r2,#0]  ; t_box_cnt
000062  291e              CMP      r1,#0x1e
000064  da1e              BGE      |L9.164|
000066  f1010101          ADD      r1,r1,#1
00006a  b249              SXTB     r1,r1
00006c  7011              STRB     r1,[r2,#0]
00006e  291e              CMP      r1,#0x1e
000070  db18              BLT      |L9.164|
000072  8839              LDRH     r1,[r7,#0]  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1
000078  8039              STRH     r1,[r7,#0]
00007a  7014              STRB     r4,[r2,#0]
00007c  e012              B        |L9.164|
                  |L9.126|
00007e  4288              CMP      r0,r1
000080  dd0f              BLE      |L9.162|
000082  f9921000          LDRSB    r1,[r2,#0]  ; t_box_cnt
000086  291e              CMP      r1,#0x1e
000088  da0c              BGE      |L9.164|
00008a  f1010101          ADD      r1,r1,#1
00008e  b249              SXTB     r1,r1
000090  7011              STRB     r1,[r2,#0]
000092  291e              CMP      r1,#0x1e
000094  db06              BLT      |L9.164|
000096  8839              LDRH     r1,[r7,#0]  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1
00009c  8039              STRH     r1,[r7,#0]
00009e  7014              STRB     r4,[r2,#0]
0000a0  e000              B        |L9.164|
                  |L9.162|
0000a2  7014              STRB     r4,[r2,#0]
                  |L9.164|
0000a4  4945              LDR      r1,|L9.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]  ; TBOXVENTMAX
0000aa  4288              CMP      r0,r1
0000ac  dd05              BLE      |L9.186|
0000ae  2214              MOVS     r2,#0x14
0000b0  2100              MOVS     r1,#0
0000b2  4841              LDR      r0,|L9.440|
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L9.202|
                  |L9.186|
0000ba  4841              LDR      r0,|L9.448|
0000bc  2100              MOVS     r1,#0
0000be  8800              LDRH     r0,[r0,#0]  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9
0000c2  b202              SXTH     r2,r0
0000c4  483c              LDR      r0,|L9.440|
0000c6  f7fffffe          BL       gran
                  |L9.202|
0000ca  20f0              MOVS     r0,#0xf0
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L9.222|
0000d2  483c              LDR      r0,|L9.452|
0000d4  6801              LDR      r1,[r0,#0]  ; mess_data
0000d6  29f1              CMP      r1,#0xf1
0000d8  d101              BNE      |L9.222|
0000da  6840              LDR      r0,[r0,#4]  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]
                  |L9.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]  ; main_vent_pos
0000e2  4839              LDR      r0,|L9.456|
0000e4  2901              CMP      r1,#1
0000e6  dc01              BGT      |L9.236|
0000e8  7006              STRB     r6,[r0,#0]
0000ea  e000              B        |L9.238|
                  |L9.236|
0000ec  7004              STRB     r4,[r0,#0]
                  |L9.238|
0000ee  4837              LDR      r0,|L9.460|
0000f0  f8df80dc          LDR      r8,|L9.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]  ; TBATDISABLE
0000f8  f1a00132          SUB      r1,r0,#0x32
0000fc  2928              CMP      r1,#0x28
0000fe  d821              BHI      |L9.324|
000100  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
000104  4f33              LDR      r7,|L9.468|
000106  4281              CMP      r1,r0
000108  dd03              BLE      |L9.274|
00010a  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1
000110  8038              STRH     r0,[r7,#0]
                  |L9.274|
000112  4831              LDR      r0,|L9.472|
000114  f9b00000          LDRSH    r0,[r0,#0]  ; TBATENABLE
000118  4281              CMP      r1,r0
00011a  da03              BGE      |L9.292|
00011c  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
00011e  f1a00001          SUB      r0,r0,#1
000122  8038              STRH     r0,[r7,#0]
                  |L9.292|
000124  2206              MOVS     r2,#6
000126  2100              MOVS     r1,#0
000128  482a              LDR      r0,|L9.468|
00012a  f7fffffe          BL       gran
00012e  f9b70000          LDRSH    r0,[r7,#0]  ; tbatdisable_cnt
000132  2805              CMP      r0,#5
000134  dd01              BLE      |L9.314|
000136  f8886000          STRB     r6,[r8,#0]
                  |L9.314|
00013a  2801              CMP      r0,#1
00013c  da04              BGE      |L9.328|
00013e  f8884000          STRB     r4,[r8,#0]
000142  e001              B        |L9.328|
                  |L9.324|
000144  f8884000          STRB     r4,[r8,#0]
                  |L9.328|
000148  4824              LDR      r0,|L9.476|
00014a  4f25              LDR      r7,|L9.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32
000154  291e              CMP      r1,#0x1e
000156  d820              BHI      |L9.410|
000158  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
00015c  4d21              LDR      r5,|L9.484|
00015e  4281              CMP      r1,r0
000160  dd03              BLE      |L9.362|
000162  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000164  f1000001          ADD      r0,r0,#1
000168  8028              STRH     r0,[r5,#0]
                  |L9.362|
00016a  481f              LDR      r0,|L9.488|
00016c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADENABLE
000170  4281              CMP      r1,r0
000172  da03              BGE      |L9.380|
000174  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1
00017a  8028              STRH     r0,[r5,#0]
                  |L9.380|
00017c  2206              MOVS     r2,#6
00017e  2100              MOVS     r1,#0
000180  4818              LDR      r0,|L9.484|
000182  f7fffffe          BL       gran
000186  f9b50000          LDRSH    r0,[r5,#0]  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5
00018c  dd00              BLE      |L9.400|
00018e  703e              STRB     r6,[r7,#0]
                  |L9.400|
000190  2801              CMP      r0,#1
000192  da00              BGE      |L9.406|
000194  703c              STRB     r4,[r7,#0]
                  |L9.406|
000196  e8bd81f0          POP      {r4-r8,pc}
                  |L9.410|
00019a  703c              STRB     r4,[r7,#0]
00019c  e7fb              B        |L9.406|
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP

00019e  0000              DCW      0x0000
                  |L9.416|
                          DCD      t_box
                  |L9.420|
                          DCD      TBOXMAX
                  |L9.424|
                          DCD      av_tbox_cnt
                  |L9.428|
                          DCD      av_tbox_stat
                  |L9.432|
                          DCD      TBOXREG
                  |L9.436|
                          DCD      t_box_cnt
                  |L9.440|
                          DCD      main_vent_pos
                  |L9.444|
                          DCD      TBOXVENTMAX
                  |L9.448|
                          DCD      pos_vent
                  |L9.452|
                          DCD      mess_data
                  |L9.456|
                          DCD      mixer_vent_stat
                  |L9.460|
                          DCD      TBATDISABLE
                  |L9.464|
                          DCD      tbatdisable_stat
                  |L9.468|
                          DCD      tbatdisable_cnt
                  |L9.472|
                          DCD      TBATENABLE
                  |L9.476|
                          DCD      TLOADDISABLE
                  |L9.480|
                          DCD      tloaddisable_stat
                  |L9.484|
                          DCD      tloaddisable_cnt
                  |L9.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.10||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.text||
                  zar_superviser_start PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  4a04              LDR      r2,|L10.20|
000002  f04f0001          MOV      r0,#1
000006  7010              STRB     r0,[r2,#0]
000008  4903              LDR      r1,|L10.24|
00000a  7008              STRB     r0,[r1,#0]
00000c  7050              STRB     r0,[r2,#1]
00000e  7048              STRB     r0,[r1,#1]
000010  4770              BX       lr
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      sign_U
                  |L10.24|
                          DCD      sign_I

                          AREA ||area_number.11||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.text||
                  speedChargeHndl PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  4770              BX       lr
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP


                          AREA ||area_number.12||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.text||
                  speedChargeStartStop PROC
;;;243    //-----------------------------------------------
;;;244    void ke_start(char in)
000000  4770              BX       lr
;;;245    {          
;;;246    
;;;247    }
;;;248    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  cntrl_stat_buff
                          %        64

                          AREA ||area_number.15||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.15||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.16||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.16||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.21||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.21||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.22||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.22||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.23||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.24||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.24||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.26||, DATA, ALIGN=1

                          EXPORTAS ||area_number.26||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.27||, DATA, ALIGN=0

                          EXPORTAS ||area_number.27||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.28||, DATA, ALIGN=1

                          EXPORTAS ||area_number.28||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  vent_stat
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=1

                          EXPORTAS ||area_number.30||, ||.data||
                  cntrlStatIsDownCnt
000000  00                DCB      0x00
                  adc_self_ch_cnt
000001  00                DCB      0x00
                  adc_ch_net
000002  00                DCB      0x00
                  adc_ch
000003  00                DCB      0x00
                  adc_ch_cnt
000004  00                DCB      0x00
                  adc_window_flag
000005  00                DCB      0x00
                  ch_cnt0
000006  00                DCB      0x00
                  b1Hz_ch
000007  00                DCB      0x00
                  i
000008  00                DCB      0x00
                  iiii
000009  00                DCB      0x00
                  cntrl_stat_buff_ptr
00000a  00                DCB      0x00
                  num_necc_up
00000b  00                DCB      0x00
                  num_necc_down
00000c  00                DCB      0x00
                  cntrl_hndl_plazma
00000d  00                DCB      0x00
                  cntrl_stat
00000e  04b0              DCW      0x04b0
                  cntrl_stat_old
000010  04b0              DCW      0x04b0
                  num_necc_block_cnt
000012  0000              DCB      0x00,0x00
                  net_buff_
000014  0000              DCB      0x00,0x00
                  adc_result
000016  0000              DCB      0x00,0x00
                  adc_gorb_cnt
000018  0000              DCB      0x00,0x00
                  adc_zero_cnt
00001a  0000              DCB      0x00,0x00
                  adc_window_cnt
00001c  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
00001e  0000              DCB      0x00,0x00
                  cntrl_stat_new
000020  0000              DCB      0x00,0x00
                  Ibmax
000022  0000              DCB      0x00,0x00
                  IZMAX_
000024  0000              DCB      0x00,0x00
                  cntrl_stat_buff_
000026  0000              DCB      0x00,0x00
                  samokalibr_cnt
000028  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
00002a  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
00002c  0000              DCB      0x00,0x00
                  net_metr_buff_
00002e  0000              DCB      0x00,0x00
                          DCDU     0x00000000
                  adc_self_ch_buff
                          DCDU     0x00000000
000038  0000              DCB      0x00,0x00
                  adc_self_ch_disp
00003a  0000              DCB      0x00,0x00
                          DCDU     0x00000000

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  avg_main_cnt
000000  0014              DCW      0x0014

                          AREA ||area_number.32||, DATA, ALIGN=1

                          EXPORTAS ||area_number.32||, ||.data||
                  u_out_reg_main_cnt
000000  000a              DCW      0x000a

                          AREA ||area_number.33||, DATA, ALIGN=1

                          EXPORTAS ||area_number.33||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.34||, DATA, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=0

                          EXPORTAS ||area_number.37||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=1

                          EXPORTAS ||area_number.39||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.40||, DATA, ALIGN=1

                          EXPORTAS ||area_number.40||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.41||, DATA, ALIGN=0

                          EXPORTAS ||area_number.41||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.42||, DATA, ALIGN=0

                          EXPORTAS ||area_number.42||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.43||, DATA, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=1

                          EXPORTAS ||area_number.45||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.46||, DATA, ALIGN=1

                          EXPORTAS ||area_number.46||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.47||, DATA, ALIGN=1

                          EXPORTAS ||area_number.47||, ||.data||
                  plazma_sk
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=0

                          EXPORTAS ||area_number.52||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.53||, DATA, ALIGN=0

                          EXPORTAS ||area_number.53||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.54||, DATA, ALIGN=0

                          EXPORTAS ||area_number.54||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.55||, DATA, ALIGN=1

                          EXPORTAS ||area_number.55||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.56||, DATA, ALIGN=1

                          EXPORTAS ||area_number.56||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.57||, DATA, ALIGN=1

                          EXPORTAS ||area_number.57||, ||.data||
                  Ubpsmax
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.58||, DATA, ALIGN=1

                          EXPORTAS ||area_number.58||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.59||, DATA, ALIGN=2

                          EXPORTAS ||area_number.59||, ||.data||
                  i_avg_max
                          DCD      0x00000000

                          AREA ||area_number.60||, DATA, ALIGN=2

                          EXPORTAS ||area_number.60||, ||.data||
                  i_avg_min
                          DCD      0x00000000

                          AREA ||area_number.61||, DATA, ALIGN=2

                          EXPORTAS ||area_number.61||, ||.data||
                  i_avg_summ
                          DCD      0x00000000

                          AREA ||area_number.62||, DATA, ALIGN=2

                          EXPORTAS ||area_number.62||, ||.data||
                  i_avg
                          DCD      0x00000000

                          AREA ||area_number.63||, DATA, ALIGN=2

                          EXPORTAS ||area_number.63||, ||.data||
                  avg
                          DCD      0x00000000

                          AREA ||area_number.64||, DATA, ALIGN=0

                          EXPORTAS ||area_number.64||, ||.data||
                  bAVG
000000  00                DCB      0x00

                          AREA ||area_number.65||, DATA, ALIGN=0

                          EXPORTAS ||area_number.65||, ||.data||
                  avg_cnt_
000000  00                DCB      0x00

                          AREA ||area_number.66||, DATA, ALIGN=0

                          EXPORTAS ||area_number.66||, ||.data||
                  avg_num
000000  00                DCB      0x00

                          AREA ||area_number.67||, DATA, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.data||
                  bAVG_BLOCK
000000  00                DCB      0x00

                          AREA ||area_number.68||, DATA, ALIGN=0

                          EXPORTAS ||area_number.68||, ||.data||
                  bAVG_DIR
000000  00                DCB      0x00

                          AREA ||area_number.69||, DATA, ALIGN=1

                          EXPORTAS ||area_number.69||, ||.data||
                  main_kb_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.70||, DATA, ALIGN=1

                          EXPORTAS ||area_number.70||, ||.data||
                  kb_cnt_1lev
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.71||, DATA, ALIGN=1

                          EXPORTAS ||area_number.71||, ||.data||
                  kb_cnt_2lev
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.72||, DATA, ALIGN=0

                          EXPORTAS ||area_number.72||, ||.data||
                  kb_full_ver
000000  00                DCB      0x00

                          AREA ||area_number.73||, DATA, ALIGN=0

                          EXPORTAS ||area_number.73||, ||.data||
                  kb_start
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.74||, DATA, ALIGN=0

                          EXPORTAS ||area_number.74||, ||.data||
                  kb_start_ips
000000  00                DCB      0x00

                          AREA ||area_number.75||, DATA, ALIGN=1

                          EXPORTAS ||area_number.75||, ||.data||
                  ibat_ips
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.76||, DATA, ALIGN=1

                          EXPORTAS ||area_number.76||, ||.data||
                  ibat_ips_
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.77||, DATA, ALIGN=0

                          EXPORTAS ||area_number.77||, ||.data||
                  num_of_wrks_bps
000000  00                DCB      0x00

                          AREA ||area_number.78||, DATA, ALIGN=0

                          EXPORTAS ||area_number.78||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.79||, DATA, ALIGN=0

                          EXPORTAS ||area_number.79||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.80||, DATA, ALIGN=0

                          EXPORTAS ||area_number.80||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.81||, DATA, ALIGN=0

                          EXPORTAS ||area_number.81||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.82||, DATA, ALIGN=1

                          EXPORTAS ||area_number.82||, ||.data||
                  bps_on_mask
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.83||, DATA, ALIGN=1

                          EXPORTAS ||area_number.83||, ||.data||
                  bps_off_mask
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.84||, DATA, ALIGN=0

                          EXPORTAS ||area_number.84||, ||.data||
                  sh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.85||, DATA, ALIGN=0

                          EXPORTAS ||area_number.85||, ||.data||
                  b1Hz_sh
000000  00                DCB      0x00

                          AREA ||area_number.86||, DATA, ALIGN=0

                          EXPORTAS ||area_number.86||, ||.data||
                  spc_stat
000000  00                DCB      0x00

                          AREA ||area_number.87||, DATA, ALIGN=0

                          EXPORTAS ||area_number.87||, ||.data||
                  spc_bat
000000  00                DCB      0x00

                          AREA ||area_number.88||, DATA, ALIGN=0

                          EXPORTAS ||area_number.88||, ||.data||
                  spc_phase
000000  00                DCB      0x00

                          AREA ||area_number.89||, DATA, ALIGN=1

                          EXPORTAS ||area_number.89||, ||.data||
                  vz_cnt_s
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.90||, DATA, ALIGN=1

                          EXPORTAS ||area_number.90||, ||.data||
                  vz_cnt_s_
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.91||, DATA, ALIGN=1

                          EXPORTAS ||area_number.91||, ||.data||
                  vz_cnt_h
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.92||, DATA, ALIGN=1

                          EXPORTAS ||area_number.92||, ||.data||
                  vz_cnt_h_
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.93||, DATA, ALIGN=0

                          EXPORTAS ||area_number.93||, ||.data||
                  bAVZ
000000  00                DCB      0x00

                          AREA ||area_number.94||, DATA, ALIGN=0

                          EXPORTAS ||area_number.94||, ||.data||
                  ke_start_stat
000000  00                DCB      0x00

                          AREA ||area_number.95||, DATA, ALIGN=1

                          EXPORTAS ||area_number.95||, ||.data||
                  cnt_end_ke
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.96||, DATA, ALIGN=2

                          EXPORTAS ||area_number.96||, ||.data||
                  ke_date
                          %        8

                          AREA ||area_number.97||, DATA, ALIGN=1

                          EXPORTAS ||area_number.97||, ||.data||
                  __ee_vz_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.98||, DATA, ALIGN=1

                          EXPORTAS ||area_number.98||, ||.data||
                  __ee_spc_stat
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.99||, DATA, ALIGN=1

                          EXPORTAS ||area_number.99||, ||.data||
                  __ee_spc_bat
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.100||, DATA, ALIGN=1

                          EXPORTAS ||area_number.100||, ||.data||
                  __ee_spc_phase
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.101||, DATA, ALIGN=1

                          EXPORTAS ||area_number.101||, ||.data||
                  cntrl_stat_blok_cnt_plus
                          DCDU     0x00000000

                          AREA ||area_number.102||, DATA, ALIGN=1

                          EXPORTAS ||area_number.102||, ||.data||
                  cntrl_stat_blok_cnt_minus
                          DCDU     0x00000000

                          AREA ||area_number.103||, DATA, ALIGN=0

                          EXPORTAS ||area_number.103||, ||.data||
                  plazma_inv
                          DCDU     0x00000000

                          AREA ||area_number.104||, DATA, ALIGN=0

                          EXPORTAS ||area_number.104||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.105||, DATA, ALIGN=0

                          EXPORTAS ||area_number.105||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.106||, DATA, ALIGN=0

                          EXPORTAS ||area_number.106||, ||.data||
                  numOfForvardBps
000000  00                DCB      0x00

                          AREA ||area_number.107||, DATA, ALIGN=0

                          EXPORTAS ||area_number.107||, ||.data||
                  numOfForvardBps_old
000000  00                DCB      0x00

                          AREA ||area_number.108||, DATA, ALIGN=0

                          EXPORTAS ||area_number.108||, ||.data||
                  numOfForvardBps_minCnt
000000  00                DCB      0x00

                          AREA ||area_number.109||, DATA, ALIGN=1

                          EXPORTAS ||area_number.109||, ||.data||
                  numOfForvardBps_hourCnt
000000  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "control.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_control_c_9601dfb0____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_control_c_9601dfb0____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_control_c_9601dfb0____REVSH|
#line 130
|__asm___9_control_c_9601dfb0____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
